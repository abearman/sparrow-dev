'''
MAVLink protocol implementation (auto-generated by mavgen.py)

Generated from: slugs.xml,common.xml

Note: this file has been auto-generated. DO NOT EDIT
'''

import struct, array, time, json, os, sys, platform

from ...generator.mavcrc import x25crc

WIRE_PROTOCOL_VERSION = "0.9"
DIALECT = "slugs"

native_supported = platform.system() != 'Windows' # Not yet supported on other dialects
native_force = 'MAVNATIVE_FORCE' in os.environ # Will force use of native code regardless of what client app wants
native_testing = 'MAVNATIVE_TESTING' in os.environ # Will force both native and legacy code to be used and their results compared

if native_supported:
    try:
        import mavnative
    except ImportError:
        print("ERROR LOADING MAVNATIVE - falling back to python implementation")
        native_supported = False

# some base types from mavlink_types.h
MAVLINK_TYPE_CHAR     = 0
MAVLINK_TYPE_UINT8_T  = 1
MAVLINK_TYPE_INT8_T   = 2
MAVLINK_TYPE_UINT16_T = 3
MAVLINK_TYPE_INT16_T  = 4
MAVLINK_TYPE_UINT32_T = 5
MAVLINK_TYPE_INT32_T  = 6
MAVLINK_TYPE_UINT64_T = 7
MAVLINK_TYPE_INT64_T  = 8
MAVLINK_TYPE_FLOAT    = 9
MAVLINK_TYPE_DOUBLE   = 10


class MAVLink_header(object):
    '''MAVLink message header'''
    def __init__(self, msgId, mlen=0, seq=0, srcSystem=0, srcComponent=0):
        self.mlen = mlen
        self.seq = seq
        self.srcSystem = srcSystem
        self.srcComponent = srcComponent
        self.msgId = msgId

    def pack(self):
        return struct.pack('BBBBBB', 85, self.mlen, self.seq,
                          self.srcSystem, self.srcComponent, self.msgId)

class MAVLink_message(object):
    '''base MAVLink message class'''
    def __init__(self, msgId, name):
        self._header     = MAVLink_header(msgId)
        self._payload    = None
        self._msgbuf     = None
        self._crc        = None
        self._fieldnames = []
        self._type       = name

    def get_msgbuf(self):
        if isinstance(self._msgbuf, bytearray):
            return self._msgbuf
        return bytearray(self._msgbuf)

    def get_header(self):
        return self._header

    def get_payload(self):
        return self._payload

    def get_crc(self):
        return self._crc

    def get_fieldnames(self):
        return self._fieldnames

    def get_type(self):
        return self._type

    def get_msgId(self):
        return self._header.msgId

    def get_srcSystem(self):
        return self._header.srcSystem

    def get_srcComponent(self):
        return self._header.srcComponent

    def get_seq(self):
        return self._header.seq

    def __str__(self):
        ret = '%s {' % self._type
        for a in self._fieldnames:
            v = getattr(self, a)
            ret += '%s : %s, ' % (a, v)
        ret = ret[0:-2] + '}'
        return ret

    def __ne__(self, other):
        return not self.__eq__(other)

    def __eq__(self, other):
        if other == None:
            return False

        if self.get_type() != other.get_type():
            return False

        # We do not compare CRC because native code doesn't provide it
        #if self.get_crc() != other.get_crc():
        #    return False

        if self.get_seq() != other.get_seq():
            return False

        if self.get_srcSystem() != other.get_srcSystem():
            return False            

        if self.get_srcComponent() != other.get_srcComponent():
            return False   
            
        for a in self._fieldnames:
            if getattr(self, a) != getattr(other, a):
                return False

        return True

    def to_dict(self):
        d = dict({})
        d['mavpackettype'] = self._type
        for a in self._fieldnames:
          d[a] = getattr(self, a)
        return d

    def to_json(self):
        return json.dumps(self.to_dict())

    def pack(self, mav, crc_extra, payload):
        self._payload = payload
        self._header  = MAVLink_header(self._header.msgId, len(payload), mav.seq,
                                       mav.srcSystem, mav.srcComponent)
        self._msgbuf = self._header.pack() + payload
        crc = x25crc(self._msgbuf[1:])
        if False: # using CRC extra
            crc.accumulate_str(struct.pack('B', crc_extra))
        self._crc = crc.crc
        self._msgbuf += struct.pack('<H', self._crc)
        return self._msgbuf


# enums

class EnumEntry(object):
    def __init__(self, name, description):
        self.name = name
        self.description = description
        self.param = {}
        
enums = {}

# MAV_CMD
enums['MAV_CMD'] = {}
MAV_CMD_NAV_WAYPOINT = 16 # Navigate to waypoint.
enums['MAV_CMD'][16] = EnumEntry('MAV_CMD_NAV_WAYPOINT', '''Navigate to waypoint.''')
enums['MAV_CMD'][16].param[1] = '''Hold time in decimal seconds. (ignored by fixed wing, time to stay at waypoint for rotary wing)'''
enums['MAV_CMD'][16].param[2] = '''Acceptance radius in meters (if the sphere with this radius is hit, the waypoint counts as reached)'''
enums['MAV_CMD'][16].param[3] = '''0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.'''
enums['MAV_CMD'][16].param[4] = '''Desired yaw angle at waypoint (rotary wing)'''
enums['MAV_CMD'][16].param[5] = '''Latitude'''
enums['MAV_CMD'][16].param[6] = '''Longitude'''
enums['MAV_CMD'][16].param[7] = '''Altitude'''
MAV_CMD_NAV_LOITER_UNLIM = 17 # Loiter around this waypoint an unlimited amount of time
enums['MAV_CMD'][17] = EnumEntry('MAV_CMD_NAV_LOITER_UNLIM', '''Loiter around this waypoint an unlimited amount of time''')
enums['MAV_CMD'][17].param[1] = '''Empty'''
enums['MAV_CMD'][17].param[2] = '''Empty'''
enums['MAV_CMD'][17].param[3] = '''Radius around waypoint, in meters. If positive loiter clockwise, else counter-clockwise'''
enums['MAV_CMD'][17].param[4] = '''Desired yaw angle.'''
enums['MAV_CMD'][17].param[5] = '''Latitude'''
enums['MAV_CMD'][17].param[6] = '''Longitude'''
enums['MAV_CMD'][17].param[7] = '''Altitude'''
MAV_CMD_NAV_LOITER_TURNS = 18 # Loiter around this waypoint for X turns
enums['MAV_CMD'][18] = EnumEntry('MAV_CMD_NAV_LOITER_TURNS', '''Loiter around this waypoint for X turns''')
enums['MAV_CMD'][18].param[1] = '''Turns'''
enums['MAV_CMD'][18].param[2] = '''Empty'''
enums['MAV_CMD'][18].param[3] = '''Radius around waypoint, in meters. If positive loiter clockwise, else counter-clockwise'''
enums['MAV_CMD'][18].param[4] = '''Desired yaw angle.'''
enums['MAV_CMD'][18].param[5] = '''Latitude'''
enums['MAV_CMD'][18].param[6] = '''Longitude'''
enums['MAV_CMD'][18].param[7] = '''Altitude'''
MAV_CMD_NAV_LOITER_TIME = 19 # Loiter around this waypoint for X seconds
enums['MAV_CMD'][19] = EnumEntry('MAV_CMD_NAV_LOITER_TIME', '''Loiter around this waypoint for X seconds''')
enums['MAV_CMD'][19].param[1] = '''Seconds (decimal)'''
enums['MAV_CMD'][19].param[2] = '''Empty'''
enums['MAV_CMD'][19].param[3] = '''Radius around waypoint, in meters. If positive loiter clockwise, else counter-clockwise'''
enums['MAV_CMD'][19].param[4] = '''Desired yaw angle.'''
enums['MAV_CMD'][19].param[5] = '''Latitude'''
enums['MAV_CMD'][19].param[6] = '''Longitude'''
enums['MAV_CMD'][19].param[7] = '''Altitude'''
MAV_CMD_NAV_RETURN_TO_LAUNCH = 20 # Return to launch location
enums['MAV_CMD'][20] = EnumEntry('MAV_CMD_NAV_RETURN_TO_LAUNCH', '''Return to launch location''')
enums['MAV_CMD'][20].param[1] = '''Empty'''
enums['MAV_CMD'][20].param[2] = '''Empty'''
enums['MAV_CMD'][20].param[3] = '''Empty'''
enums['MAV_CMD'][20].param[4] = '''Empty'''
enums['MAV_CMD'][20].param[5] = '''Empty'''
enums['MAV_CMD'][20].param[6] = '''Empty'''
enums['MAV_CMD'][20].param[7] = '''Empty'''
MAV_CMD_NAV_LAND = 21 # Land at location
enums['MAV_CMD'][21] = EnumEntry('MAV_CMD_NAV_LAND', '''Land at location''')
enums['MAV_CMD'][21].param[1] = '''Empty'''
enums['MAV_CMD'][21].param[2] = '''Empty'''
enums['MAV_CMD'][21].param[3] = '''Empty'''
enums['MAV_CMD'][21].param[4] = '''Desired yaw angle.'''
enums['MAV_CMD'][21].param[5] = '''Latitude'''
enums['MAV_CMD'][21].param[6] = '''Longitude'''
enums['MAV_CMD'][21].param[7] = '''Altitude'''
MAV_CMD_NAV_TAKEOFF = 22 # Takeoff from ground / hand
enums['MAV_CMD'][22] = EnumEntry('MAV_CMD_NAV_TAKEOFF', '''Takeoff from ground / hand''')
enums['MAV_CMD'][22].param[1] = '''Minimum pitch (if airspeed sensor present), desired pitch without sensor'''
enums['MAV_CMD'][22].param[2] = '''Empty'''
enums['MAV_CMD'][22].param[3] = '''Empty'''
enums['MAV_CMD'][22].param[4] = '''Yaw angle (if magnetometer present), ignored without magnetometer'''
enums['MAV_CMD'][22].param[5] = '''Latitude'''
enums['MAV_CMD'][22].param[6] = '''Longitude'''
enums['MAV_CMD'][22].param[7] = '''Altitude'''
MAV_CMD_NAV_ROI = 80 # Sets the region of interest (ROI) for a sensor set or the
                        # vehicle itself. This can then be used by the
                        # vehicles control             system to
                        # control the vehicle attitude and the
                        # attitude of various             sensors such
                        # as cameras.
enums['MAV_CMD'][80] = EnumEntry('MAV_CMD_NAV_ROI', '''Sets the region of interest (ROI) for a sensor set or the
            vehicle itself. This can then be used by the vehicles control
            system to control the vehicle attitude and the attitude of various
            sensors such as cameras.''')
enums['MAV_CMD'][80].param[1] = '''Region of intereset mode. (see MAV_ROI enum)'''
enums['MAV_CMD'][80].param[2] = '''Waypoint index/ target ID. (see MAV_ROI enum)'''
enums['MAV_CMD'][80].param[3] = '''ROI index (allows a vehicle to manage multiple ROI's)'''
enums['MAV_CMD'][80].param[4] = '''Empty'''
enums['MAV_CMD'][80].param[5] = '''x the location of the fixed ROI (see MAV_FRAME)'''
enums['MAV_CMD'][80].param[6] = '''y'''
enums['MAV_CMD'][80].param[7] = '''z'''
MAV_CMD_NAV_PATHPLANNING = 81 # Control autonomous path planning on the MAV.
enums['MAV_CMD'][81] = EnumEntry('MAV_CMD_NAV_PATHPLANNING', '''Control autonomous path planning on the MAV.''')
enums['MAV_CMD'][81].param[1] = '''0: Disable local obstacle avoidance / local path planning (without resetting map), 1: Enable local path planning, 2: Enable and reset local path planning'''
enums['MAV_CMD'][81].param[2] = '''0: Disable full path planning (without resetting map), 1: Enable, 2: Enable and reset map/occupancy grid, 3: Enable and reset planned route, but not occupancy grid'''
enums['MAV_CMD'][81].param[3] = '''Empty'''
enums['MAV_CMD'][81].param[4] = '''Yaw angle at goal, in compass degrees, [0..360]'''
enums['MAV_CMD'][81].param[5] = '''Latitude/X of goal'''
enums['MAV_CMD'][81].param[6] = '''Longitude/Y of goal'''
enums['MAV_CMD'][81].param[7] = '''Altitude/Z of goal'''
MAV_CMD_NAV_LAST = 95 # NOP - This command is only used to mark the upper limit of the
                        # NAV/ACTION commands in the enumeration
enums['MAV_CMD'][95] = EnumEntry('MAV_CMD_NAV_LAST', '''NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration''')
enums['MAV_CMD'][95].param[1] = '''Empty'''
enums['MAV_CMD'][95].param[2] = '''Empty'''
enums['MAV_CMD'][95].param[3] = '''Empty'''
enums['MAV_CMD'][95].param[4] = '''Empty'''
enums['MAV_CMD'][95].param[5] = '''Empty'''
enums['MAV_CMD'][95].param[6] = '''Empty'''
enums['MAV_CMD'][95].param[7] = '''Empty'''
MAV_CMD_CONDITION_DELAY = 112 # Delay mission state machine.
enums['MAV_CMD'][112] = EnumEntry('MAV_CMD_CONDITION_DELAY', '''Delay mission state machine.''')
enums['MAV_CMD'][112].param[1] = '''Delay in seconds (decimal)'''
enums['MAV_CMD'][112].param[2] = '''Empty'''
enums['MAV_CMD'][112].param[3] = '''Empty'''
enums['MAV_CMD'][112].param[4] = '''Empty'''
enums['MAV_CMD'][112].param[5] = '''Empty'''
enums['MAV_CMD'][112].param[6] = '''Empty'''
enums['MAV_CMD'][112].param[7] = '''Empty'''
MAV_CMD_CONDITION_CHANGE_ALT = 113 # Ascend/descend at rate.  Delay mission state machine until desired
                        # altitude reached.
enums['MAV_CMD'][113] = EnumEntry('MAV_CMD_CONDITION_CHANGE_ALT', '''Ascend/descend at rate.  Delay mission state machine until desired altitude reached.''')
enums['MAV_CMD'][113].param[1] = '''Descent / Ascend rate (m/s)'''
enums['MAV_CMD'][113].param[2] = '''Empty'''
enums['MAV_CMD'][113].param[3] = '''Empty'''
enums['MAV_CMD'][113].param[4] = '''Empty'''
enums['MAV_CMD'][113].param[5] = '''Empty'''
enums['MAV_CMD'][113].param[6] = '''Empty'''
enums['MAV_CMD'][113].param[7] = '''Finish Altitude'''
MAV_CMD_CONDITION_DISTANCE = 114 # Delay mission state machine until within desired distance of next NAV
                        # point.
enums['MAV_CMD'][114] = EnumEntry('MAV_CMD_CONDITION_DISTANCE', '''Delay mission state machine until within desired distance of next NAV point.''')
enums['MAV_CMD'][114].param[1] = '''Distance (meters)'''
enums['MAV_CMD'][114].param[2] = '''Empty'''
enums['MAV_CMD'][114].param[3] = '''Empty'''
enums['MAV_CMD'][114].param[4] = '''Empty'''
enums['MAV_CMD'][114].param[5] = '''Empty'''
enums['MAV_CMD'][114].param[6] = '''Empty'''
enums['MAV_CMD'][114].param[7] = '''Empty'''
MAV_CMD_CONDITION_YAW = 115 # Reach a certain target angle.
enums['MAV_CMD'][115] = EnumEntry('MAV_CMD_CONDITION_YAW', '''Reach a certain target angle.''')
enums['MAV_CMD'][115].param[1] = '''target angle: [0-360], 0 is north'''
enums['MAV_CMD'][115].param[2] = '''speed during yaw change:[deg per second]'''
enums['MAV_CMD'][115].param[3] = '''direction: negative: counter clockwise, positive: clockwise [-1,1]'''
enums['MAV_CMD'][115].param[4] = '''relative offset or absolute angle: [ 1,0]'''
enums['MAV_CMD'][115].param[5] = '''Empty'''
enums['MAV_CMD'][115].param[6] = '''Empty'''
enums['MAV_CMD'][115].param[7] = '''Empty'''
MAV_CMD_CONDITION_LAST = 159 # NOP - This command is only used to mark the upper limit of the
                        # CONDITION commands in the enumeration
enums['MAV_CMD'][159] = EnumEntry('MAV_CMD_CONDITION_LAST', '''NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration''')
enums['MAV_CMD'][159].param[1] = '''Empty'''
enums['MAV_CMD'][159].param[2] = '''Empty'''
enums['MAV_CMD'][159].param[3] = '''Empty'''
enums['MAV_CMD'][159].param[4] = '''Empty'''
enums['MAV_CMD'][159].param[5] = '''Empty'''
enums['MAV_CMD'][159].param[6] = '''Empty'''
enums['MAV_CMD'][159].param[7] = '''Empty'''
MAV_CMD_DO_SET_MODE = 176 # Set system mode.
enums['MAV_CMD'][176] = EnumEntry('MAV_CMD_DO_SET_MODE', '''Set system mode.''')
enums['MAV_CMD'][176].param[1] = '''Mode, as defined by ENUM MAV_MODE'''
enums['MAV_CMD'][176].param[2] = '''Empty'''
enums['MAV_CMD'][176].param[3] = '''Empty'''
enums['MAV_CMD'][176].param[4] = '''Empty'''
enums['MAV_CMD'][176].param[5] = '''Empty'''
enums['MAV_CMD'][176].param[6] = '''Empty'''
enums['MAV_CMD'][176].param[7] = '''Empty'''
MAV_CMD_DO_JUMP = 177 # Jump to the desired command in the mission list.  Repeat this action
                        # only the specified number of times
enums['MAV_CMD'][177] = EnumEntry('MAV_CMD_DO_JUMP', '''Jump to the desired command in the mission list.  Repeat this action only the specified number of times''')
enums['MAV_CMD'][177].param[1] = '''Sequence number'''
enums['MAV_CMD'][177].param[2] = '''Repeat count'''
enums['MAV_CMD'][177].param[3] = '''Empty'''
enums['MAV_CMD'][177].param[4] = '''Empty'''
enums['MAV_CMD'][177].param[5] = '''Empty'''
enums['MAV_CMD'][177].param[6] = '''Empty'''
enums['MAV_CMD'][177].param[7] = '''Empty'''
MAV_CMD_DO_CHANGE_SPEED = 178 # Change speed and/or throttle set points.
enums['MAV_CMD'][178] = EnumEntry('MAV_CMD_DO_CHANGE_SPEED', '''Change speed and/or throttle set points.''')
enums['MAV_CMD'][178].param[1] = '''Speed type (0=Airspeed, 1=Ground Speed)'''
enums['MAV_CMD'][178].param[2] = '''Speed  (m/s, -1 indicates no change)'''
enums['MAV_CMD'][178].param[3] = '''Throttle  ( Percent, -1 indicates no change)'''
enums['MAV_CMD'][178].param[4] = '''Empty'''
enums['MAV_CMD'][178].param[5] = '''Empty'''
enums['MAV_CMD'][178].param[6] = '''Empty'''
enums['MAV_CMD'][178].param[7] = '''Empty'''
MAV_CMD_DO_SET_HOME = 179 # Changes the home location either to the current location or a
                        # specified location.
enums['MAV_CMD'][179] = EnumEntry('MAV_CMD_DO_SET_HOME', '''Changes the home location either to the current location or a specified location.''')
enums['MAV_CMD'][179].param[1] = '''Use current (1=use current location, 0=use specified location)'''
enums['MAV_CMD'][179].param[2] = '''Empty'''
enums['MAV_CMD'][179].param[3] = '''Empty'''
enums['MAV_CMD'][179].param[4] = '''Empty'''
enums['MAV_CMD'][179].param[5] = '''Latitude'''
enums['MAV_CMD'][179].param[6] = '''Longitude'''
enums['MAV_CMD'][179].param[7] = '''Altitude'''
MAV_CMD_DO_SET_PARAMETER = 180 # Set a system parameter.  Caution!  Use of this command requires
                        # knowledge of the numeric enumeration value
                        # of the parameter.
enums['MAV_CMD'][180] = EnumEntry('MAV_CMD_DO_SET_PARAMETER', '''Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.''')
enums['MAV_CMD'][180].param[1] = '''Parameter number'''
enums['MAV_CMD'][180].param[2] = '''Parameter value'''
enums['MAV_CMD'][180].param[3] = '''Empty'''
enums['MAV_CMD'][180].param[4] = '''Empty'''
enums['MAV_CMD'][180].param[5] = '''Empty'''
enums['MAV_CMD'][180].param[6] = '''Empty'''
enums['MAV_CMD'][180].param[7] = '''Empty'''
MAV_CMD_DO_SET_RELAY = 181 # Set a relay to a condition.
enums['MAV_CMD'][181] = EnumEntry('MAV_CMD_DO_SET_RELAY', '''Set a relay to a condition.''')
enums['MAV_CMD'][181].param[1] = '''Relay number'''
enums['MAV_CMD'][181].param[2] = '''Setting (1=on, 0=off, others possible depending on system hardware)'''
enums['MAV_CMD'][181].param[3] = '''Empty'''
enums['MAV_CMD'][181].param[4] = '''Empty'''
enums['MAV_CMD'][181].param[5] = '''Empty'''
enums['MAV_CMD'][181].param[6] = '''Empty'''
enums['MAV_CMD'][181].param[7] = '''Empty'''
MAV_CMD_DO_REPEAT_RELAY = 182 # Cycle a relay on and off for a desired number of cyles with a desired
                        # period.
enums['MAV_CMD'][182] = EnumEntry('MAV_CMD_DO_REPEAT_RELAY', '''Cycle a relay on and off for a desired number of cyles with a desired period.''')
enums['MAV_CMD'][182].param[1] = '''Relay number'''
enums['MAV_CMD'][182].param[2] = '''Cycle count'''
enums['MAV_CMD'][182].param[3] = '''Cycle time (seconds, decimal)'''
enums['MAV_CMD'][182].param[4] = '''Empty'''
enums['MAV_CMD'][182].param[5] = '''Empty'''
enums['MAV_CMD'][182].param[6] = '''Empty'''
enums['MAV_CMD'][182].param[7] = '''Empty'''
MAV_CMD_DO_SET_SERVO = 183 # Set a servo to a desired PWM value.
enums['MAV_CMD'][183] = EnumEntry('MAV_CMD_DO_SET_SERVO', '''Set a servo to a desired PWM value.''')
enums['MAV_CMD'][183].param[1] = '''Servo number'''
enums['MAV_CMD'][183].param[2] = '''PWM (microseconds, 1000 to 2000 typical)'''
enums['MAV_CMD'][183].param[3] = '''Empty'''
enums['MAV_CMD'][183].param[4] = '''Empty'''
enums['MAV_CMD'][183].param[5] = '''Empty'''
enums['MAV_CMD'][183].param[6] = '''Empty'''
enums['MAV_CMD'][183].param[7] = '''Empty'''
MAV_CMD_DO_REPEAT_SERVO = 184 # Cycle a between its nominal setting and a desired PWM for a desired
                        # number of cycles with a desired period.
enums['MAV_CMD'][184] = EnumEntry('MAV_CMD_DO_REPEAT_SERVO', '''Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.''')
enums['MAV_CMD'][184].param[1] = '''Servo number'''
enums['MAV_CMD'][184].param[2] = '''PWM (microseconds, 1000 to 2000 typical)'''
enums['MAV_CMD'][184].param[3] = '''Cycle count'''
enums['MAV_CMD'][184].param[4] = '''Cycle time (seconds)'''
enums['MAV_CMD'][184].param[5] = '''Empty'''
enums['MAV_CMD'][184].param[6] = '''Empty'''
enums['MAV_CMD'][184].param[7] = '''Empty'''
MAV_CMD_DO_CONTROL_VIDEO = 200 # Control onboard camera capturing.
enums['MAV_CMD'][200] = EnumEntry('MAV_CMD_DO_CONTROL_VIDEO', '''Control onboard camera capturing.''')
enums['MAV_CMD'][200].param[1] = '''Camera ID (-1 for all)'''
enums['MAV_CMD'][200].param[2] = '''Transmission: 0: disabled, 1: enabled compressed, 2: enabled raw'''
enums['MAV_CMD'][200].param[3] = '''Transmission mode: 0: video stream, >0: single images every n seconds (decimal)'''
enums['MAV_CMD'][200].param[4] = '''Recording: 0: disabled, 1: enabled compressed, 2: enabled raw'''
enums['MAV_CMD'][200].param[5] = '''Empty'''
enums['MAV_CMD'][200].param[6] = '''Empty'''
enums['MAV_CMD'][200].param[7] = '''Empty'''
MAV_CMD_DO_SET_ROI = 201 # Sets the region of interest (ROI) for a sensor set or the
                        # vehicle itself. This can then be used by the
                        # vehicles control                     system
                        # to control the vehicle attitude and the
                        # attitude of various
                        # devices such as cameras.
enums['MAV_CMD'][201] = EnumEntry('MAV_CMD_DO_SET_ROI', '''Sets the region of interest (ROI) for a sensor set or the
                    vehicle itself. This can then be used by the vehicles control
                    system to control the vehicle attitude and the attitude of various
                    devices such as cameras.
                ''')
enums['MAV_CMD'][201].param[1] = '''Region of interest mode. (see MAV_ROI enum)'''
enums['MAV_CMD'][201].param[2] = '''Waypoint index/ target ID. (see MAV_ROI enum)'''
enums['MAV_CMD'][201].param[3] = '''ROI index (allows a vehicle to manage multiple cameras etc.)'''
enums['MAV_CMD'][201].param[4] = '''Empty'''
enums['MAV_CMD'][201].param[5] = '''x the location of the fixed ROI (see MAV_FRAME)'''
enums['MAV_CMD'][201].param[6] = '''y'''
enums['MAV_CMD'][201].param[7] = '''z'''
MAV_CMD_DO_LAST = 240 # NOP - This command is only used to mark the upper limit of the DO
                        # commands in the enumeration
enums['MAV_CMD'][240] = EnumEntry('MAV_CMD_DO_LAST', '''NOP - This command is only used to mark the upper limit of the DO commands in the enumeration''')
enums['MAV_CMD'][240].param[1] = '''Empty'''
enums['MAV_CMD'][240].param[2] = '''Empty'''
enums['MAV_CMD'][240].param[3] = '''Empty'''
enums['MAV_CMD'][240].param[4] = '''Empty'''
enums['MAV_CMD'][240].param[5] = '''Empty'''
enums['MAV_CMD'][240].param[6] = '''Empty'''
enums['MAV_CMD'][240].param[7] = '''Empty'''
MAV_CMD_PREFLIGHT_CALIBRATION = 241 # Trigger calibration. This command will be only accepted if in pre-
                        # flight mode.
enums['MAV_CMD'][241] = EnumEntry('MAV_CMD_PREFLIGHT_CALIBRATION', '''Trigger calibration. This command will be only accepted if in pre-flight mode.''')
enums['MAV_CMD'][241].param[1] = '''Gyro calibration: 0: no, 1: yes'''
enums['MAV_CMD'][241].param[2] = '''Magnetometer calibration: 0: no, 1: yes'''
enums['MAV_CMD'][241].param[3] = '''Ground pressure: 0: no, 1: yes'''
enums['MAV_CMD'][241].param[4] = '''Radio calibration: 0: no, 1: yes'''
enums['MAV_CMD'][241].param[5] = '''Empty'''
enums['MAV_CMD'][241].param[6] = '''Empty'''
enums['MAV_CMD'][241].param[7] = '''Empty'''
MAV_CMD_PREFLIGHT_STORAGE = 245 # Request storage of different parameter values and logs. This command
                        # will be only accepted if in pre-flight mode.
enums['MAV_CMD'][245] = EnumEntry('MAV_CMD_PREFLIGHT_STORAGE', '''Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.''')
enums['MAV_CMD'][245].param[1] = '''Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM'''
enums['MAV_CMD'][245].param[2] = '''Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM'''
enums['MAV_CMD'][245].param[3] = '''Reserved'''
enums['MAV_CMD'][245].param[4] = '''Reserved'''
enums['MAV_CMD'][245].param[5] = '''Empty'''
enums['MAV_CMD'][245].param[6] = '''Empty'''
enums['MAV_CMD'][245].param[7] = '''Empty'''
MAV_CMD_ENUM_END = 246 # 
enums['MAV_CMD'][246] = EnumEntry('MAV_CMD_ENUM_END', '''''')

# MAV_DATA_STREAM
enums['MAV_DATA_STREAM'] = {}
MAV_DATA_STREAM_ALL = 0 # Enable all data streams
enums['MAV_DATA_STREAM'][0] = EnumEntry('MAV_DATA_STREAM_ALL', '''Enable all data streams''')
MAV_DATA_STREAM_RAW_SENSORS = 1 # Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.
enums['MAV_DATA_STREAM'][1] = EnumEntry('MAV_DATA_STREAM_RAW_SENSORS', '''Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.''')
MAV_DATA_STREAM_EXTENDED_STATUS = 2 # Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS
enums['MAV_DATA_STREAM'][2] = EnumEntry('MAV_DATA_STREAM_EXTENDED_STATUS', '''Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS''')
MAV_DATA_STREAM_RC_CHANNELS = 3 # Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW
enums['MAV_DATA_STREAM'][3] = EnumEntry('MAV_DATA_STREAM_RC_CHANNELS', '''Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW''')
MAV_DATA_STREAM_RAW_CONTROLLER = 4 # Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT,
                        # NAV_CONTROLLER_OUTPUT.
enums['MAV_DATA_STREAM'][4] = EnumEntry('MAV_DATA_STREAM_RAW_CONTROLLER', '''Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT, NAV_CONTROLLER_OUTPUT.''')
MAV_DATA_STREAM_POSITION = 6 # Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages.
enums['MAV_DATA_STREAM'][6] = EnumEntry('MAV_DATA_STREAM_POSITION', '''Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages.''')
MAV_DATA_STREAM_EXTRA1 = 10 # Dependent on the autopilot
enums['MAV_DATA_STREAM'][10] = EnumEntry('MAV_DATA_STREAM_EXTRA1', '''Dependent on the autopilot''')
MAV_DATA_STREAM_EXTRA2 = 11 # Dependent on the autopilot
enums['MAV_DATA_STREAM'][11] = EnumEntry('MAV_DATA_STREAM_EXTRA2', '''Dependent on the autopilot''')
MAV_DATA_STREAM_EXTRA3 = 12 # Dependent on the autopilot
enums['MAV_DATA_STREAM'][12] = EnumEntry('MAV_DATA_STREAM_EXTRA3', '''Dependent on the autopilot''')
MAV_DATA_STREAM_ENUM_END = 13 # 
enums['MAV_DATA_STREAM'][13] = EnumEntry('MAV_DATA_STREAM_ENUM_END', '''''')

# MAV_ROI
enums['MAV_ROI'] = {}
MAV_ROI_NONE = 0 # No region of interest.
enums['MAV_ROI'][0] = EnumEntry('MAV_ROI_NONE', '''No region of interest.''')
MAV_ROI_WPNEXT = 1 # Point toward next waypoint.
enums['MAV_ROI'][1] = EnumEntry('MAV_ROI_WPNEXT', '''Point toward next waypoint.''')
MAV_ROI_WPINDEX = 2 # Point toward given waypoint.
enums['MAV_ROI'][2] = EnumEntry('MAV_ROI_WPINDEX', '''Point toward given waypoint.''')
MAV_ROI_LOCATION = 3 # Point toward fixed location.
enums['MAV_ROI'][3] = EnumEntry('MAV_ROI_LOCATION', '''Point toward fixed location.''')
MAV_ROI_TARGET = 4 # Point toward of given id.
enums['MAV_ROI'][4] = EnumEntry('MAV_ROI_TARGET', '''Point toward of given id.''')
MAV_ROI_ENUM_END = 5 # 
enums['MAV_ROI'][5] = EnumEntry('MAV_ROI_ENUM_END', '''''')

# message IDs
MAVLINK_MSG_ID_BAD_DATA = -1
MAVLINK_MSG_ID_CPU_LOAD = 170
MAVLINK_MSG_ID_AIR_DATA = 171
MAVLINK_MSG_ID_SENSOR_BIAS = 172
MAVLINK_MSG_ID_DIAGNOSTIC = 173
MAVLINK_MSG_ID_SLUGS_NAVIGATION = 176
MAVLINK_MSG_ID_DATA_LOG = 177
MAVLINK_MSG_ID_GPS_DATE_TIME = 179
MAVLINK_MSG_ID_MID_LVL_CMDS = 180
MAVLINK_MSG_ID_CTRL_SRFC_PT = 181
MAVLINK_MSG_ID_SLUGS_ACTION = 183
MAVLINK_MSG_ID_HEARTBEAT = 0
MAVLINK_MSG_ID_BOOT = 1
MAVLINK_MSG_ID_SYSTEM_TIME = 2
MAVLINK_MSG_ID_PING = 3
MAVLINK_MSG_ID_SYSTEM_TIME_UTC = 4
MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL = 5
MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK = 6
MAVLINK_MSG_ID_AUTH_KEY = 7
MAVLINK_MSG_ID_ACTION_ACK = 9
MAVLINK_MSG_ID_ACTION = 10
MAVLINK_MSG_ID_SET_MODE = 11
MAVLINK_MSG_ID_SET_NAV_MODE = 12
MAVLINK_MSG_ID_PARAM_REQUEST_READ = 20
MAVLINK_MSG_ID_PARAM_REQUEST_LIST = 21
MAVLINK_MSG_ID_PARAM_VALUE = 22
MAVLINK_MSG_ID_PARAM_SET = 23
MAVLINK_MSG_ID_GPS_RAW_INT = 25
MAVLINK_MSG_ID_SCALED_IMU = 26
MAVLINK_MSG_ID_GPS_STATUS = 27
MAVLINK_MSG_ID_RAW_IMU = 28
MAVLINK_MSG_ID_RAW_PRESSURE = 29
MAVLINK_MSG_ID_SCALED_PRESSURE = 38
MAVLINK_MSG_ID_ATTITUDE = 30
MAVLINK_MSG_ID_LOCAL_POSITION = 31
MAVLINK_MSG_ID_GLOBAL_POSITION = 33
MAVLINK_MSG_ID_GPS_RAW = 32
MAVLINK_MSG_ID_SYS_STATUS = 34
MAVLINK_MSG_ID_RC_CHANNELS_RAW = 35
MAVLINK_MSG_ID_RC_CHANNELS_SCALED = 36
MAVLINK_MSG_ID_SERVO_OUTPUT_RAW = 37
MAVLINK_MSG_ID_WAYPOINT = 39
MAVLINK_MSG_ID_WAYPOINT_REQUEST = 40
MAVLINK_MSG_ID_WAYPOINT_SET_CURRENT = 41
MAVLINK_MSG_ID_WAYPOINT_CURRENT = 42
MAVLINK_MSG_ID_WAYPOINT_REQUEST_LIST = 43
MAVLINK_MSG_ID_WAYPOINT_COUNT = 44
MAVLINK_MSG_ID_WAYPOINT_CLEAR_ALL = 45
MAVLINK_MSG_ID_WAYPOINT_REACHED = 46
MAVLINK_MSG_ID_WAYPOINT_ACK = 47
MAVLINK_MSG_ID_GPS_SET_GLOBAL_ORIGIN = 48
MAVLINK_MSG_ID_GPS_LOCAL_ORIGIN_SET = 49
MAVLINK_MSG_ID_LOCAL_POSITION_SETPOINT_SET = 50
MAVLINK_MSG_ID_LOCAL_POSITION_SETPOINT = 51
MAVLINK_MSG_ID_CONTROL_STATUS = 52
MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA = 53
MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA = 54
MAVLINK_MSG_ID_SET_ROLL_PITCH_YAW_THRUST = 55
MAVLINK_MSG_ID_SET_ROLL_PITCH_YAW_SPEED_THRUST = 56
MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT = 57
MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT = 58
MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT = 62
MAVLINK_MSG_ID_POSITION_TARGET = 63
MAVLINK_MSG_ID_STATE_CORRECTION = 64
MAVLINK_MSG_ID_SET_ALTITUDE = 65
MAVLINK_MSG_ID_REQUEST_DATA_STREAM = 66
MAVLINK_MSG_ID_HIL_STATE = 67
MAVLINK_MSG_ID_HIL_CONTROLS = 68
MAVLINK_MSG_ID_MANUAL_CONTROL = 69
MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE = 70
MAVLINK_MSG_ID_GLOBAL_POSITION_INT = 73
MAVLINK_MSG_ID_VFR_HUD = 74
MAVLINK_MSG_ID_COMMAND = 75
MAVLINK_MSG_ID_COMMAND_ACK = 76
MAVLINK_MSG_ID_OPTICAL_FLOW = 100
MAVLINK_MSG_ID_OBJECT_DETECTION_EVENT = 140
MAVLINK_MSG_ID_DEBUG_VECT = 251
MAVLINK_MSG_ID_NAMED_VALUE_FLOAT = 252
MAVLINK_MSG_ID_NAMED_VALUE_INT = 253
MAVLINK_MSG_ID_STATUSTEXT = 254
MAVLINK_MSG_ID_DEBUG = 255

class MAVLink_cpu_load_message(MAVLink_message):
        '''
        Sensor and DSC control loads.
        '''
        id = MAVLINK_MSG_ID_CPU_LOAD
        name = 'CPU_LOAD'
        fieldnames = ['sensLoad', 'ctrlLoad', 'batVolt']
        ordered_fieldnames = [ 'sensLoad', 'ctrlLoad', 'batVolt' ]
        format = '>BBH'
        native_format = bytearray('>BBH', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 150

        def __init__(self, sensLoad, ctrlLoad, batVolt):
                MAVLink_message.__init__(self, MAVLink_cpu_load_message.id, MAVLink_cpu_load_message.name)
                self._fieldnames = MAVLink_cpu_load_message.fieldnames
                self.sensLoad = sensLoad
                self.ctrlLoad = ctrlLoad
                self.batVolt = batVolt

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 150, struct.pack('>BBH', self.sensLoad, self.ctrlLoad, self.batVolt))

class MAVLink_air_data_message(MAVLink_message):
        '''
        Air data for altitude and airspeed computation.
        '''
        id = MAVLINK_MSG_ID_AIR_DATA
        name = 'AIR_DATA'
        fieldnames = ['dynamicPressure', 'staticPressure', 'temperature']
        ordered_fieldnames = [ 'dynamicPressure', 'staticPressure', 'temperature' ]
        format = '>ffH'
        native_format = bytearray('>ffH', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 232

        def __init__(self, dynamicPressure, staticPressure, temperature):
                MAVLink_message.__init__(self, MAVLink_air_data_message.id, MAVLink_air_data_message.name)
                self._fieldnames = MAVLink_air_data_message.fieldnames
                self.dynamicPressure = dynamicPressure
                self.staticPressure = staticPressure
                self.temperature = temperature

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 232, struct.pack('>ffH', self.dynamicPressure, self.staticPressure, self.temperature))

class MAVLink_sensor_bias_message(MAVLink_message):
        '''
        Accelerometer and gyro biases.
        '''
        id = MAVLINK_MSG_ID_SENSOR_BIAS
        name = 'SENSOR_BIAS'
        fieldnames = ['axBias', 'ayBias', 'azBias', 'gxBias', 'gyBias', 'gzBias']
        ordered_fieldnames = [ 'axBias', 'ayBias', 'azBias', 'gxBias', 'gyBias', 'gzBias' ]
        format = '>ffffff'
        native_format = bytearray('>ffffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5]
        lengths = [1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0]
        crc_extra = 168

        def __init__(self, axBias, ayBias, azBias, gxBias, gyBias, gzBias):
                MAVLink_message.__init__(self, MAVLink_sensor_bias_message.id, MAVLink_sensor_bias_message.name)
                self._fieldnames = MAVLink_sensor_bias_message.fieldnames
                self.axBias = axBias
                self.ayBias = ayBias
                self.azBias = azBias
                self.gxBias = gxBias
                self.gyBias = gyBias
                self.gzBias = gzBias

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 168, struct.pack('>ffffff', self.axBias, self.ayBias, self.azBias, self.gxBias, self.gyBias, self.gzBias))

class MAVLink_diagnostic_message(MAVLink_message):
        '''
        Configurable diagnostic messages.
        '''
        id = MAVLINK_MSG_ID_DIAGNOSTIC
        name = 'DIAGNOSTIC'
        fieldnames = ['diagFl1', 'diagFl2', 'diagFl3', 'diagSh1', 'diagSh2', 'diagSh3']
        ordered_fieldnames = [ 'diagFl1', 'diagFl2', 'diagFl3', 'diagSh1', 'diagSh2', 'diagSh3' ]
        format = '>fffhhh'
        native_format = bytearray('>fffhhh', 'ascii')
        orders = [0, 1, 2, 3, 4, 5]
        lengths = [1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0]
        crc_extra = 2

        def __init__(self, diagFl1, diagFl2, diagFl3, diagSh1, diagSh2, diagSh3):
                MAVLink_message.__init__(self, MAVLink_diagnostic_message.id, MAVLink_diagnostic_message.name)
                self._fieldnames = MAVLink_diagnostic_message.fieldnames
                self.diagFl1 = diagFl1
                self.diagFl2 = diagFl2
                self.diagFl3 = diagFl3
                self.diagSh1 = diagSh1
                self.diagSh2 = diagSh2
                self.diagSh3 = diagSh3

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 2, struct.pack('>fffhhh', self.diagFl1, self.diagFl2, self.diagFl3, self.diagSh1, self.diagSh2, self.diagSh3))

class MAVLink_slugs_navigation_message(MAVLink_message):
        '''
        Data used in the navigation algorithm.
        '''
        id = MAVLINK_MSG_ID_SLUGS_NAVIGATION
        name = 'SLUGS_NAVIGATION'
        fieldnames = ['u_m', 'phi_c', 'theta_c', 'psiDot_c', 'ay_body', 'totalDist', 'dist2Go', 'fromWP', 'toWP']
        ordered_fieldnames = [ 'u_m', 'phi_c', 'theta_c', 'psiDot_c', 'ay_body', 'totalDist', 'dist2Go', 'fromWP', 'toWP' ]
        format = '>fffffffBB'
        native_format = bytearray('>fffffffBB', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 120

        def __init__(self, u_m, phi_c, theta_c, psiDot_c, ay_body, totalDist, dist2Go, fromWP, toWP):
                MAVLink_message.__init__(self, MAVLink_slugs_navigation_message.id, MAVLink_slugs_navigation_message.name)
                self._fieldnames = MAVLink_slugs_navigation_message.fieldnames
                self.u_m = u_m
                self.phi_c = phi_c
                self.theta_c = theta_c
                self.psiDot_c = psiDot_c
                self.ay_body = ay_body
                self.totalDist = totalDist
                self.dist2Go = dist2Go
                self.fromWP = fromWP
                self.toWP = toWP

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 120, struct.pack('>fffffffBB', self.u_m, self.phi_c, self.theta_c, self.psiDot_c, self.ay_body, self.totalDist, self.dist2Go, self.fromWP, self.toWP))

class MAVLink_data_log_message(MAVLink_message):
        '''
        Configurable data log probes to be used inside Simulink
        '''
        id = MAVLINK_MSG_ID_DATA_LOG
        name = 'DATA_LOG'
        fieldnames = ['fl_1', 'fl_2', 'fl_3', 'fl_4', 'fl_5', 'fl_6']
        ordered_fieldnames = [ 'fl_1', 'fl_2', 'fl_3', 'fl_4', 'fl_5', 'fl_6' ]
        format = '>ffffff'
        native_format = bytearray('>ffffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5]
        lengths = [1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0]
        crc_extra = 167

        def __init__(self, fl_1, fl_2, fl_3, fl_4, fl_5, fl_6):
                MAVLink_message.__init__(self, MAVLink_data_log_message.id, MAVLink_data_log_message.name)
                self._fieldnames = MAVLink_data_log_message.fieldnames
                self.fl_1 = fl_1
                self.fl_2 = fl_2
                self.fl_3 = fl_3
                self.fl_4 = fl_4
                self.fl_5 = fl_5
                self.fl_6 = fl_6

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 167, struct.pack('>ffffff', self.fl_1, self.fl_2, self.fl_3, self.fl_4, self.fl_5, self.fl_6))

class MAVLink_gps_date_time_message(MAVLink_message):
        '''
        Pilot console PWM messges.
        '''
        id = MAVLINK_MSG_ID_GPS_DATE_TIME
        name = 'GPS_DATE_TIME'
        fieldnames = ['year', 'month', 'day', 'hour', 'min', 'sec', 'visSat']
        ordered_fieldnames = [ 'year', 'month', 'day', 'hour', 'min', 'sec', 'visSat' ]
        format = '>BBBBBBB'
        native_format = bytearray('>BBBBBBB', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6]
        lengths = [1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0]
        crc_extra = 16

        def __init__(self, year, month, day, hour, min, sec, visSat):
                MAVLink_message.__init__(self, MAVLink_gps_date_time_message.id, MAVLink_gps_date_time_message.name)
                self._fieldnames = MAVLink_gps_date_time_message.fieldnames
                self.year = year
                self.month = month
                self.day = day
                self.hour = hour
                self.min = min
                self.sec = sec
                self.visSat = visSat

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 16, struct.pack('>BBBBBBB', self.year, self.month, self.day, self.hour, self.min, self.sec, self.visSat))

class MAVLink_mid_lvl_cmds_message(MAVLink_message):
        '''
        Mid Level commands sent from the GS to the autopilot. These
        are only sent when being opperated in mid-level commands mode
        from the ground; for periodic report of these commands
        generated from the autopilot see message XXXX.
        '''
        id = MAVLINK_MSG_ID_MID_LVL_CMDS
        name = 'MID_LVL_CMDS'
        fieldnames = ['target', 'hCommand', 'uCommand', 'rCommand']
        ordered_fieldnames = [ 'target', 'hCommand', 'uCommand', 'rCommand' ]
        format = '>Bfff'
        native_format = bytearray('>Bfff', 'ascii')
        orders = [0, 1, 2, 3]
        lengths = [1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0]
        crc_extra = 2

        def __init__(self, target, hCommand, uCommand, rCommand):
                MAVLink_message.__init__(self, MAVLink_mid_lvl_cmds_message.id, MAVLink_mid_lvl_cmds_message.name)
                self._fieldnames = MAVLink_mid_lvl_cmds_message.fieldnames
                self.target = target
                self.hCommand = hCommand
                self.uCommand = uCommand
                self.rCommand = rCommand

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 2, struct.pack('>Bfff', self.target, self.hCommand, self.uCommand, self.rCommand))

class MAVLink_ctrl_srfc_pt_message(MAVLink_message):
        '''
        This message configures the Selective Passthrough mode. it
        allows to select which control surfaces the Pilot can control
        from his console. It is implemented as a bitfield as follows:
        Position          Bit        Code
        =================================             15-8
        Reserved               7                 dt_pass    128
        6                 dla_pass   64             5
        dra_pass   32             4                 dr_pass    16
        3                 dle_pass   8             2
        dre_pass   4             1                 dlf_pass   2
        0                 drf_pass   1             Where Bit 15 is the
        MSb. 0 = AP has control of the surface; 1 = Pilot Console has
        control of the surface.
        '''
        id = MAVLINK_MSG_ID_CTRL_SRFC_PT
        name = 'CTRL_SRFC_PT'
        fieldnames = ['target', 'bitfieldPt']
        ordered_fieldnames = [ 'target', 'bitfieldPt' ]
        format = '>BH'
        native_format = bytearray('>BH', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 52

        def __init__(self, target, bitfieldPt):
                MAVLink_message.__init__(self, MAVLink_ctrl_srfc_pt_message.id, MAVLink_ctrl_srfc_pt_message.name)
                self._fieldnames = MAVLink_ctrl_srfc_pt_message.fieldnames
                self.target = target
                self.bitfieldPt = bitfieldPt

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 52, struct.pack('>BH', self.target, self.bitfieldPt))

class MAVLink_slugs_action_message(MAVLink_message):
        '''
        Action messages focused on the SLUGS AP.
        '''
        id = MAVLINK_MSG_ID_SLUGS_ACTION
        name = 'SLUGS_ACTION'
        fieldnames = ['target', 'actionId', 'actionVal']
        ordered_fieldnames = [ 'target', 'actionId', 'actionVal' ]
        format = '>BBH'
        native_format = bytearray('>BBH', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 202

        def __init__(self, target, actionId, actionVal):
                MAVLink_message.__init__(self, MAVLink_slugs_action_message.id, MAVLink_slugs_action_message.name)
                self._fieldnames = MAVLink_slugs_action_message.fieldnames
                self.target = target
                self.actionId = actionId
                self.actionVal = actionVal

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 202, struct.pack('>BBH', self.target, self.actionId, self.actionVal))

class MAVLink_heartbeat_message(MAVLink_message):
        '''
        The heartbeat message shows that a system is present and
        responding. The type of the MAV and Autopilot hardware allow
        the receiving system to treat further messages from this
        system appropriate (e.g. by laying out the user interface
        based on the autopilot).
        '''
        id = MAVLINK_MSG_ID_HEARTBEAT
        name = 'HEARTBEAT'
        fieldnames = ['type', 'autopilot', 'mavlink_version']
        ordered_fieldnames = [ 'type', 'autopilot', 'mavlink_version' ]
        format = '>BBB'
        native_format = bytearray('>BBB', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 72

        def __init__(self, type, autopilot, mavlink_version):
                MAVLink_message.__init__(self, MAVLink_heartbeat_message.id, MAVLink_heartbeat_message.name)
                self._fieldnames = MAVLink_heartbeat_message.fieldnames
                self.type = type
                self.autopilot = autopilot
                self.mavlink_version = mavlink_version

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 72, struct.pack('>BBB', self.type, self.autopilot, self.mavlink_version))

class MAVLink_boot_message(MAVLink_message):
        '''
        The boot message indicates that a system is starting. The
        onboard software version allows to keep track of onboard
        soft/firmware revisions.
        '''
        id = MAVLINK_MSG_ID_BOOT
        name = 'BOOT'
        fieldnames = ['version']
        ordered_fieldnames = [ 'version' ]
        format = '>I'
        native_format = bytearray('>I', 'ascii')
        orders = [0]
        lengths = [1]
        array_lengths = [0]
        crc_extra = 39

        def __init__(self, version):
                MAVLink_message.__init__(self, MAVLink_boot_message.id, MAVLink_boot_message.name)
                self._fieldnames = MAVLink_boot_message.fieldnames
                self.version = version

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 39, struct.pack('>I', self.version))

class MAVLink_system_time_message(MAVLink_message):
        '''
        The system time is the time of the master clock, typically the
        computer clock of the main onboard computer.
        '''
        id = MAVLINK_MSG_ID_SYSTEM_TIME
        name = 'SYSTEM_TIME'
        fieldnames = ['time_usec']
        ordered_fieldnames = [ 'time_usec' ]
        format = '>Q'
        native_format = bytearray('>Q', 'ascii')
        orders = [0]
        lengths = [1]
        array_lengths = [0]
        crc_extra = 190

        def __init__(self, time_usec):
                MAVLink_message.__init__(self, MAVLink_system_time_message.id, MAVLink_system_time_message.name)
                self._fieldnames = MAVLink_system_time_message.fieldnames
                self.time_usec = time_usec

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 190, struct.pack('>Q', self.time_usec))

class MAVLink_ping_message(MAVLink_message):
        '''
        A ping message either requesting or responding to a ping. This
        allows to measure the system latencies, including serial port,
        radio modem and UDP connections.
        '''
        id = MAVLINK_MSG_ID_PING
        name = 'PING'
        fieldnames = ['seq', 'target_system', 'target_component', 'time']
        ordered_fieldnames = [ 'seq', 'target_system', 'target_component', 'time' ]
        format = '>IBBQ'
        native_format = bytearray('>IBBQ', 'ascii')
        orders = [0, 1, 2, 3]
        lengths = [1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0]
        crc_extra = 92

        def __init__(self, seq, target_system, target_component, time):
                MAVLink_message.__init__(self, MAVLink_ping_message.id, MAVLink_ping_message.name)
                self._fieldnames = MAVLink_ping_message.fieldnames
                self.seq = seq
                self.target_system = target_system
                self.target_component = target_component
                self.time = time

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 92, struct.pack('>IBBQ', self.seq, self.target_system, self.target_component, self.time))

class MAVLink_system_time_utc_message(MAVLink_message):
        '''
        UTC date and time from GPS module
        '''
        id = MAVLINK_MSG_ID_SYSTEM_TIME_UTC
        name = 'SYSTEM_TIME_UTC'
        fieldnames = ['utc_date', 'utc_time']
        ordered_fieldnames = [ 'utc_date', 'utc_time' ]
        format = '>II'
        native_format = bytearray('>II', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 191

        def __init__(self, utc_date, utc_time):
                MAVLink_message.__init__(self, MAVLink_system_time_utc_message.id, MAVLink_system_time_utc_message.name)
                self._fieldnames = MAVLink_system_time_utc_message.fieldnames
                self.utc_date = utc_date
                self.utc_time = utc_time

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 191, struct.pack('>II', self.utc_date, self.utc_time))

class MAVLink_change_operator_control_message(MAVLink_message):
        '''
        Request to control this MAV
        '''
        id = MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL
        name = 'CHANGE_OPERATOR_CONTROL'
        fieldnames = ['target_system', 'control_request', 'version', 'passkey']
        ordered_fieldnames = [ 'target_system', 'control_request', 'version', 'passkey' ]
        format = '>BBB25s'
        native_format = bytearray('>BBBc', 'ascii')
        orders = [0, 1, 2, 3]
        lengths = [1, 1, 1, 1]
        array_lengths = [0, 0, 0, 25]
        crc_extra = 217

        def __init__(self, target_system, control_request, version, passkey):
                MAVLink_message.__init__(self, MAVLink_change_operator_control_message.id, MAVLink_change_operator_control_message.name)
                self._fieldnames = MAVLink_change_operator_control_message.fieldnames
                self.target_system = target_system
                self.control_request = control_request
                self.version = version
                self.passkey = passkey

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 217, struct.pack('>BBB25s', self.target_system, self.control_request, self.version, self.passkey))

class MAVLink_change_operator_control_ack_message(MAVLink_message):
        '''
        Accept / deny control of this MAV
        '''
        id = MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK
        name = 'CHANGE_OPERATOR_CONTROL_ACK'
        fieldnames = ['gcs_system_id', 'control_request', 'ack']
        ordered_fieldnames = [ 'gcs_system_id', 'control_request', 'ack' ]
        format = '>BBB'
        native_format = bytearray('>BBB', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 104

        def __init__(self, gcs_system_id, control_request, ack):
                MAVLink_message.__init__(self, MAVLink_change_operator_control_ack_message.id, MAVLink_change_operator_control_ack_message.name)
                self._fieldnames = MAVLink_change_operator_control_ack_message.fieldnames
                self.gcs_system_id = gcs_system_id
                self.control_request = control_request
                self.ack = ack

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 104, struct.pack('>BBB', self.gcs_system_id, self.control_request, self.ack))

class MAVLink_auth_key_message(MAVLink_message):
        '''
        Emit an encrypted signature / key identifying this system.
        PLEASE NOTE: This protocol has been kept simple, so
        transmitting the key requires an encrypted channel for true
        safety.
        '''
        id = MAVLINK_MSG_ID_AUTH_KEY
        name = 'AUTH_KEY'
        fieldnames = ['key']
        ordered_fieldnames = [ 'key' ]
        format = '>32s'
        native_format = bytearray('>c', 'ascii')
        orders = [0]
        lengths = [1]
        array_lengths = [32]
        crc_extra = 119

        def __init__(self, key):
                MAVLink_message.__init__(self, MAVLink_auth_key_message.id, MAVLink_auth_key_message.name)
                self._fieldnames = MAVLink_auth_key_message.fieldnames
                self.key = key

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 119, struct.pack('>32s', self.key))

class MAVLink_action_ack_message(MAVLink_message):
        '''
        This message acknowledges an action. IMPORTANT: The
        acknowledgement can be also negative, e.g. the MAV rejects a
        reset message because it is in-flight. The action ids are
        defined in ENUM MAV_ACTION in mavlink/include/mavlink_types.h
        '''
        id = MAVLINK_MSG_ID_ACTION_ACK
        name = 'ACTION_ACK'
        fieldnames = ['action', 'result']
        ordered_fieldnames = [ 'action', 'result' ]
        format = '>BB'
        native_format = bytearray('>BB', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 219

        def __init__(self, action, result):
                MAVLink_message.__init__(self, MAVLink_action_ack_message.id, MAVLink_action_ack_message.name)
                self._fieldnames = MAVLink_action_ack_message.fieldnames
                self.action = action
                self.result = result

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 219, struct.pack('>BB', self.action, self.result))

class MAVLink_action_message(MAVLink_message):
        '''
        An action message allows to execute a certain onboard action.
        These include liftoff, land, storing parameters too EEPROM,
        shutddown, etc. The action ids are defined in ENUM MAV_ACTION
        in mavlink/include/mavlink_types.h
        '''
        id = MAVLINK_MSG_ID_ACTION
        name = 'ACTION'
        fieldnames = ['target', 'target_component', 'action']
        ordered_fieldnames = [ 'target', 'target_component', 'action' ]
        format = '>BBB'
        native_format = bytearray('>BBB', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 60

        def __init__(self, target, target_component, action):
                MAVLink_message.__init__(self, MAVLink_action_message.id, MAVLink_action_message.name)
                self._fieldnames = MAVLink_action_message.fieldnames
                self.target = target
                self.target_component = target_component
                self.action = action

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 60, struct.pack('>BBB', self.target, self.target_component, self.action))

class MAVLink_set_mode_message(MAVLink_message):
        '''
        Set the system mode, as defined by enum MAV_MODE in
        mavlink/include/mavlink_types.h. There is no target component
        id as the mode is by definition for the overall aircraft, not
        only for one component.
        '''
        id = MAVLINK_MSG_ID_SET_MODE
        name = 'SET_MODE'
        fieldnames = ['target', 'mode']
        ordered_fieldnames = [ 'target', 'mode' ]
        format = '>BB'
        native_format = bytearray('>BB', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 186

        def __init__(self, target, mode):
                MAVLink_message.__init__(self, MAVLink_set_mode_message.id, MAVLink_set_mode_message.name)
                self._fieldnames = MAVLink_set_mode_message.fieldnames
                self.target = target
                self.mode = mode

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 186, struct.pack('>BB', self.target, self.mode))

class MAVLink_set_nav_mode_message(MAVLink_message):
        '''
        Set the system navigation mode, as defined by enum
        MAV_NAV_MODE in mavlink/include/mavlink_types.h. The
        navigation mode applies to the whole aircraft and thus all
        components.
        '''
        id = MAVLINK_MSG_ID_SET_NAV_MODE
        name = 'SET_NAV_MODE'
        fieldnames = ['target', 'nav_mode']
        ordered_fieldnames = [ 'target', 'nav_mode' ]
        format = '>BB'
        native_format = bytearray('>BB', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 10

        def __init__(self, target, nav_mode):
                MAVLink_message.__init__(self, MAVLink_set_nav_mode_message.id, MAVLink_set_nav_mode_message.name)
                self._fieldnames = MAVLink_set_nav_mode_message.fieldnames
                self.target = target
                self.nav_mode = nav_mode

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 10, struct.pack('>BB', self.target, self.nav_mode))

class MAVLink_param_request_read_message(MAVLink_message):
        '''
        Request to read the onboard parameter with the param_id string
        id. Onboard parameters are stored as key[const char*] ->
        value[float]. This allows to send a parameter to any other
        component (such as the GCS) without the need of previous
        knowledge of possible parameter names. Thus the same GCS can
        store different parameters for different autopilots. See also
        http://qgroundcontrol.org/parameter_interface for a full
        documentation of QGroundControl and IMU code.
        '''
        id = MAVLINK_MSG_ID_PARAM_REQUEST_READ
        name = 'PARAM_REQUEST_READ'
        fieldnames = ['target_system', 'target_component', 'param_id', 'param_index']
        ordered_fieldnames = [ 'target_system', 'target_component', 'param_id', 'param_index' ]
        format = '>BB15bh'
        native_format = bytearray('>BBbh', 'ascii')
        orders = [0, 1, 2, 3]
        lengths = [1, 1, 15, 1]
        array_lengths = [0, 0, 15, 0]
        crc_extra = 89

        def __init__(self, target_system, target_component, param_id, param_index):
                MAVLink_message.__init__(self, MAVLink_param_request_read_message.id, MAVLink_param_request_read_message.name)
                self._fieldnames = MAVLink_param_request_read_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.param_id = param_id
                self.param_index = param_index

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 89, struct.pack('>BB15bh', self.target_system, self.target_component, self.param_id[0], self.param_id[1], self.param_id[2], self.param_id[3], self.param_id[4], self.param_id[5], self.param_id[6], self.param_id[7], self.param_id[8], self.param_id[9], self.param_id[10], self.param_id[11], self.param_id[12], self.param_id[13], self.param_id[14], self.param_index))

class MAVLink_param_request_list_message(MAVLink_message):
        '''
        Request all parameters of this component. After his request,
        all parameters are emitted.
        '''
        id = MAVLINK_MSG_ID_PARAM_REQUEST_LIST
        name = 'PARAM_REQUEST_LIST'
        fieldnames = ['target_system', 'target_component']
        ordered_fieldnames = [ 'target_system', 'target_component' ]
        format = '>BB'
        native_format = bytearray('>BB', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 159

        def __init__(self, target_system, target_component):
                MAVLink_message.__init__(self, MAVLink_param_request_list_message.id, MAVLink_param_request_list_message.name)
                self._fieldnames = MAVLink_param_request_list_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 159, struct.pack('>BB', self.target_system, self.target_component))

class MAVLink_param_value_message(MAVLink_message):
        '''
        Emit the value of a onboard parameter. The inclusion of
        param_count and param_index in the message allows the
        recipient to keep track of received parameters and allows him
        to re-request missing parameters after a loss or timeout.
        '''
        id = MAVLINK_MSG_ID_PARAM_VALUE
        name = 'PARAM_VALUE'
        fieldnames = ['param_id', 'param_value', 'param_count', 'param_index']
        ordered_fieldnames = [ 'param_id', 'param_value', 'param_count', 'param_index' ]
        format = '>15bfHH'
        native_format = bytearray('>bfHH', 'ascii')
        orders = [0, 1, 2, 3]
        lengths = [15, 1, 1, 1]
        array_lengths = [15, 0, 0, 0]
        crc_extra = 162

        def __init__(self, param_id, param_value, param_count, param_index):
                MAVLink_message.__init__(self, MAVLink_param_value_message.id, MAVLink_param_value_message.name)
                self._fieldnames = MAVLink_param_value_message.fieldnames
                self.param_id = param_id
                self.param_value = param_value
                self.param_count = param_count
                self.param_index = param_index

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 162, struct.pack('>15bfHH', self.param_id[0], self.param_id[1], self.param_id[2], self.param_id[3], self.param_id[4], self.param_id[5], self.param_id[6], self.param_id[7], self.param_id[8], self.param_id[9], self.param_id[10], self.param_id[11], self.param_id[12], self.param_id[13], self.param_id[14], self.param_value, self.param_count, self.param_index))

class MAVLink_param_set_message(MAVLink_message):
        '''
        Set a parameter value TEMPORARILY to RAM. It will be reset to
        default on system reboot. Send the ACTION
        MAV_ACTION_STORAGE_WRITE to PERMANENTLY write the RAM contents
        to EEPROM. IMPORTANT: The receiving component should
        acknowledge the new parameter value by sending a param_value
        message to all communication partners. This will also ensure
        that multiple GCS all have an up-to-date list of all
        parameters. If the sending GCS did not receive a PARAM_VALUE
        message within its timeout time, it should re-send the
        PARAM_SET message.
        '''
        id = MAVLINK_MSG_ID_PARAM_SET
        name = 'PARAM_SET'
        fieldnames = ['target_system', 'target_component', 'param_id', 'param_value']
        ordered_fieldnames = [ 'target_system', 'target_component', 'param_id', 'param_value' ]
        format = '>BB15bf'
        native_format = bytearray('>BBbf', 'ascii')
        orders = [0, 1, 2, 3]
        lengths = [1, 1, 15, 1]
        array_lengths = [0, 0, 15, 0]
        crc_extra = 121

        def __init__(self, target_system, target_component, param_id, param_value):
                MAVLink_message.__init__(self, MAVLink_param_set_message.id, MAVLink_param_set_message.name)
                self._fieldnames = MAVLink_param_set_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.param_id = param_id
                self.param_value = param_value

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 121, struct.pack('>BB15bf', self.target_system, self.target_component, self.param_id[0], self.param_id[1], self.param_id[2], self.param_id[3], self.param_id[4], self.param_id[5], self.param_id[6], self.param_id[7], self.param_id[8], self.param_id[9], self.param_id[10], self.param_id[11], self.param_id[12], self.param_id[13], self.param_id[14], self.param_value))

class MAVLink_gps_raw_int_message(MAVLink_message):
        '''
        The global position, as returned by the Global Positioning
        System (GPS). This is NOT the global position estimate of the
        sytem, but rather a RAW sensor value. See message
        GLOBAL_POSITION for the global position estimate. Coordinate
        frame is right-handed, Z-axis up (GPS frame)
        '''
        id = MAVLINK_MSG_ID_GPS_RAW_INT
        name = 'GPS_RAW_INT'
        fieldnames = ['usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'v', 'hdg']
        ordered_fieldnames = [ 'usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'v', 'hdg' ]
        format = '>QBiiiffff'
        native_format = bytearray('>QBiiiffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 149

        def __init__(self, usec, fix_type, lat, lon, alt, eph, epv, v, hdg):
                MAVLink_message.__init__(self, MAVLink_gps_raw_int_message.id, MAVLink_gps_raw_int_message.name)
                self._fieldnames = MAVLink_gps_raw_int_message.fieldnames
                self.usec = usec
                self.fix_type = fix_type
                self.lat = lat
                self.lon = lon
                self.alt = alt
                self.eph = eph
                self.epv = epv
                self.v = v
                self.hdg = hdg

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 149, struct.pack('>QBiiiffff', self.usec, self.fix_type, self.lat, self.lon, self.alt, self.eph, self.epv, self.v, self.hdg))

class MAVLink_scaled_imu_message(MAVLink_message):
        '''
        The RAW IMU readings for the usual 9DOF sensor setup. This
        message should contain the scaled values to the described
        units
        '''
        id = MAVLINK_MSG_ID_SCALED_IMU
        name = 'SCALED_IMU'
        fieldnames = ['usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag']
        ordered_fieldnames = [ 'usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag' ]
        format = '>Qhhhhhhhhh'
        native_format = bytearray('>Qhhhhhhhhh', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 222

        def __init__(self, usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag):
                MAVLink_message.__init__(self, MAVLink_scaled_imu_message.id, MAVLink_scaled_imu_message.name)
                self._fieldnames = MAVLink_scaled_imu_message.fieldnames
                self.usec = usec
                self.xacc = xacc
                self.yacc = yacc
                self.zacc = zacc
                self.xgyro = xgyro
                self.ygyro = ygyro
                self.zgyro = zgyro
                self.xmag = xmag
                self.ymag = ymag
                self.zmag = zmag

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 222, struct.pack('>Qhhhhhhhhh', self.usec, self.xacc, self.yacc, self.zacc, self.xgyro, self.ygyro, self.zgyro, self.xmag, self.ymag, self.zmag))

class MAVLink_gps_status_message(MAVLink_message):
        '''
        The positioning status, as reported by GPS. This message is
        intended to display status information about each satellite
        visible to the receiver. See message GLOBAL_POSITION for the
        global position estimate. This message can contain information
        for up to 20 satellites.
        '''
        id = MAVLINK_MSG_ID_GPS_STATUS
        name = 'GPS_STATUS'
        fieldnames = ['satellites_visible', 'satellite_prn', 'satellite_used', 'satellite_elevation', 'satellite_azimuth', 'satellite_snr']
        ordered_fieldnames = [ 'satellites_visible', 'satellite_prn', 'satellite_used', 'satellite_elevation', 'satellite_azimuth', 'satellite_snr' ]
        format = '>B20b20b20b20b20b'
        native_format = bytearray('>Bbbbbb', 'ascii')
        orders = [0, 1, 2, 3, 4, 5]
        lengths = [1, 20, 20, 20, 20, 20]
        array_lengths = [0, 20, 20, 20, 20, 20]
        crc_extra = 110

        def __init__(self, satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr):
                MAVLink_message.__init__(self, MAVLink_gps_status_message.id, MAVLink_gps_status_message.name)
                self._fieldnames = MAVLink_gps_status_message.fieldnames
                self.satellites_visible = satellites_visible
                self.satellite_prn = satellite_prn
                self.satellite_used = satellite_used
                self.satellite_elevation = satellite_elevation
                self.satellite_azimuth = satellite_azimuth
                self.satellite_snr = satellite_snr

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 110, struct.pack('>B20b20b20b20b20b', self.satellites_visible, self.satellite_prn[0], self.satellite_prn[1], self.satellite_prn[2], self.satellite_prn[3], self.satellite_prn[4], self.satellite_prn[5], self.satellite_prn[6], self.satellite_prn[7], self.satellite_prn[8], self.satellite_prn[9], self.satellite_prn[10], self.satellite_prn[11], self.satellite_prn[12], self.satellite_prn[13], self.satellite_prn[14], self.satellite_prn[15], self.satellite_prn[16], self.satellite_prn[17], self.satellite_prn[18], self.satellite_prn[19], self.satellite_used[0], self.satellite_used[1], self.satellite_used[2], self.satellite_used[3], self.satellite_used[4], self.satellite_used[5], self.satellite_used[6], self.satellite_used[7], self.satellite_used[8], self.satellite_used[9], self.satellite_used[10], self.satellite_used[11], self.satellite_used[12], self.satellite_used[13], self.satellite_used[14], self.satellite_used[15], self.satellite_used[16], self.satellite_used[17], self.satellite_used[18], self.satellite_used[19], self.satellite_elevation[0], self.satellite_elevation[1], self.satellite_elevation[2], self.satellite_elevation[3], self.satellite_elevation[4], self.satellite_elevation[5], self.satellite_elevation[6], self.satellite_elevation[7], self.satellite_elevation[8], self.satellite_elevation[9], self.satellite_elevation[10], self.satellite_elevation[11], self.satellite_elevation[12], self.satellite_elevation[13], self.satellite_elevation[14], self.satellite_elevation[15], self.satellite_elevation[16], self.satellite_elevation[17], self.satellite_elevation[18], self.satellite_elevation[19], self.satellite_azimuth[0], self.satellite_azimuth[1], self.satellite_azimuth[2], self.satellite_azimuth[3], self.satellite_azimuth[4], self.satellite_azimuth[5], self.satellite_azimuth[6], self.satellite_azimuth[7], self.satellite_azimuth[8], self.satellite_azimuth[9], self.satellite_azimuth[10], self.satellite_azimuth[11], self.satellite_azimuth[12], self.satellite_azimuth[13], self.satellite_azimuth[14], self.satellite_azimuth[15], self.satellite_azimuth[16], self.satellite_azimuth[17], self.satellite_azimuth[18], self.satellite_azimuth[19], self.satellite_snr[0], self.satellite_snr[1], self.satellite_snr[2], self.satellite_snr[3], self.satellite_snr[4], self.satellite_snr[5], self.satellite_snr[6], self.satellite_snr[7], self.satellite_snr[8], self.satellite_snr[9], self.satellite_snr[10], self.satellite_snr[11], self.satellite_snr[12], self.satellite_snr[13], self.satellite_snr[14], self.satellite_snr[15], self.satellite_snr[16], self.satellite_snr[17], self.satellite_snr[18], self.satellite_snr[19]))

class MAVLink_raw_imu_message(MAVLink_message):
        '''
        The RAW IMU readings for the usual 9DOF sensor setup. This
        message should always contain the true raw values without any
        scaling to allow data capture and system debugging.
        '''
        id = MAVLINK_MSG_ID_RAW_IMU
        name = 'RAW_IMU'
        fieldnames = ['usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag']
        ordered_fieldnames = [ 'usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag' ]
        format = '>Qhhhhhhhhh'
        native_format = bytearray('>Qhhhhhhhhh', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 179

        def __init__(self, usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag):
                MAVLink_message.__init__(self, MAVLink_raw_imu_message.id, MAVLink_raw_imu_message.name)
                self._fieldnames = MAVLink_raw_imu_message.fieldnames
                self.usec = usec
                self.xacc = xacc
                self.yacc = yacc
                self.zacc = zacc
                self.xgyro = xgyro
                self.ygyro = ygyro
                self.zgyro = zgyro
                self.xmag = xmag
                self.ymag = ymag
                self.zmag = zmag

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 179, struct.pack('>Qhhhhhhhhh', self.usec, self.xacc, self.yacc, self.zacc, self.xgyro, self.ygyro, self.zgyro, self.xmag, self.ymag, self.zmag))

class MAVLink_raw_pressure_message(MAVLink_message):
        '''
        The RAW pressure readings for the typical setup of one
        absolute pressure and one differential pressure sensor. The
        sensor values should be the raw, UNSCALED ADC values.
        '''
        id = MAVLINK_MSG_ID_RAW_PRESSURE
        name = 'RAW_PRESSURE'
        fieldnames = ['usec', 'press_abs', 'press_diff1', 'press_diff2', 'temperature']
        ordered_fieldnames = [ 'usec', 'press_abs', 'press_diff1', 'press_diff2', 'temperature' ]
        format = '>Qhhhh'
        native_format = bytearray('>Qhhhh', 'ascii')
        orders = [0, 1, 2, 3, 4]
        lengths = [1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0]
        crc_extra = 136

        def __init__(self, usec, press_abs, press_diff1, press_diff2, temperature):
                MAVLink_message.__init__(self, MAVLink_raw_pressure_message.id, MAVLink_raw_pressure_message.name)
                self._fieldnames = MAVLink_raw_pressure_message.fieldnames
                self.usec = usec
                self.press_abs = press_abs
                self.press_diff1 = press_diff1
                self.press_diff2 = press_diff2
                self.temperature = temperature

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 136, struct.pack('>Qhhhh', self.usec, self.press_abs, self.press_diff1, self.press_diff2, self.temperature))

class MAVLink_scaled_pressure_message(MAVLink_message):
        '''
        The pressure readings for the typical setup of one absolute
        and differential pressure sensor. The units are as specified
        in each field.
        '''
        id = MAVLINK_MSG_ID_SCALED_PRESSURE
        name = 'SCALED_PRESSURE'
        fieldnames = ['usec', 'press_abs', 'press_diff', 'temperature']
        ordered_fieldnames = [ 'usec', 'press_abs', 'press_diff', 'temperature' ]
        format = '>Qffh'
        native_format = bytearray('>Qffh', 'ascii')
        orders = [0, 1, 2, 3]
        lengths = [1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0]
        crc_extra = 229

        def __init__(self, usec, press_abs, press_diff, temperature):
                MAVLink_message.__init__(self, MAVLink_scaled_pressure_message.id, MAVLink_scaled_pressure_message.name)
                self._fieldnames = MAVLink_scaled_pressure_message.fieldnames
                self.usec = usec
                self.press_abs = press_abs
                self.press_diff = press_diff
                self.temperature = temperature

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 229, struct.pack('>Qffh', self.usec, self.press_abs, self.press_diff, self.temperature))

class MAVLink_attitude_message(MAVLink_message):
        '''
        The attitude in the aeronautical frame (right-handed, Z-down,
        X-front, Y-right).
        '''
        id = MAVLINK_MSG_ID_ATTITUDE
        name = 'ATTITUDE'
        fieldnames = ['usec', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitchspeed', 'yawspeed']
        ordered_fieldnames = [ 'usec', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitchspeed', 'yawspeed' ]
        format = '>Qffffff'
        native_format = bytearray('>Qffffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6]
        lengths = [1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0]
        crc_extra = 66

        def __init__(self, usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed):
                MAVLink_message.__init__(self, MAVLink_attitude_message.id, MAVLink_attitude_message.name)
                self._fieldnames = MAVLink_attitude_message.fieldnames
                self.usec = usec
                self.roll = roll
                self.pitch = pitch
                self.yaw = yaw
                self.rollspeed = rollspeed
                self.pitchspeed = pitchspeed
                self.yawspeed = yawspeed

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 66, struct.pack('>Qffffff', self.usec, self.roll, self.pitch, self.yaw, self.rollspeed, self.pitchspeed, self.yawspeed))

class MAVLink_local_position_message(MAVLink_message):
        '''
        The filtered local position (e.g. fused computer vision and
        accelerometers). Coordinate frame is right-handed, Z-axis down
        (aeronautical frame)
        '''
        id = MAVLINK_MSG_ID_LOCAL_POSITION
        name = 'LOCAL_POSITION'
        fieldnames = ['usec', 'x', 'y', 'z', 'vx', 'vy', 'vz']
        ordered_fieldnames = [ 'usec', 'x', 'y', 'z', 'vx', 'vy', 'vz' ]
        format = '>Qffffff'
        native_format = bytearray('>Qffffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6]
        lengths = [1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0]
        crc_extra = 126

        def __init__(self, usec, x, y, z, vx, vy, vz):
                MAVLink_message.__init__(self, MAVLink_local_position_message.id, MAVLink_local_position_message.name)
                self._fieldnames = MAVLink_local_position_message.fieldnames
                self.usec = usec
                self.x = x
                self.y = y
                self.z = z
                self.vx = vx
                self.vy = vy
                self.vz = vz

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 126, struct.pack('>Qffffff', self.usec, self.x, self.y, self.z, self.vx, self.vy, self.vz))

class MAVLink_global_position_message(MAVLink_message):
        '''
        The filtered global position (e.g. fused GPS and
        accelerometers). Coordinate frame is right-handed, Z-axis up
        (GPS frame)
        '''
        id = MAVLINK_MSG_ID_GLOBAL_POSITION
        name = 'GLOBAL_POSITION'
        fieldnames = ['usec', 'lat', 'lon', 'alt', 'vx', 'vy', 'vz']
        ordered_fieldnames = [ 'usec', 'lat', 'lon', 'alt', 'vx', 'vy', 'vz' ]
        format = '>Qffffff'
        native_format = bytearray('>Qffffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6]
        lengths = [1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0]
        crc_extra = 147

        def __init__(self, usec, lat, lon, alt, vx, vy, vz):
                MAVLink_message.__init__(self, MAVLink_global_position_message.id, MAVLink_global_position_message.name)
                self._fieldnames = MAVLink_global_position_message.fieldnames
                self.usec = usec
                self.lat = lat
                self.lon = lon
                self.alt = alt
                self.vx = vx
                self.vy = vy
                self.vz = vz

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 147, struct.pack('>Qffffff', self.usec, self.lat, self.lon, self.alt, self.vx, self.vy, self.vz))

class MAVLink_gps_raw_message(MAVLink_message):
        '''
        The global position, as returned by the Global Positioning
        System (GPS). This is NOT the global position estimate of the
        sytem, but rather a RAW sensor value. See message
        GLOBAL_POSITION for the global position estimate. Coordinate
        frame is right-handed, Z-axis up (GPS frame)
        '''
        id = MAVLINK_MSG_ID_GPS_RAW
        name = 'GPS_RAW'
        fieldnames = ['usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'v', 'hdg']
        ordered_fieldnames = [ 'usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'v', 'hdg' ]
        format = '>QBfffffff'
        native_format = bytearray('>QBfffffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 185

        def __init__(self, usec, fix_type, lat, lon, alt, eph, epv, v, hdg):
                MAVLink_message.__init__(self, MAVLink_gps_raw_message.id, MAVLink_gps_raw_message.name)
                self._fieldnames = MAVLink_gps_raw_message.fieldnames
                self.usec = usec
                self.fix_type = fix_type
                self.lat = lat
                self.lon = lon
                self.alt = alt
                self.eph = eph
                self.epv = epv
                self.v = v
                self.hdg = hdg

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 185, struct.pack('>QBfffffff', self.usec, self.fix_type, self.lat, self.lon, self.alt, self.eph, self.epv, self.v, self.hdg))

class MAVLink_sys_status_message(MAVLink_message):
        '''
        The general system state. If the system is following the
        MAVLink standard, the system state is mainly defined by three
        orthogonal states/modes: The system mode, which is either
        LOCKED (motors shut down and locked), MANUAL (system under RC
        control), GUIDED (system with autonomous position control,
        position setpoint controlled manually) or AUTO (system guided
        by path/waypoint planner). The NAV_MODE defined the current
        flight state: LIFTOFF (often an open-loop maneuver), LANDING,
        WAYPOINTS or VECTOR. This represents the internal navigation
        state machine. The system status shows wether the system is
        currently active or not and if an emergency occured. During
        the CRITICAL and EMERGENCY states the MAV is still considered
        to be active, but should start emergency procedures
        autonomously. After a failure occured it should first move
        from active to critical to allow manual intervention and then
        move to emergency after a certain timeout.
        '''
        id = MAVLINK_MSG_ID_SYS_STATUS
        name = 'SYS_STATUS'
        fieldnames = ['mode', 'nav_mode', 'status', 'load', 'vbat', 'battery_remaining', 'packet_drop']
        ordered_fieldnames = [ 'mode', 'nav_mode', 'status', 'load', 'vbat', 'battery_remaining', 'packet_drop' ]
        format = '>BBBHHHH'
        native_format = bytearray('>BBBHHHH', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6]
        lengths = [1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0]
        crc_extra = 112

        def __init__(self, mode, nav_mode, status, load, vbat, battery_remaining, packet_drop):
                MAVLink_message.__init__(self, MAVLink_sys_status_message.id, MAVLink_sys_status_message.name)
                self._fieldnames = MAVLink_sys_status_message.fieldnames
                self.mode = mode
                self.nav_mode = nav_mode
                self.status = status
                self.load = load
                self.vbat = vbat
                self.battery_remaining = battery_remaining
                self.packet_drop = packet_drop

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 112, struct.pack('>BBBHHHH', self.mode, self.nav_mode, self.status, self.load, self.vbat, self.battery_remaining, self.packet_drop))

class MAVLink_rc_channels_raw_message(MAVLink_message):
        '''
        The RAW values of the RC channels received. The standard PPM
        modulation is as follows: 1000 microseconds: 0%, 2000
        microseconds: 100%. Individual receivers/transmitters might
        violate this specification.
        '''
        id = MAVLINK_MSG_ID_RC_CHANNELS_RAW
        name = 'RC_CHANNELS_RAW'
        fieldnames = ['chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'rssi']
        ordered_fieldnames = [ 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'rssi' ]
        format = '>HHHHHHHHB'
        native_format = bytearray('>HHHHHHHHB', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 252

        def __init__(self, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi):
                MAVLink_message.__init__(self, MAVLink_rc_channels_raw_message.id, MAVLink_rc_channels_raw_message.name)
                self._fieldnames = MAVLink_rc_channels_raw_message.fieldnames
                self.chan1_raw = chan1_raw
                self.chan2_raw = chan2_raw
                self.chan3_raw = chan3_raw
                self.chan4_raw = chan4_raw
                self.chan5_raw = chan5_raw
                self.chan6_raw = chan6_raw
                self.chan7_raw = chan7_raw
                self.chan8_raw = chan8_raw
                self.rssi = rssi

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 252, struct.pack('>HHHHHHHHB', self.chan1_raw, self.chan2_raw, self.chan3_raw, self.chan4_raw, self.chan5_raw, self.chan6_raw, self.chan7_raw, self.chan8_raw, self.rssi))

class MAVLink_rc_channels_scaled_message(MAVLink_message):
        '''
        The scaled values of the RC channels received. (-100%) -10000,
        (0%) 0, (100%) 10000
        '''
        id = MAVLINK_MSG_ID_RC_CHANNELS_SCALED
        name = 'RC_CHANNELS_SCALED'
        fieldnames = ['chan1_scaled', 'chan2_scaled', 'chan3_scaled', 'chan4_scaled', 'chan5_scaled', 'chan6_scaled', 'chan7_scaled', 'chan8_scaled', 'rssi']
        ordered_fieldnames = [ 'chan1_scaled', 'chan2_scaled', 'chan3_scaled', 'chan4_scaled', 'chan5_scaled', 'chan6_scaled', 'chan7_scaled', 'chan8_scaled', 'rssi' ]
        format = '>hhhhhhhhB'
        native_format = bytearray('>hhhhhhhhB', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 162

        def __init__(self, chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi):
                MAVLink_message.__init__(self, MAVLink_rc_channels_scaled_message.id, MAVLink_rc_channels_scaled_message.name)
                self._fieldnames = MAVLink_rc_channels_scaled_message.fieldnames
                self.chan1_scaled = chan1_scaled
                self.chan2_scaled = chan2_scaled
                self.chan3_scaled = chan3_scaled
                self.chan4_scaled = chan4_scaled
                self.chan5_scaled = chan5_scaled
                self.chan6_scaled = chan6_scaled
                self.chan7_scaled = chan7_scaled
                self.chan8_scaled = chan8_scaled
                self.rssi = rssi

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 162, struct.pack('>hhhhhhhhB', self.chan1_scaled, self.chan2_scaled, self.chan3_scaled, self.chan4_scaled, self.chan5_scaled, self.chan6_scaled, self.chan7_scaled, self.chan8_scaled, self.rssi))

class MAVLink_servo_output_raw_message(MAVLink_message):
        '''
        The RAW values of the servo outputs (for RC input from the
        remote, use the RC_CHANNELS messages). The standard PPM
        modulation is as follows: 1000 microseconds: 0%, 2000
        microseconds: 100%.
        '''
        id = MAVLINK_MSG_ID_SERVO_OUTPUT_RAW
        name = 'SERVO_OUTPUT_RAW'
        fieldnames = ['servo1_raw', 'servo2_raw', 'servo3_raw', 'servo4_raw', 'servo5_raw', 'servo6_raw', 'servo7_raw', 'servo8_raw']
        ordered_fieldnames = [ 'servo1_raw', 'servo2_raw', 'servo3_raw', 'servo4_raw', 'servo5_raw', 'servo6_raw', 'servo7_raw', 'servo8_raw' ]
        format = '>HHHHHHHH'
        native_format = bytearray('>HHHHHHHH', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 215

        def __init__(self, servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw):
                MAVLink_message.__init__(self, MAVLink_servo_output_raw_message.id, MAVLink_servo_output_raw_message.name)
                self._fieldnames = MAVLink_servo_output_raw_message.fieldnames
                self.servo1_raw = servo1_raw
                self.servo2_raw = servo2_raw
                self.servo3_raw = servo3_raw
                self.servo4_raw = servo4_raw
                self.servo5_raw = servo5_raw
                self.servo6_raw = servo6_raw
                self.servo7_raw = servo7_raw
                self.servo8_raw = servo8_raw

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 215, struct.pack('>HHHHHHHH', self.servo1_raw, self.servo2_raw, self.servo3_raw, self.servo4_raw, self.servo5_raw, self.servo6_raw, self.servo7_raw, self.servo8_raw))

class MAVLink_waypoint_message(MAVLink_message):
        '''
        Message encoding a waypoint. This message is emitted to
        announce      the presence of a waypoint and to set a waypoint
        on the system. The waypoint can be either in x, y, z meters
        (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is
        Z-down, right handed, global frame is Z-up, right handed
        '''
        id = MAVLINK_MSG_ID_WAYPOINT
        name = 'WAYPOINT'
        fieldnames = ['target_system', 'target_component', 'seq', 'frame', 'command', 'current', 'autocontinue', 'param1', 'param2', 'param3', 'param4', 'x', 'y', 'z']
        ordered_fieldnames = [ 'target_system', 'target_component', 'seq', 'frame', 'command', 'current', 'autocontinue', 'param1', 'param2', 'param3', 'param4', 'x', 'y', 'z' ]
        format = '>BBHBBBBfffffff'
        native_format = bytearray('>BBHBBBBfffffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 128

        def __init__(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z):
                MAVLink_message.__init__(self, MAVLink_waypoint_message.id, MAVLink_waypoint_message.name)
                self._fieldnames = MAVLink_waypoint_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.seq = seq
                self.frame = frame
                self.command = command
                self.current = current
                self.autocontinue = autocontinue
                self.param1 = param1
                self.param2 = param2
                self.param3 = param3
                self.param4 = param4
                self.x = x
                self.y = y
                self.z = z

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 128, struct.pack('>BBHBBBBfffffff', self.target_system, self.target_component, self.seq, self.frame, self.command, self.current, self.autocontinue, self.param1, self.param2, self.param3, self.param4, self.x, self.y, self.z))

class MAVLink_waypoint_request_message(MAVLink_message):
        '''
        Request the information of the waypoint with the sequence
        number seq. The response of the system to this message should
        be a WAYPOINT message.
        '''
        id = MAVLINK_MSG_ID_WAYPOINT_REQUEST
        name = 'WAYPOINT_REQUEST'
        fieldnames = ['target_system', 'target_component', 'seq']
        ordered_fieldnames = [ 'target_system', 'target_component', 'seq' ]
        format = '>BBH'
        native_format = bytearray('>BBH', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 9

        def __init__(self, target_system, target_component, seq):
                MAVLink_message.__init__(self, MAVLink_waypoint_request_message.id, MAVLink_waypoint_request_message.name)
                self._fieldnames = MAVLink_waypoint_request_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.seq = seq

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 9, struct.pack('>BBH', self.target_system, self.target_component, self.seq))

class MAVLink_waypoint_set_current_message(MAVLink_message):
        '''
        Set the waypoint with sequence number seq as current waypoint.
        This means that the MAV will continue to this waypoint on the
        shortest path (not following the waypoints in-between).
        '''
        id = MAVLINK_MSG_ID_WAYPOINT_SET_CURRENT
        name = 'WAYPOINT_SET_CURRENT'
        fieldnames = ['target_system', 'target_component', 'seq']
        ordered_fieldnames = [ 'target_system', 'target_component', 'seq' ]
        format = '>BBH'
        native_format = bytearray('>BBH', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 106

        def __init__(self, target_system, target_component, seq):
                MAVLink_message.__init__(self, MAVLink_waypoint_set_current_message.id, MAVLink_waypoint_set_current_message.name)
                self._fieldnames = MAVLink_waypoint_set_current_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.seq = seq

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 106, struct.pack('>BBH', self.target_system, self.target_component, self.seq))

class MAVLink_waypoint_current_message(MAVLink_message):
        '''
        Message that announces the sequence number of the current
        active waypoint. The MAV will fly towards this waypoint.
        '''
        id = MAVLINK_MSG_ID_WAYPOINT_CURRENT
        name = 'WAYPOINT_CURRENT'
        fieldnames = ['seq']
        ordered_fieldnames = [ 'seq' ]
        format = '>H'
        native_format = bytearray('>H', 'ascii')
        orders = [0]
        lengths = [1]
        array_lengths = [0]
        crc_extra = 101

        def __init__(self, seq):
                MAVLink_message.__init__(self, MAVLink_waypoint_current_message.id, MAVLink_waypoint_current_message.name)
                self._fieldnames = MAVLink_waypoint_current_message.fieldnames
                self.seq = seq

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 101, struct.pack('>H', self.seq))

class MAVLink_waypoint_request_list_message(MAVLink_message):
        '''
        Request the overall list of waypoints from the
        system/component.
        '''
        id = MAVLINK_MSG_ID_WAYPOINT_REQUEST_LIST
        name = 'WAYPOINT_REQUEST_LIST'
        fieldnames = ['target_system', 'target_component']
        ordered_fieldnames = [ 'target_system', 'target_component' ]
        format = '>BB'
        native_format = bytearray('>BB', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 213

        def __init__(self, target_system, target_component):
                MAVLink_message.__init__(self, MAVLink_waypoint_request_list_message.id, MAVLink_waypoint_request_list_message.name)
                self._fieldnames = MAVLink_waypoint_request_list_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 213, struct.pack('>BB', self.target_system, self.target_component))

class MAVLink_waypoint_count_message(MAVLink_message):
        '''
        This message is emitted as response to WAYPOINT_REQUEST_LIST
        by the MAV. The GCS can then request the individual waypoints
        based on the knowledge of the total number of waypoints.
        '''
        id = MAVLINK_MSG_ID_WAYPOINT_COUNT
        name = 'WAYPOINT_COUNT'
        fieldnames = ['target_system', 'target_component', 'count']
        ordered_fieldnames = [ 'target_system', 'target_component', 'count' ]
        format = '>BBH'
        native_format = bytearray('>BBH', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 4

        def __init__(self, target_system, target_component, count):
                MAVLink_message.__init__(self, MAVLink_waypoint_count_message.id, MAVLink_waypoint_count_message.name)
                self._fieldnames = MAVLink_waypoint_count_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.count = count

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 4, struct.pack('>BBH', self.target_system, self.target_component, self.count))

class MAVLink_waypoint_clear_all_message(MAVLink_message):
        '''
        Delete all waypoints at once.
        '''
        id = MAVLINK_MSG_ID_WAYPOINT_CLEAR_ALL
        name = 'WAYPOINT_CLEAR_ALL'
        fieldnames = ['target_system', 'target_component']
        ordered_fieldnames = [ 'target_system', 'target_component' ]
        format = '>BB'
        native_format = bytearray('>BB', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 229

        def __init__(self, target_system, target_component):
                MAVLink_message.__init__(self, MAVLink_waypoint_clear_all_message.id, MAVLink_waypoint_clear_all_message.name)
                self._fieldnames = MAVLink_waypoint_clear_all_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 229, struct.pack('>BB', self.target_system, self.target_component))

class MAVLink_waypoint_reached_message(MAVLink_message):
        '''
        A certain waypoint has been reached. The system will either
        hold this position (or circle on the orbit) or (if the
        autocontinue on the WP was set) continue to the next waypoint.
        '''
        id = MAVLINK_MSG_ID_WAYPOINT_REACHED
        name = 'WAYPOINT_REACHED'
        fieldnames = ['seq']
        ordered_fieldnames = [ 'seq' ]
        format = '>H'
        native_format = bytearray('>H', 'ascii')
        orders = [0]
        lengths = [1]
        array_lengths = [0]
        crc_extra = 21

        def __init__(self, seq):
                MAVLink_message.__init__(self, MAVLink_waypoint_reached_message.id, MAVLink_waypoint_reached_message.name)
                self._fieldnames = MAVLink_waypoint_reached_message.fieldnames
                self.seq = seq

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 21, struct.pack('>H', self.seq))

class MAVLink_waypoint_ack_message(MAVLink_message):
        '''
        Ack message during waypoint handling. The type field states if
        this message is a positive ack (type=0) or if an error
        happened (type=non-zero).
        '''
        id = MAVLINK_MSG_ID_WAYPOINT_ACK
        name = 'WAYPOINT_ACK'
        fieldnames = ['target_system', 'target_component', 'type']
        ordered_fieldnames = [ 'target_system', 'target_component', 'type' ]
        format = '>BBB'
        native_format = bytearray('>BBB', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 214

        def __init__(self, target_system, target_component, type):
                MAVLink_message.__init__(self, MAVLink_waypoint_ack_message.id, MAVLink_waypoint_ack_message.name)
                self._fieldnames = MAVLink_waypoint_ack_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.type = type

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 214, struct.pack('>BBB', self.target_system, self.target_component, self.type))

class MAVLink_gps_set_global_origin_message(MAVLink_message):
        '''
        As local waypoints exist, the global waypoint reference allows
        to transform between the local coordinate frame and the global
        (GPS) coordinate frame. This can be necessary when e.g. in-
        and outdoor settings are connected and the MAV should move
        from in- to outdoor.
        '''
        id = MAVLINK_MSG_ID_GPS_SET_GLOBAL_ORIGIN
        name = 'GPS_SET_GLOBAL_ORIGIN'
        fieldnames = ['target_system', 'target_component', 'latitude', 'longitude', 'altitude']
        ordered_fieldnames = [ 'target_system', 'target_component', 'latitude', 'longitude', 'altitude' ]
        format = '>BBiii'
        native_format = bytearray('>BBiii', 'ascii')
        orders = [0, 1, 2, 3, 4]
        lengths = [1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0]
        crc_extra = 215

        def __init__(self, target_system, target_component, latitude, longitude, altitude):
                MAVLink_message.__init__(self, MAVLink_gps_set_global_origin_message.id, MAVLink_gps_set_global_origin_message.name)
                self._fieldnames = MAVLink_gps_set_global_origin_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.latitude = latitude
                self.longitude = longitude
                self.altitude = altitude

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 215, struct.pack('>BBiii', self.target_system, self.target_component, self.latitude, self.longitude, self.altitude))

class MAVLink_gps_local_origin_set_message(MAVLink_message):
        '''
        Once the MAV sets a new GPS-Local correspondence, this message
        announces the origin (0,0,0) position
        '''
        id = MAVLINK_MSG_ID_GPS_LOCAL_ORIGIN_SET
        name = 'GPS_LOCAL_ORIGIN_SET'
        fieldnames = ['latitude', 'longitude', 'altitude']
        ordered_fieldnames = [ 'latitude', 'longitude', 'altitude' ]
        format = '>iii'
        native_format = bytearray('>iii', 'ascii')
        orders = [0, 1, 2]
        lengths = [1, 1, 1]
        array_lengths = [0, 0, 0]
        crc_extra = 14

        def __init__(self, latitude, longitude, altitude):
                MAVLink_message.__init__(self, MAVLink_gps_local_origin_set_message.id, MAVLink_gps_local_origin_set_message.name)
                self._fieldnames = MAVLink_gps_local_origin_set_message.fieldnames
                self.latitude = latitude
                self.longitude = longitude
                self.altitude = altitude

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 14, struct.pack('>iii', self.latitude, self.longitude, self.altitude))

class MAVLink_local_position_setpoint_set_message(MAVLink_message):
        '''
        Set the setpoint for a local position controller. This is the
        position in local coordinates the MAV should fly to. This
        message is sent by the path/waypoint planner to the onboard
        position controller. As some MAVs have a degree of freedom in
        yaw (e.g. all helicopters/quadrotors), the desired yaw angle
        is part of the message.
        '''
        id = MAVLINK_MSG_ID_LOCAL_POSITION_SETPOINT_SET
        name = 'LOCAL_POSITION_SETPOINT_SET'
        fieldnames = ['target_system', 'target_component', 'x', 'y', 'z', 'yaw']
        ordered_fieldnames = [ 'target_system', 'target_component', 'x', 'y', 'z', 'yaw' ]
        format = '>BBffff'
        native_format = bytearray('>BBffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5]
        lengths = [1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0]
        crc_extra = 206

        def __init__(self, target_system, target_component, x, y, z, yaw):
                MAVLink_message.__init__(self, MAVLink_local_position_setpoint_set_message.id, MAVLink_local_position_setpoint_set_message.name)
                self._fieldnames = MAVLink_local_position_setpoint_set_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.x = x
                self.y = y
                self.z = z
                self.yaw = yaw

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 206, struct.pack('>BBffff', self.target_system, self.target_component, self.x, self.y, self.z, self.yaw))

class MAVLink_local_position_setpoint_message(MAVLink_message):
        '''
        Transmit the current local setpoint of the controller to other
        MAVs (collision avoidance) and to the GCS.
        '''
        id = MAVLINK_MSG_ID_LOCAL_POSITION_SETPOINT
        name = 'LOCAL_POSITION_SETPOINT'
        fieldnames = ['x', 'y', 'z', 'yaw']
        ordered_fieldnames = [ 'x', 'y', 'z', 'yaw' ]
        format = '>ffff'
        native_format = bytearray('>ffff', 'ascii')
        orders = [0, 1, 2, 3]
        lengths = [1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0]
        crc_extra = 50

        def __init__(self, x, y, z, yaw):
                MAVLink_message.__init__(self, MAVLink_local_position_setpoint_message.id, MAVLink_local_position_setpoint_message.name)
                self._fieldnames = MAVLink_local_position_setpoint_message.fieldnames
                self.x = x
                self.y = y
                self.z = z
                self.yaw = yaw

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 50, struct.pack('>ffff', self.x, self.y, self.z, self.yaw))

class MAVLink_control_status_message(MAVLink_message):
        '''

        '''
        id = MAVLINK_MSG_ID_CONTROL_STATUS
        name = 'CONTROL_STATUS'
        fieldnames = ['position_fix', 'vision_fix', 'gps_fix', 'ahrs_health', 'control_att', 'control_pos_xy', 'control_pos_z', 'control_pos_yaw']
        ordered_fieldnames = [ 'position_fix', 'vision_fix', 'gps_fix', 'ahrs_health', 'control_att', 'control_pos_xy', 'control_pos_z', 'control_pos_yaw' ]
        format = '>BBBBBBBB'
        native_format = bytearray('>BBBBBBBB', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 157

        def __init__(self, position_fix, vision_fix, gps_fix, ahrs_health, control_att, control_pos_xy, control_pos_z, control_pos_yaw):
                MAVLink_message.__init__(self, MAVLink_control_status_message.id, MAVLink_control_status_message.name)
                self._fieldnames = MAVLink_control_status_message.fieldnames
                self.position_fix = position_fix
                self.vision_fix = vision_fix
                self.gps_fix = gps_fix
                self.ahrs_health = ahrs_health
                self.control_att = control_att
                self.control_pos_xy = control_pos_xy
                self.control_pos_z = control_pos_z
                self.control_pos_yaw = control_pos_yaw

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 157, struct.pack('>BBBBBBBB', self.position_fix, self.vision_fix, self.gps_fix, self.ahrs_health, self.control_att, self.control_pos_xy, self.control_pos_z, self.control_pos_yaw))

class MAVLink_safety_set_allowed_area_message(MAVLink_message):
        '''
        Set a safety zone (volume), which is defined by two corners of
        a cube. This message can be used to tell the MAV which
        setpoints/waypoints to accept and which to reject. Safety
        areas are often enforced by national or competition
        regulations.
        '''
        id = MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA
        name = 'SAFETY_SET_ALLOWED_AREA'
        fieldnames = ['target_system', 'target_component', 'frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z']
        ordered_fieldnames = [ 'target_system', 'target_component', 'frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z' ]
        format = '>BBBffffff'
        native_format = bytearray('>BBBffffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 126

        def __init__(self, target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z):
                MAVLink_message.__init__(self, MAVLink_safety_set_allowed_area_message.id, MAVLink_safety_set_allowed_area_message.name)
                self._fieldnames = MAVLink_safety_set_allowed_area_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.frame = frame
                self.p1x = p1x
                self.p1y = p1y
                self.p1z = p1z
                self.p2x = p2x
                self.p2y = p2y
                self.p2z = p2z

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 126, struct.pack('>BBBffffff', self.target_system, self.target_component, self.frame, self.p1x, self.p1y, self.p1z, self.p2x, self.p2y, self.p2z))

class MAVLink_safety_allowed_area_message(MAVLink_message):
        '''
        Read out the safety zone the MAV currently assumes.
        '''
        id = MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA
        name = 'SAFETY_ALLOWED_AREA'
        fieldnames = ['frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z']
        ordered_fieldnames = [ 'frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z' ]
        format = '>Bffffff'
        native_format = bytearray('>Bffffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6]
        lengths = [1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0]
        crc_extra = 108

        def __init__(self, frame, p1x, p1y, p1z, p2x, p2y, p2z):
                MAVLink_message.__init__(self, MAVLink_safety_allowed_area_message.id, MAVLink_safety_allowed_area_message.name)
                self._fieldnames = MAVLink_safety_allowed_area_message.fieldnames
                self.frame = frame
                self.p1x = p1x
                self.p1y = p1y
                self.p1z = p1z
                self.p2x = p2x
                self.p2y = p2y
                self.p2z = p2z

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 108, struct.pack('>Bffffff', self.frame, self.p1x, self.p1y, self.p1z, self.p2x, self.p2y, self.p2z))

class MAVLink_set_roll_pitch_yaw_thrust_message(MAVLink_message):
        '''
        Set roll, pitch and yaw.
        '''
        id = MAVLINK_MSG_ID_SET_ROLL_PITCH_YAW_THRUST
        name = 'SET_ROLL_PITCH_YAW_THRUST'
        fieldnames = ['target_system', 'target_component', 'roll', 'pitch', 'yaw', 'thrust']
        ordered_fieldnames = [ 'target_system', 'target_component', 'roll', 'pitch', 'yaw', 'thrust' ]
        format = '>BBffff'
        native_format = bytearray('>BBffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5]
        lengths = [1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0]
        crc_extra = 213

        def __init__(self, target_system, target_component, roll, pitch, yaw, thrust):
                MAVLink_message.__init__(self, MAVLink_set_roll_pitch_yaw_thrust_message.id, MAVLink_set_roll_pitch_yaw_thrust_message.name)
                self._fieldnames = MAVLink_set_roll_pitch_yaw_thrust_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.roll = roll
                self.pitch = pitch
                self.yaw = yaw
                self.thrust = thrust

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 213, struct.pack('>BBffff', self.target_system, self.target_component, self.roll, self.pitch, self.yaw, self.thrust))

class MAVLink_set_roll_pitch_yaw_speed_thrust_message(MAVLink_message):
        '''
        Set roll, pitch and yaw.
        '''
        id = MAVLINK_MSG_ID_SET_ROLL_PITCH_YAW_SPEED_THRUST
        name = 'SET_ROLL_PITCH_YAW_SPEED_THRUST'
        fieldnames = ['target_system', 'target_component', 'roll_speed', 'pitch_speed', 'yaw_speed', 'thrust']
        ordered_fieldnames = [ 'target_system', 'target_component', 'roll_speed', 'pitch_speed', 'yaw_speed', 'thrust' ]
        format = '>BBffff'
        native_format = bytearray('>BBffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5]
        lengths = [1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0]
        crc_extra = 95

        def __init__(self, target_system, target_component, roll_speed, pitch_speed, yaw_speed, thrust):
                MAVLink_message.__init__(self, MAVLink_set_roll_pitch_yaw_speed_thrust_message.id, MAVLink_set_roll_pitch_yaw_speed_thrust_message.name)
                self._fieldnames = MAVLink_set_roll_pitch_yaw_speed_thrust_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.roll_speed = roll_speed
                self.pitch_speed = pitch_speed
                self.yaw_speed = yaw_speed
                self.thrust = thrust

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 95, struct.pack('>BBffff', self.target_system, self.target_component, self.roll_speed, self.pitch_speed, self.yaw_speed, self.thrust))

class MAVLink_roll_pitch_yaw_thrust_setpoint_message(MAVLink_message):
        '''
        Setpoint in roll, pitch, yaw currently active on the system.
        '''
        id = MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT
        name = 'ROLL_PITCH_YAW_THRUST_SETPOINT'
        fieldnames = ['time_us', 'roll', 'pitch', 'yaw', 'thrust']
        ordered_fieldnames = [ 'time_us', 'roll', 'pitch', 'yaw', 'thrust' ]
        format = '>Qffff'
        native_format = bytearray('>Qffff', 'ascii')
        orders = [0, 1, 2, 3, 4]
        lengths = [1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0]
        crc_extra = 5

        def __init__(self, time_us, roll, pitch, yaw, thrust):
                MAVLink_message.__init__(self, MAVLink_roll_pitch_yaw_thrust_setpoint_message.id, MAVLink_roll_pitch_yaw_thrust_setpoint_message.name)
                self._fieldnames = MAVLink_roll_pitch_yaw_thrust_setpoint_message.fieldnames
                self.time_us = time_us
                self.roll = roll
                self.pitch = pitch
                self.yaw = yaw
                self.thrust = thrust

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 5, struct.pack('>Qffff', self.time_us, self.roll, self.pitch, self.yaw, self.thrust))

class MAVLink_roll_pitch_yaw_speed_thrust_setpoint_message(MAVLink_message):
        '''
        Setpoint in rollspeed, pitchspeed, yawspeed currently active
        on the system.
        '''
        id = MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT
        name = 'ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT'
        fieldnames = ['time_us', 'roll_speed', 'pitch_speed', 'yaw_speed', 'thrust']
        ordered_fieldnames = [ 'time_us', 'roll_speed', 'pitch_speed', 'yaw_speed', 'thrust' ]
        format = '>Qffff'
        native_format = bytearray('>Qffff', 'ascii')
        orders = [0, 1, 2, 3, 4]
        lengths = [1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0]
        crc_extra = 127

        def __init__(self, time_us, roll_speed, pitch_speed, yaw_speed, thrust):
                MAVLink_message.__init__(self, MAVLink_roll_pitch_yaw_speed_thrust_setpoint_message.id, MAVLink_roll_pitch_yaw_speed_thrust_setpoint_message.name)
                self._fieldnames = MAVLink_roll_pitch_yaw_speed_thrust_setpoint_message.fieldnames
                self.time_us = time_us
                self.roll_speed = roll_speed
                self.pitch_speed = pitch_speed
                self.yaw_speed = yaw_speed
                self.thrust = thrust

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 127, struct.pack('>Qffff', self.time_us, self.roll_speed, self.pitch_speed, self.yaw_speed, self.thrust))

class MAVLink_nav_controller_output_message(MAVLink_message):
        '''
        Outputs of the APM navigation controller. The primary use of
        this message is to check the response and signs of the
        controller before actual flight and to assist with tuning
        controller parameters
        '''
        id = MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT
        name = 'NAV_CONTROLLER_OUTPUT'
        fieldnames = ['nav_roll', 'nav_pitch', 'nav_bearing', 'target_bearing', 'wp_dist', 'alt_error', 'aspd_error', 'xtrack_error']
        ordered_fieldnames = [ 'nav_roll', 'nav_pitch', 'nav_bearing', 'target_bearing', 'wp_dist', 'alt_error', 'aspd_error', 'xtrack_error' ]
        format = '>ffhhHfff'
        native_format = bytearray('>ffhhHfff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 57

        def __init__(self, nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error):
                MAVLink_message.__init__(self, MAVLink_nav_controller_output_message.id, MAVLink_nav_controller_output_message.name)
                self._fieldnames = MAVLink_nav_controller_output_message.fieldnames
                self.nav_roll = nav_roll
                self.nav_pitch = nav_pitch
                self.nav_bearing = nav_bearing
                self.target_bearing = target_bearing
                self.wp_dist = wp_dist
                self.alt_error = alt_error
                self.aspd_error = aspd_error
                self.xtrack_error = xtrack_error

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 57, struct.pack('>ffhhHfff', self.nav_roll, self.nav_pitch, self.nav_bearing, self.target_bearing, self.wp_dist, self.alt_error, self.aspd_error, self.xtrack_error))

class MAVLink_position_target_message(MAVLink_message):
        '''
        The goal position of the system. This position is the input to
        any navigation or path planning algorithm and does NOT
        represent the current controller setpoint.
        '''
        id = MAVLINK_MSG_ID_POSITION_TARGET
        name = 'POSITION_TARGET'
        fieldnames = ['x', 'y', 'z', 'yaw']
        ordered_fieldnames = [ 'x', 'y', 'z', 'yaw' ]
        format = '>ffff'
        native_format = bytearray('>ffff', 'ascii')
        orders = [0, 1, 2, 3]
        lengths = [1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0]
        crc_extra = 126

        def __init__(self, x, y, z, yaw):
                MAVLink_message.__init__(self, MAVLink_position_target_message.id, MAVLink_position_target_message.name)
                self._fieldnames = MAVLink_position_target_message.fieldnames
                self.x = x
                self.y = y
                self.z = z
                self.yaw = yaw

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 126, struct.pack('>ffff', self.x, self.y, self.z, self.yaw))

class MAVLink_state_correction_message(MAVLink_message):
        '''
        Corrects the systems state by adding an error correction term
        to the position and velocity, and by rotating the attitude by
        a correction angle.
        '''
        id = MAVLINK_MSG_ID_STATE_CORRECTION
        name = 'STATE_CORRECTION'
        fieldnames = ['xErr', 'yErr', 'zErr', 'rollErr', 'pitchErr', 'yawErr', 'vxErr', 'vyErr', 'vzErr']
        ordered_fieldnames = [ 'xErr', 'yErr', 'zErr', 'rollErr', 'pitchErr', 'yawErr', 'vxErr', 'vyErr', 'vzErr' ]
        format = '>fffffffff'
        native_format = bytearray('>fffffffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 130

        def __init__(self, xErr, yErr, zErr, rollErr, pitchErr, yawErr, vxErr, vyErr, vzErr):
                MAVLink_message.__init__(self, MAVLink_state_correction_message.id, MAVLink_state_correction_message.name)
                self._fieldnames = MAVLink_state_correction_message.fieldnames
                self.xErr = xErr
                self.yErr = yErr
                self.zErr = zErr
                self.rollErr = rollErr
                self.pitchErr = pitchErr
                self.yawErr = yawErr
                self.vxErr = vxErr
                self.vyErr = vyErr
                self.vzErr = vzErr

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 130, struct.pack('>fffffffff', self.xErr, self.yErr, self.zErr, self.rollErr, self.pitchErr, self.yawErr, self.vxErr, self.vyErr, self.vzErr))

class MAVLink_set_altitude_message(MAVLink_message):
        '''

        '''
        id = MAVLINK_MSG_ID_SET_ALTITUDE
        name = 'SET_ALTITUDE'
        fieldnames = ['target', 'mode']
        ordered_fieldnames = [ 'target', 'mode' ]
        format = '>BI'
        native_format = bytearray('>BI', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 119

        def __init__(self, target, mode):
                MAVLink_message.__init__(self, MAVLink_set_altitude_message.id, MAVLink_set_altitude_message.name)
                self._fieldnames = MAVLink_set_altitude_message.fieldnames
                self.target = target
                self.mode = mode

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 119, struct.pack('>BI', self.target, self.mode))

class MAVLink_request_data_stream_message(MAVLink_message):
        '''

        '''
        id = MAVLINK_MSG_ID_REQUEST_DATA_STREAM
        name = 'REQUEST_DATA_STREAM'
        fieldnames = ['target_system', 'target_component', 'req_stream_id', 'req_message_rate', 'start_stop']
        ordered_fieldnames = [ 'target_system', 'target_component', 'req_stream_id', 'req_message_rate', 'start_stop' ]
        format = '>BBBHB'
        native_format = bytearray('>BBBHB', 'ascii')
        orders = [0, 1, 2, 3, 4]
        lengths = [1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0]
        crc_extra = 193

        def __init__(self, target_system, target_component, req_stream_id, req_message_rate, start_stop):
                MAVLink_message.__init__(self, MAVLink_request_data_stream_message.id, MAVLink_request_data_stream_message.name)
                self._fieldnames = MAVLink_request_data_stream_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.req_stream_id = req_stream_id
                self.req_message_rate = req_message_rate
                self.start_stop = start_stop

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 193, struct.pack('>BBBHB', self.target_system, self.target_component, self.req_stream_id, self.req_message_rate, self.start_stop))

class MAVLink_hil_state_message(MAVLink_message):
        '''
        This packet is useful for high throughput
        applications such as hardware in the loop simulations.
        '''
        id = MAVLINK_MSG_ID_HIL_STATE
        name = 'HIL_STATE'
        fieldnames = ['usec', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitchspeed', 'yawspeed', 'lat', 'lon', 'alt', 'vx', 'vy', 'vz', 'xacc', 'yacc', 'zacc']
        ordered_fieldnames = [ 'usec', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitchspeed', 'yawspeed', 'lat', 'lon', 'alt', 'vx', 'vy', 'vz', 'xacc', 'yacc', 'zacc' ]
        format = '>Qffffffiiihhhhhh'
        native_format = bytearray('>Qffffffiiihhhhhh', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 191

        def __init__(self, usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc):
                MAVLink_message.__init__(self, MAVLink_hil_state_message.id, MAVLink_hil_state_message.name)
                self._fieldnames = MAVLink_hil_state_message.fieldnames
                self.usec = usec
                self.roll = roll
                self.pitch = pitch
                self.yaw = yaw
                self.rollspeed = rollspeed
                self.pitchspeed = pitchspeed
                self.yawspeed = yawspeed
                self.lat = lat
                self.lon = lon
                self.alt = alt
                self.vx = vx
                self.vy = vy
                self.vz = vz
                self.xacc = xacc
                self.yacc = yacc
                self.zacc = zacc

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 191, struct.pack('>Qffffffiiihhhhhh', self.usec, self.roll, self.pitch, self.yaw, self.rollspeed, self.pitchspeed, self.yawspeed, self.lat, self.lon, self.alt, self.vx, self.vy, self.vz, self.xacc, self.yacc, self.zacc))

class MAVLink_hil_controls_message(MAVLink_message):
        '''
        Hardware in the loop control outputs
        '''
        id = MAVLINK_MSG_ID_HIL_CONTROLS
        name = 'HIL_CONTROLS'
        fieldnames = ['time_us', 'roll_ailerons', 'pitch_elevator', 'yaw_rudder', 'throttle', 'mode', 'nav_mode']
        ordered_fieldnames = [ 'time_us', 'roll_ailerons', 'pitch_elevator', 'yaw_rudder', 'throttle', 'mode', 'nav_mode' ]
        format = '>QffffBB'
        native_format = bytearray('>QffffBB', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6]
        lengths = [1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0]
        crc_extra = 236

        def __init__(self, time_us, roll_ailerons, pitch_elevator, yaw_rudder, throttle, mode, nav_mode):
                MAVLink_message.__init__(self, MAVLink_hil_controls_message.id, MAVLink_hil_controls_message.name)
                self._fieldnames = MAVLink_hil_controls_message.fieldnames
                self.time_us = time_us
                self.roll_ailerons = roll_ailerons
                self.pitch_elevator = pitch_elevator
                self.yaw_rudder = yaw_rudder
                self.throttle = throttle
                self.mode = mode
                self.nav_mode = nav_mode

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 236, struct.pack('>QffffBB', self.time_us, self.roll_ailerons, self.pitch_elevator, self.yaw_rudder, self.throttle, self.mode, self.nav_mode))

class MAVLink_manual_control_message(MAVLink_message):
        '''

        '''
        id = MAVLINK_MSG_ID_MANUAL_CONTROL
        name = 'MANUAL_CONTROL'
        fieldnames = ['target', 'roll', 'pitch', 'yaw', 'thrust', 'roll_manual', 'pitch_manual', 'yaw_manual', 'thrust_manual']
        ordered_fieldnames = [ 'target', 'roll', 'pitch', 'yaw', 'thrust', 'roll_manual', 'pitch_manual', 'yaw_manual', 'thrust_manual' ]
        format = '>BffffBBBB'
        native_format = bytearray('>BffffBBBB', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 158

        def __init__(self, target, roll, pitch, yaw, thrust, roll_manual, pitch_manual, yaw_manual, thrust_manual):
                MAVLink_message.__init__(self, MAVLink_manual_control_message.id, MAVLink_manual_control_message.name)
                self._fieldnames = MAVLink_manual_control_message.fieldnames
                self.target = target
                self.roll = roll
                self.pitch = pitch
                self.yaw = yaw
                self.thrust = thrust
                self.roll_manual = roll_manual
                self.pitch_manual = pitch_manual
                self.yaw_manual = yaw_manual
                self.thrust_manual = thrust_manual

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 158, struct.pack('>BffffBBBB', self.target, self.roll, self.pitch, self.yaw, self.thrust, self.roll_manual, self.pitch_manual, self.yaw_manual, self.thrust_manual))

class MAVLink_rc_channels_override_message(MAVLink_message):
        '''
        The RAW values of the RC channels sent to the MAV to override
        info received from the RC radio. A value of -1 means no change
        to that channel. A value of 0 means control of that channel
        should be released back to the RC radio. The standard PPM
        modulation is as follows: 1000 microseconds: 0%, 2000
        microseconds: 100%. Individual receivers/transmitters might
        violate this specification.
        '''
        id = MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE
        name = 'RC_CHANNELS_OVERRIDE'
        fieldnames = ['target_system', 'target_component', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw']
        ordered_fieldnames = [ 'target_system', 'target_component', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw' ]
        format = '>BBHHHHHHHH'
        native_format = bytearray('>BBHHHHHHHH', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 143

        def __init__(self, target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw):
                MAVLink_message.__init__(self, MAVLink_rc_channels_override_message.id, MAVLink_rc_channels_override_message.name)
                self._fieldnames = MAVLink_rc_channels_override_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.chan1_raw = chan1_raw
                self.chan2_raw = chan2_raw
                self.chan3_raw = chan3_raw
                self.chan4_raw = chan4_raw
                self.chan5_raw = chan5_raw
                self.chan6_raw = chan6_raw
                self.chan7_raw = chan7_raw
                self.chan8_raw = chan8_raw

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 143, struct.pack('>BBHHHHHHHH', self.target_system, self.target_component, self.chan1_raw, self.chan2_raw, self.chan3_raw, self.chan4_raw, self.chan5_raw, self.chan6_raw, self.chan7_raw, self.chan8_raw))

class MAVLink_global_position_int_message(MAVLink_message):
        '''
        The filtered global position (e.g. fused GPS and
        accelerometers). The position is in GPS-frame (right-handed,
        Z-up)
        '''
        id = MAVLINK_MSG_ID_GLOBAL_POSITION_INT
        name = 'GLOBAL_POSITION_INT'
        fieldnames = ['lat', 'lon', 'alt', 'vx', 'vy', 'vz']
        ordered_fieldnames = [ 'lat', 'lon', 'alt', 'vx', 'vy', 'vz' ]
        format = '>iiihhh'
        native_format = bytearray('>iiihhh', 'ascii')
        orders = [0, 1, 2, 3, 4, 5]
        lengths = [1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0]
        crc_extra = 104

        def __init__(self, lat, lon, alt, vx, vy, vz):
                MAVLink_message.__init__(self, MAVLink_global_position_int_message.id, MAVLink_global_position_int_message.name)
                self._fieldnames = MAVLink_global_position_int_message.fieldnames
                self.lat = lat
                self.lon = lon
                self.alt = alt
                self.vx = vx
                self.vy = vy
                self.vz = vz

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 104, struct.pack('>iiihhh', self.lat, self.lon, self.alt, self.vx, self.vy, self.vz))

class MAVLink_vfr_hud_message(MAVLink_message):
        '''
        Metrics typically displayed on a HUD for fixed wing aircraft
        '''
        id = MAVLINK_MSG_ID_VFR_HUD
        name = 'VFR_HUD'
        fieldnames = ['airspeed', 'groundspeed', 'heading', 'throttle', 'alt', 'climb']
        ordered_fieldnames = [ 'airspeed', 'groundspeed', 'heading', 'throttle', 'alt', 'climb' ]
        format = '>ffhHff'
        native_format = bytearray('>ffhHff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5]
        lengths = [1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0]
        crc_extra = 123

        def __init__(self, airspeed, groundspeed, heading, throttle, alt, climb):
                MAVLink_message.__init__(self, MAVLink_vfr_hud_message.id, MAVLink_vfr_hud_message.name)
                self._fieldnames = MAVLink_vfr_hud_message.fieldnames
                self.airspeed = airspeed
                self.groundspeed = groundspeed
                self.heading = heading
                self.throttle = throttle
                self.alt = alt
                self.climb = climb

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 123, struct.pack('>ffhHff', self.airspeed, self.groundspeed, self.heading, self.throttle, self.alt, self.climb))

class MAVLink_command_message(MAVLink_message):
        '''
        Send a command with up to four parameters to the MAV
        '''
        id = MAVLINK_MSG_ID_COMMAND
        name = 'COMMAND'
        fieldnames = ['target_system', 'target_component', 'command', 'confirmation', 'param1', 'param2', 'param3', 'param4']
        ordered_fieldnames = [ 'target_system', 'target_component', 'command', 'confirmation', 'param1', 'param2', 'param3', 'param4' ]
        format = '>BBBBffff'
        native_format = bytearray('>BBBBffff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 131

        def __init__(self, target_system, target_component, command, confirmation, param1, param2, param3, param4):
                MAVLink_message.__init__(self, MAVLink_command_message.id, MAVLink_command_message.name)
                self._fieldnames = MAVLink_command_message.fieldnames
                self.target_system = target_system
                self.target_component = target_component
                self.command = command
                self.confirmation = confirmation
                self.param1 = param1
                self.param2 = param2
                self.param3 = param3
                self.param4 = param4

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 131, struct.pack('>BBBBffff', self.target_system, self.target_component, self.command, self.confirmation, self.param1, self.param2, self.param3, self.param4))

class MAVLink_command_ack_message(MAVLink_message):
        '''
        Report status of a command. Includes feedback wether the
        command was executed
        '''
        id = MAVLINK_MSG_ID_COMMAND_ACK
        name = 'COMMAND_ACK'
        fieldnames = ['command', 'result']
        ordered_fieldnames = [ 'command', 'result' ]
        format = '>ff'
        native_format = bytearray('>ff', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 8

        def __init__(self, command, result):
                MAVLink_message.__init__(self, MAVLink_command_ack_message.id, MAVLink_command_ack_message.name)
                self._fieldnames = MAVLink_command_ack_message.fieldnames
                self.command = command
                self.result = result

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 8, struct.pack('>ff', self.command, self.result))

class MAVLink_optical_flow_message(MAVLink_message):
        '''
        Optical flow from a flow sensor (e.g. optical mouse sensor)
        '''
        id = MAVLINK_MSG_ID_OPTICAL_FLOW
        name = 'OPTICAL_FLOW'
        fieldnames = ['time', 'sensor_id', 'flow_x', 'flow_y', 'quality', 'ground_distance']
        ordered_fieldnames = [ 'time', 'sensor_id', 'flow_x', 'flow_y', 'quality', 'ground_distance' ]
        format = '>QBhhBf'
        native_format = bytearray('>QBhhBf', 'ascii')
        orders = [0, 1, 2, 3, 4, 5]
        lengths = [1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0]
        crc_extra = 174

        def __init__(self, time, sensor_id, flow_x, flow_y, quality, ground_distance):
                MAVLink_message.__init__(self, MAVLink_optical_flow_message.id, MAVLink_optical_flow_message.name)
                self._fieldnames = MAVLink_optical_flow_message.fieldnames
                self.time = time
                self.sensor_id = sensor_id
                self.flow_x = flow_x
                self.flow_y = flow_y
                self.quality = quality
                self.ground_distance = ground_distance

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 174, struct.pack('>QBhhBf', self.time, self.sensor_id, self.flow_x, self.flow_y, self.quality, self.ground_distance))

class MAVLink_object_detection_event_message(MAVLink_message):
        '''
        Object has been detected
        '''
        id = MAVLINK_MSG_ID_OBJECT_DETECTION_EVENT
        name = 'OBJECT_DETECTION_EVENT'
        fieldnames = ['time', 'object_id', 'type', 'name', 'quality', 'bearing', 'distance']
        ordered_fieldnames = [ 'time', 'object_id', 'type', 'name', 'quality', 'bearing', 'distance' ]
        format = '>IHB20sBff'
        native_format = bytearray('>IHBcBff', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6]
        lengths = [1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 20, 0, 0, 0]
        crc_extra = 155

        def __init__(self, time, object_id, type, name, quality, bearing, distance):
                MAVLink_message.__init__(self, MAVLink_object_detection_event_message.id, MAVLink_object_detection_event_message.name)
                self._fieldnames = MAVLink_object_detection_event_message.fieldnames
                self.time = time
                self.object_id = object_id
                self.type = type
                self.name = name
                self.quality = quality
                self.bearing = bearing
                self.distance = distance

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 155, struct.pack('>IHB20sBff', self.time, self.object_id, self.type, self.name, self.quality, self.bearing, self.distance))

class MAVLink_debug_vect_message(MAVLink_message):
        '''

        '''
        id = MAVLINK_MSG_ID_DEBUG_VECT
        name = 'DEBUG_VECT'
        fieldnames = ['name', 'usec', 'x', 'y', 'z']
        ordered_fieldnames = [ 'name', 'usec', 'x', 'y', 'z' ]
        format = '>10sQfff'
        native_format = bytearray('>cQfff', 'ascii')
        orders = [0, 1, 2, 3, 4]
        lengths = [1, 1, 1, 1, 1]
        array_lengths = [10, 0, 0, 0, 0]
        crc_extra = 178

        def __init__(self, name, usec, x, y, z):
                MAVLink_message.__init__(self, MAVLink_debug_vect_message.id, MAVLink_debug_vect_message.name)
                self._fieldnames = MAVLink_debug_vect_message.fieldnames
                self.name = name
                self.usec = usec
                self.x = x
                self.y = y
                self.z = z

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 178, struct.pack('>10sQfff', self.name, self.usec, self.x, self.y, self.z))

class MAVLink_named_value_float_message(MAVLink_message):
        '''
        Send a key-value pair as float. The use of this message is
        discouraged for normal packets, but a quite efficient way for
        testing new messages and getting experimental debug output.
        '''
        id = MAVLINK_MSG_ID_NAMED_VALUE_FLOAT
        name = 'NAMED_VALUE_FLOAT'
        fieldnames = ['name', 'value']
        ordered_fieldnames = [ 'name', 'value' ]
        format = '>10sf'
        native_format = bytearray('>cf', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [10, 0]
        crc_extra = 224

        def __init__(self, name, value):
                MAVLink_message.__init__(self, MAVLink_named_value_float_message.id, MAVLink_named_value_float_message.name)
                self._fieldnames = MAVLink_named_value_float_message.fieldnames
                self.name = name
                self.value = value

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 224, struct.pack('>10sf', self.name, self.value))

class MAVLink_named_value_int_message(MAVLink_message):
        '''
        Send a key-value pair as integer. The use of this message is
        discouraged for normal packets, but a quite efficient way for
        testing new messages and getting experimental debug output.
        '''
        id = MAVLINK_MSG_ID_NAMED_VALUE_INT
        name = 'NAMED_VALUE_INT'
        fieldnames = ['name', 'value']
        ordered_fieldnames = [ 'name', 'value' ]
        format = '>10si'
        native_format = bytearray('>ci', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [10, 0]
        crc_extra = 60

        def __init__(self, name, value):
                MAVLink_message.__init__(self, MAVLink_named_value_int_message.id, MAVLink_named_value_int_message.name)
                self._fieldnames = MAVLink_named_value_int_message.fieldnames
                self.name = name
                self.value = value

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 60, struct.pack('>10si', self.name, self.value))

class MAVLink_statustext_message(MAVLink_message):
        '''
        Status text message. These messages are printed in yellow in
        the COMM console of QGroundControl. WARNING: They consume
        quite some bandwidth, so use only for important status and
        error messages. If implemented wisely, these messages are
        buffered on the MCU and sent only at a limited rate (e.g. 10
        Hz).
        '''
        id = MAVLINK_MSG_ID_STATUSTEXT
        name = 'STATUSTEXT'
        fieldnames = ['severity', 'text']
        ordered_fieldnames = [ 'severity', 'text' ]
        format = '>B50b'
        native_format = bytearray('>Bb', 'ascii')
        orders = [0, 1]
        lengths = [1, 50]
        array_lengths = [0, 50]
        crc_extra = 106

        def __init__(self, severity, text):
                MAVLink_message.__init__(self, MAVLink_statustext_message.id, MAVLink_statustext_message.name)
                self._fieldnames = MAVLink_statustext_message.fieldnames
                self.severity = severity
                self.text = text

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 106, struct.pack('>B50b', self.severity, self.text[0], self.text[1], self.text[2], self.text[3], self.text[4], self.text[5], self.text[6], self.text[7], self.text[8], self.text[9], self.text[10], self.text[11], self.text[12], self.text[13], self.text[14], self.text[15], self.text[16], self.text[17], self.text[18], self.text[19], self.text[20], self.text[21], self.text[22], self.text[23], self.text[24], self.text[25], self.text[26], self.text[27], self.text[28], self.text[29], self.text[30], self.text[31], self.text[32], self.text[33], self.text[34], self.text[35], self.text[36], self.text[37], self.text[38], self.text[39], self.text[40], self.text[41], self.text[42], self.text[43], self.text[44], self.text[45], self.text[46], self.text[47], self.text[48], self.text[49]))

class MAVLink_debug_message(MAVLink_message):
        '''
        Send a debug value. The index is used to discriminate between
        values. These values show up in the plot of QGroundControl as
        DEBUG N.
        '''
        id = MAVLINK_MSG_ID_DEBUG
        name = 'DEBUG'
        fieldnames = ['ind', 'value']
        ordered_fieldnames = [ 'ind', 'value' ]
        format = '>Bf'
        native_format = bytearray('>Bf', 'ascii')
        orders = [0, 1]
        lengths = [1, 1]
        array_lengths = [0, 0]
        crc_extra = 7

        def __init__(self, ind, value):
                MAVLink_message.__init__(self, MAVLink_debug_message.id, MAVLink_debug_message.name)
                self._fieldnames = MAVLink_debug_message.fieldnames
                self.ind = ind
                self.value = value

        def pack(self, mav):
                return MAVLink_message.pack(self, mav, 7, struct.pack('>Bf', self.ind, self.value))


mavlink_map = {
        MAVLINK_MSG_ID_CPU_LOAD : MAVLink_cpu_load_message,
        MAVLINK_MSG_ID_AIR_DATA : MAVLink_air_data_message,
        MAVLINK_MSG_ID_SENSOR_BIAS : MAVLink_sensor_bias_message,
        MAVLINK_MSG_ID_DIAGNOSTIC : MAVLink_diagnostic_message,
        MAVLINK_MSG_ID_SLUGS_NAVIGATION : MAVLink_slugs_navigation_message,
        MAVLINK_MSG_ID_DATA_LOG : MAVLink_data_log_message,
        MAVLINK_MSG_ID_GPS_DATE_TIME : MAVLink_gps_date_time_message,
        MAVLINK_MSG_ID_MID_LVL_CMDS : MAVLink_mid_lvl_cmds_message,
        MAVLINK_MSG_ID_CTRL_SRFC_PT : MAVLink_ctrl_srfc_pt_message,
        MAVLINK_MSG_ID_SLUGS_ACTION : MAVLink_slugs_action_message,
        MAVLINK_MSG_ID_HEARTBEAT : MAVLink_heartbeat_message,
        MAVLINK_MSG_ID_BOOT : MAVLink_boot_message,
        MAVLINK_MSG_ID_SYSTEM_TIME : MAVLink_system_time_message,
        MAVLINK_MSG_ID_PING : MAVLink_ping_message,
        MAVLINK_MSG_ID_SYSTEM_TIME_UTC : MAVLink_system_time_utc_message,
        MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL : MAVLink_change_operator_control_message,
        MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK : MAVLink_change_operator_control_ack_message,
        MAVLINK_MSG_ID_AUTH_KEY : MAVLink_auth_key_message,
        MAVLINK_MSG_ID_ACTION_ACK : MAVLink_action_ack_message,
        MAVLINK_MSG_ID_ACTION : MAVLink_action_message,
        MAVLINK_MSG_ID_SET_MODE : MAVLink_set_mode_message,
        MAVLINK_MSG_ID_SET_NAV_MODE : MAVLink_set_nav_mode_message,
        MAVLINK_MSG_ID_PARAM_REQUEST_READ : MAVLink_param_request_read_message,
        MAVLINK_MSG_ID_PARAM_REQUEST_LIST : MAVLink_param_request_list_message,
        MAVLINK_MSG_ID_PARAM_VALUE : MAVLink_param_value_message,
        MAVLINK_MSG_ID_PARAM_SET : MAVLink_param_set_message,
        MAVLINK_MSG_ID_GPS_RAW_INT : MAVLink_gps_raw_int_message,
        MAVLINK_MSG_ID_SCALED_IMU : MAVLink_scaled_imu_message,
        MAVLINK_MSG_ID_GPS_STATUS : MAVLink_gps_status_message,
        MAVLINK_MSG_ID_RAW_IMU : MAVLink_raw_imu_message,
        MAVLINK_MSG_ID_RAW_PRESSURE : MAVLink_raw_pressure_message,
        MAVLINK_MSG_ID_SCALED_PRESSURE : MAVLink_scaled_pressure_message,
        MAVLINK_MSG_ID_ATTITUDE : MAVLink_attitude_message,
        MAVLINK_MSG_ID_LOCAL_POSITION : MAVLink_local_position_message,
        MAVLINK_MSG_ID_GLOBAL_POSITION : MAVLink_global_position_message,
        MAVLINK_MSG_ID_GPS_RAW : MAVLink_gps_raw_message,
        MAVLINK_MSG_ID_SYS_STATUS : MAVLink_sys_status_message,
        MAVLINK_MSG_ID_RC_CHANNELS_RAW : MAVLink_rc_channels_raw_message,
        MAVLINK_MSG_ID_RC_CHANNELS_SCALED : MAVLink_rc_channels_scaled_message,
        MAVLINK_MSG_ID_SERVO_OUTPUT_RAW : MAVLink_servo_output_raw_message,
        MAVLINK_MSG_ID_WAYPOINT : MAVLink_waypoint_message,
        MAVLINK_MSG_ID_WAYPOINT_REQUEST : MAVLink_waypoint_request_message,
        MAVLINK_MSG_ID_WAYPOINT_SET_CURRENT : MAVLink_waypoint_set_current_message,
        MAVLINK_MSG_ID_WAYPOINT_CURRENT : MAVLink_waypoint_current_message,
        MAVLINK_MSG_ID_WAYPOINT_REQUEST_LIST : MAVLink_waypoint_request_list_message,
        MAVLINK_MSG_ID_WAYPOINT_COUNT : MAVLink_waypoint_count_message,
        MAVLINK_MSG_ID_WAYPOINT_CLEAR_ALL : MAVLink_waypoint_clear_all_message,
        MAVLINK_MSG_ID_WAYPOINT_REACHED : MAVLink_waypoint_reached_message,
        MAVLINK_MSG_ID_WAYPOINT_ACK : MAVLink_waypoint_ack_message,
        MAVLINK_MSG_ID_GPS_SET_GLOBAL_ORIGIN : MAVLink_gps_set_global_origin_message,
        MAVLINK_MSG_ID_GPS_LOCAL_ORIGIN_SET : MAVLink_gps_local_origin_set_message,
        MAVLINK_MSG_ID_LOCAL_POSITION_SETPOINT_SET : MAVLink_local_position_setpoint_set_message,
        MAVLINK_MSG_ID_LOCAL_POSITION_SETPOINT : MAVLink_local_position_setpoint_message,
        MAVLINK_MSG_ID_CONTROL_STATUS : MAVLink_control_status_message,
        MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA : MAVLink_safety_set_allowed_area_message,
        MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA : MAVLink_safety_allowed_area_message,
        MAVLINK_MSG_ID_SET_ROLL_PITCH_YAW_THRUST : MAVLink_set_roll_pitch_yaw_thrust_message,
        MAVLINK_MSG_ID_SET_ROLL_PITCH_YAW_SPEED_THRUST : MAVLink_set_roll_pitch_yaw_speed_thrust_message,
        MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT : MAVLink_roll_pitch_yaw_thrust_setpoint_message,
        MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT : MAVLink_roll_pitch_yaw_speed_thrust_setpoint_message,
        MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT : MAVLink_nav_controller_output_message,
        MAVLINK_MSG_ID_POSITION_TARGET : MAVLink_position_target_message,
        MAVLINK_MSG_ID_STATE_CORRECTION : MAVLink_state_correction_message,
        MAVLINK_MSG_ID_SET_ALTITUDE : MAVLink_set_altitude_message,
        MAVLINK_MSG_ID_REQUEST_DATA_STREAM : MAVLink_request_data_stream_message,
        MAVLINK_MSG_ID_HIL_STATE : MAVLink_hil_state_message,
        MAVLINK_MSG_ID_HIL_CONTROLS : MAVLink_hil_controls_message,
        MAVLINK_MSG_ID_MANUAL_CONTROL : MAVLink_manual_control_message,
        MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE : MAVLink_rc_channels_override_message,
        MAVLINK_MSG_ID_GLOBAL_POSITION_INT : MAVLink_global_position_int_message,
        MAVLINK_MSG_ID_VFR_HUD : MAVLink_vfr_hud_message,
        MAVLINK_MSG_ID_COMMAND : MAVLink_command_message,
        MAVLINK_MSG_ID_COMMAND_ACK : MAVLink_command_ack_message,
        MAVLINK_MSG_ID_OPTICAL_FLOW : MAVLink_optical_flow_message,
        MAVLINK_MSG_ID_OBJECT_DETECTION_EVENT : MAVLink_object_detection_event_message,
        MAVLINK_MSG_ID_DEBUG_VECT : MAVLink_debug_vect_message,
        MAVLINK_MSG_ID_NAMED_VALUE_FLOAT : MAVLink_named_value_float_message,
        MAVLINK_MSG_ID_NAMED_VALUE_INT : MAVLink_named_value_int_message,
        MAVLINK_MSG_ID_STATUSTEXT : MAVLink_statustext_message,
        MAVLINK_MSG_ID_DEBUG : MAVLink_debug_message,
}

class MAVError(Exception):
        '''MAVLink error class'''
        def __init__(self, msg):
            Exception.__init__(self, msg)
            self.message = msg

class MAVString(str):
        '''NUL terminated string'''
        def __init__(self, s):
                str.__init__(self)
        def __str__(self):
            i = self.find(chr(0))
            if i == -1:
                return self[:]
            return self[0:i]

class MAVLink_bad_data(MAVLink_message):
        '''
        a piece of bad data in a mavlink stream
        '''
        def __init__(self, data, reason):
                MAVLink_message.__init__(self, MAVLINK_MSG_ID_BAD_DATA, 'BAD_DATA')
                self._fieldnames = ['data', 'reason']
                self.data = data
                self.reason = reason
                self._msgbuf = data

        def __str__(self):
            '''Override the __str__ function from MAVLink_messages because non-printable characters are common in to be the reason for this message to exist.'''
            return '%s {%s, data:%s}' % (self._type, self.reason, [('%x' % ord(i) if isinstance(i, str) else '%x' % i) for i in self.data])

class MAVLink(object):
        '''MAVLink protocol handling class'''
        def __init__(self, file, srcSystem=0, srcComponent=0, use_native=False):
                self.seq = 0
                self.file = file
                self.srcSystem = srcSystem
                self.srcComponent = srcComponent
                self.callback = None
                self.callback_args = None
                self.callback_kwargs = None
                self.send_callback = None
                self.send_callback_args = None
                self.send_callback_kwargs = None
                self.buf = bytearray()
                self.expected_length = 8
                self.have_prefix_error = False
                self.robust_parsing = False
                self.protocol_marker = 85
                self.little_endian = False
                self.crc_extra = False
                self.sort_fields = False
                self.total_packets_sent = 0
                self.total_bytes_sent = 0
                self.total_packets_received = 0
                self.total_bytes_received = 0
                self.total_receive_errors = 0
                self.startup_time = time.time()
                if native_supported and (use_native or native_testing or native_force):
                    print("NOTE: mavnative is currently beta-test code")
                    self.native = mavnative.NativeConnection(MAVLink_message, mavlink_map)
                else:
                    self.native = None
                if native_testing:
                    self.test_buf = bytearray()

        def set_callback(self, callback, *args, **kwargs):
            self.callback = callback
            self.callback_args = args
            self.callback_kwargs = kwargs

        def set_send_callback(self, callback, *args, **kwargs):
            self.send_callback = callback
            self.send_callback_args = args
            self.send_callback_kwargs = kwargs

        def send(self, mavmsg):
                '''send a MAVLink message'''
                buf = mavmsg.pack(self)
                self.file.write(buf)
                self.seq = (self.seq + 1) % 256
                self.total_packets_sent += 1
                self.total_bytes_sent += len(buf)
                if self.send_callback:
                    self.send_callback(mavmsg, *self.send_callback_args, **self.send_callback_kwargs)

        def bytes_needed(self):
            '''return number of bytes needed for next parsing stage'''
            if self.native:
                ret = self.native.expected_length - len(self.buf)
            else:
                ret = self.expected_length - len(self.buf)
            
            if ret <= 0:
                return 1
            return ret

        def __parse_char_native(self, c):
            '''this method exists only to see in profiling results'''
            m = self.native.parse_chars(c)
            return m

        def __callbacks(self, msg):
            '''this method exists only to make profiling results easier to read'''
            if self.callback:
                self.callback(msg, *self.callback_args, **self.callback_kwargs)

        def parse_char(self, c):
            '''input some data bytes, possibly returning a new message'''
            self.buf.extend(c)

            self.total_bytes_received += len(c)

            if self.native:
                if native_testing:
                    self.test_buf.extend(c)
                    m = self.__parse_char_native(self.test_buf)
                    m2 = self.__parse_char_legacy()
                    if m2 != m:
                        print("Native: %s\nLegacy: %s\n" % (m, m2))
                        raise Exception('Native vs. Legacy mismatch')
                else:
                    m = self.__parse_char_native(self.buf)
            else:
                m = self.__parse_char_legacy()

            if m != None:
                self.total_packets_received += 1
                self.__callbacks(m)

            return m

        def __parse_char_legacy(self):
            '''input some data bytes, possibly returning a new message (uses no native code)'''
            if len(self.buf) >= 1 and self.buf[0] != 85:
                magic = self.buf[0]
                self.buf = self.buf[1:]
                if self.robust_parsing:
                    m = MAVLink_bad_data(chr(magic), "Bad prefix")
                    self.expected_length = 8
                    self.total_receive_errors += 1
                    return m
                if self.have_prefix_error:
                    return None
                self.have_prefix_error = True
                self.total_receive_errors += 1
                raise MAVError("invalid MAVLink prefix '%s'" % magic)
            self.have_prefix_error = False
            if len(self.buf) >= 2:
                if sys.version_info[0] < 3:
                    (magic, self.expected_length) = struct.unpack('BB', str(self.buf[0:2])) # bytearrays are not supported in py 2.7.3
                else:
                    (magic, self.expected_length) = struct.unpack('BB', self.buf[0:2])
                self.expected_length += 8
            if self.expected_length >= 8 and len(self.buf) >= self.expected_length:
                mbuf = array.array('B', self.buf[0:self.expected_length])
                self.buf = self.buf[self.expected_length:]
                self.expected_length = 8
                if self.robust_parsing:
                    try:
                        m = self.decode(mbuf)
                    except MAVError as reason:
                        m = MAVLink_bad_data(mbuf, reason.message)
                        self.total_receive_errors += 1
                else:
                    m = self.decode(mbuf)
                return m
            return None

        def parse_buffer(self, s):
            '''input some data bytes, possibly returning a list of new messages'''
            m = self.parse_char(s)
            if m is None:
                return None
            ret = [m]
            while True:
                m = self.parse_char("")
                if m is None:
                    return ret
                ret.append(m)
            return ret

        def decode(self, msgbuf):
                '''decode a buffer as a MAVLink message'''
                # decode the header
                try:
                    magic, mlen, seq, srcSystem, srcComponent, msgId = struct.unpack('cBBBBB', msgbuf[:6])
                except struct.error as emsg:
                    raise MAVError('Unable to unpack MAVLink header: %s' % emsg)
                if ord(magic) != 85:
                    raise MAVError("invalid MAVLink prefix '%s'" % magic)
                if mlen != len(msgbuf)-8:
                    raise MAVError('invalid MAVLink message length. Got %u expected %u, msgId=%u' % (len(msgbuf)-8, mlen, msgId))

                if not msgId in mavlink_map:
                    raise MAVError('unknown MAVLink message ID %u' % msgId)

                # decode the payload
                type = mavlink_map[msgId]
                fmt = type.format
                order_map = type.orders
                len_map = type.lengths
                crc_extra = type.crc_extra

                # decode the checksum
                try:
                    crc, = struct.unpack('<H', msgbuf[-2:])
                except struct.error as emsg:
                    raise MAVError('Unable to unpack MAVLink CRC: %s' % emsg)
                crcbuf = msgbuf[1:-2]
                if False: # using CRC extra
                    crcbuf.append(crc_extra)
                crc2 = x25crc(crcbuf)
                if crc != crc2.crc:
                    raise MAVError('invalid MAVLink CRC in msgID %u 0x%04x should be 0x%04x' % (msgId, crc, crc2.crc))

                try:
                    t = struct.unpack(fmt, msgbuf[6:-2])
                except struct.error as emsg:
                    raise MAVError('Unable to unpack MAVLink payload type=%s fmt=%s payloadLength=%u: %s' % (
                        type, fmt, len(msgbuf[6:-2]), emsg))

                tlist = list(t)
                # handle sorted fields
                if False:
                    t = tlist[:]
                    if sum(len_map) == len(len_map):
                        # message has no arrays in it
                        for i in range(0, len(tlist)):
                            tlist[i] = t[order_map[i]]
                    else:
                        # message has some arrays
                        tlist = []
                        for i in range(0, len(order_map)):
                            order = order_map[i]
                            L = len_map[order]
                            tip = sum(len_map[:order])
                            field = t[tip]
                            if L == 1 or isinstance(field, str):
                                tlist.append(field)
                            else:
                                tlist.append(t[tip:(tip + L)])

                # terminate any strings
                for i in range(0, len(tlist)):
                    if isinstance(tlist[i], str):
                        tlist[i] = str(MAVString(tlist[i]))
                t = tuple(tlist)
                # construct the message object
                try:
                    m = type(*t)
                except Exception as emsg:
                    raise MAVError('Unable to instantiate MAVLink message of type %s : %s' % (type, emsg))
                m._msgbuf = msgbuf
                m._payload = msgbuf[6:-2]
                m._crc = crc
                m._header = MAVLink_header(msgId, mlen, seq, srcSystem, srcComponent)
                return m
        def cpu_load_encode(self, sensLoad, ctrlLoad, batVolt):
                '''
                Sensor and DSC control loads.

                sensLoad                  : Sensor DSC Load (uint8_t)
                ctrlLoad                  : Control DSC Load (uint8_t)
                batVolt                   : Battery Voltage in millivolts (uint16_t)

                '''
                return MAVLink_cpu_load_message(sensLoad, ctrlLoad, batVolt)

        def cpu_load_send(self, sensLoad, ctrlLoad, batVolt):
                '''
                Sensor and DSC control loads.

                sensLoad                  : Sensor DSC Load (uint8_t)
                ctrlLoad                  : Control DSC Load (uint8_t)
                batVolt                   : Battery Voltage in millivolts (uint16_t)

                '''
                return self.send(self.cpu_load_encode(sensLoad, ctrlLoad, batVolt))

        def air_data_encode(self, dynamicPressure, staticPressure, temperature):
                '''
                Air data for altitude and airspeed computation.

                dynamicPressure           : Dynamic pressure (Pa) (float)
                staticPressure            : Static pressure (Pa) (float)
                temperature               : Board temperature (uint16_t)

                '''
                return MAVLink_air_data_message(dynamicPressure, staticPressure, temperature)

        def air_data_send(self, dynamicPressure, staticPressure, temperature):
                '''
                Air data for altitude and airspeed computation.

                dynamicPressure           : Dynamic pressure (Pa) (float)
                staticPressure            : Static pressure (Pa) (float)
                temperature               : Board temperature (uint16_t)

                '''
                return self.send(self.air_data_encode(dynamicPressure, staticPressure, temperature))

        def sensor_bias_encode(self, axBias, ayBias, azBias, gxBias, gyBias, gzBias):
                '''
                Accelerometer and gyro biases.

                axBias                    : Accelerometer X bias (m/s) (float)
                ayBias                    : Accelerometer Y bias (m/s) (float)
                azBias                    : Accelerometer Z bias (m/s) (float)
                gxBias                    : Gyro X bias (rad/s) (float)
                gyBias                    : Gyro Y bias (rad/s) (float)
                gzBias                    : Gyro Z bias (rad/s) (float)

                '''
                return MAVLink_sensor_bias_message(axBias, ayBias, azBias, gxBias, gyBias, gzBias)

        def sensor_bias_send(self, axBias, ayBias, azBias, gxBias, gyBias, gzBias):
                '''
                Accelerometer and gyro biases.

                axBias                    : Accelerometer X bias (m/s) (float)
                ayBias                    : Accelerometer Y bias (m/s) (float)
                azBias                    : Accelerometer Z bias (m/s) (float)
                gxBias                    : Gyro X bias (rad/s) (float)
                gyBias                    : Gyro Y bias (rad/s) (float)
                gzBias                    : Gyro Z bias (rad/s) (float)

                '''
                return self.send(self.sensor_bias_encode(axBias, ayBias, azBias, gxBias, gyBias, gzBias))

        def diagnostic_encode(self, diagFl1, diagFl2, diagFl3, diagSh1, diagSh2, diagSh3):
                '''
                Configurable diagnostic messages.

                diagFl1                   : Diagnostic float 1 (float)
                diagFl2                   : Diagnostic float 2 (float)
                diagFl3                   : Diagnostic float 3 (float)
                diagSh1                   : Diagnostic short 1 (int16_t)
                diagSh2                   : Diagnostic short 2 (int16_t)
                diagSh3                   : Diagnostic short 3 (int16_t)

                '''
                return MAVLink_diagnostic_message(diagFl1, diagFl2, diagFl3, diagSh1, diagSh2, diagSh3)

        def diagnostic_send(self, diagFl1, diagFl2, diagFl3, diagSh1, diagSh2, diagSh3):
                '''
                Configurable diagnostic messages.

                diagFl1                   : Diagnostic float 1 (float)
                diagFl2                   : Diagnostic float 2 (float)
                diagFl3                   : Diagnostic float 3 (float)
                diagSh1                   : Diagnostic short 1 (int16_t)
                diagSh2                   : Diagnostic short 2 (int16_t)
                diagSh3                   : Diagnostic short 3 (int16_t)

                '''
                return self.send(self.diagnostic_encode(diagFl1, diagFl2, diagFl3, diagSh1, diagSh2, diagSh3))

        def slugs_navigation_encode(self, u_m, phi_c, theta_c, psiDot_c, ay_body, totalDist, dist2Go, fromWP, toWP):
                '''
                Data used in the navigation algorithm.

                u_m                       : Measured Airspeed prior to the Nav Filter (float)
                phi_c                     : Commanded Roll (float)
                theta_c                   : Commanded Pitch (float)
                psiDot_c                  : Commanded Turn rate (float)
                ay_body                   : Y component of the body acceleration (float)
                totalDist                 : Total Distance to Run on this leg of Navigation (float)
                dist2Go                   : Remaining distance to Run on this leg of Navigation (float)
                fromWP                    : Origin WP (uint8_t)
                toWP                      : Destination WP (uint8_t)

                '''
                return MAVLink_slugs_navigation_message(u_m, phi_c, theta_c, psiDot_c, ay_body, totalDist, dist2Go, fromWP, toWP)

        def slugs_navigation_send(self, u_m, phi_c, theta_c, psiDot_c, ay_body, totalDist, dist2Go, fromWP, toWP):
                '''
                Data used in the navigation algorithm.

                u_m                       : Measured Airspeed prior to the Nav Filter (float)
                phi_c                     : Commanded Roll (float)
                theta_c                   : Commanded Pitch (float)
                psiDot_c                  : Commanded Turn rate (float)
                ay_body                   : Y component of the body acceleration (float)
                totalDist                 : Total Distance to Run on this leg of Navigation (float)
                dist2Go                   : Remaining distance to Run on this leg of Navigation (float)
                fromWP                    : Origin WP (uint8_t)
                toWP                      : Destination WP (uint8_t)

                '''
                return self.send(self.slugs_navigation_encode(u_m, phi_c, theta_c, psiDot_c, ay_body, totalDist, dist2Go, fromWP, toWP))

        def data_log_encode(self, fl_1, fl_2, fl_3, fl_4, fl_5, fl_6):
                '''
                Configurable data log probes to be used inside Simulink

                fl_1                      : Log value 1 (float)
                fl_2                      : Log value 2 (float)
                fl_3                      : Log value 3 (float)
                fl_4                      : Log value 4 (float)
                fl_5                      : Log value 5 (float)
                fl_6                      : Log value 6 (float)

                '''
                return MAVLink_data_log_message(fl_1, fl_2, fl_3, fl_4, fl_5, fl_6)

        def data_log_send(self, fl_1, fl_2, fl_3, fl_4, fl_5, fl_6):
                '''
                Configurable data log probes to be used inside Simulink

                fl_1                      : Log value 1 (float)
                fl_2                      : Log value 2 (float)
                fl_3                      : Log value 3 (float)
                fl_4                      : Log value 4 (float)
                fl_5                      : Log value 5 (float)
                fl_6                      : Log value 6 (float)

                '''
                return self.send(self.data_log_encode(fl_1, fl_2, fl_3, fl_4, fl_5, fl_6))

        def gps_date_time_encode(self, year, month, day, hour, min, sec, visSat):
                '''
                Pilot console PWM messges.

                year                      : Year reported by Gps (uint8_t)
                month                     : Month reported by Gps (uint8_t)
                day                       : Day reported by Gps (uint8_t)
                hour                      : Hour reported by Gps (uint8_t)
                min                       : Min reported by Gps (uint8_t)
                sec                       : Sec reported by Gps (uint8_t)
                visSat                    : Visible sattelites reported by Gps (uint8_t)

                '''
                return MAVLink_gps_date_time_message(year, month, day, hour, min, sec, visSat)

        def gps_date_time_send(self, year, month, day, hour, min, sec, visSat):
                '''
                Pilot console PWM messges.

                year                      : Year reported by Gps (uint8_t)
                month                     : Month reported by Gps (uint8_t)
                day                       : Day reported by Gps (uint8_t)
                hour                      : Hour reported by Gps (uint8_t)
                min                       : Min reported by Gps (uint8_t)
                sec                       : Sec reported by Gps (uint8_t)
                visSat                    : Visible sattelites reported by Gps (uint8_t)

                '''
                return self.send(self.gps_date_time_encode(year, month, day, hour, min, sec, visSat))

        def mid_lvl_cmds_encode(self, target, hCommand, uCommand, rCommand):
                '''
                Mid Level commands sent from the GS to the autopilot. These are only
                sent when being opperated in mid-level commands mode
                from the ground; for periodic report of these commands
                generated from the autopilot see message XXXX.

                target                    : The system setting the commands (uint8_t)
                hCommand                  : Commanded Airspeed (float)
                uCommand                  : Log value 2 (float)
                rCommand                  : Log value 3 (float)

                '''
                return MAVLink_mid_lvl_cmds_message(target, hCommand, uCommand, rCommand)

        def mid_lvl_cmds_send(self, target, hCommand, uCommand, rCommand):
                '''
                Mid Level commands sent from the GS to the autopilot. These are only
                sent when being opperated in mid-level commands mode
                from the ground; for periodic report of these commands
                generated from the autopilot see message XXXX.

                target                    : The system setting the commands (uint8_t)
                hCommand                  : Commanded Airspeed (float)
                uCommand                  : Log value 2 (float)
                rCommand                  : Log value 3 (float)

                '''
                return self.send(self.mid_lvl_cmds_encode(target, hCommand, uCommand, rCommand))

        def ctrl_srfc_pt_encode(self, target, bitfieldPt):
                '''
                This message configures the Selective Passthrough mode. it allows to
                select which control surfaces the Pilot can control
                from his console. It is implemented as a bitfield as
                follows:              Position          Bit
                Code             =================================
                15-8             Reserved               7
                dt_pass    128             6                 dla_pass
                64             5                 dra_pass   32
                4                 dr_pass    16             3
                dle_pass   8             2                 dre_pass
                4             1                 dlf_pass   2
                0                 drf_pass   1             Where Bit
                15 is the MSb. 0 = AP has control of the surface; 1 =
                Pilot Console has control of the surface.

                target                    : The system setting the commands (uint8_t)
                bitfieldPt                : Bitfield containing the PT configuration (uint16_t)

                '''
                return MAVLink_ctrl_srfc_pt_message(target, bitfieldPt)

        def ctrl_srfc_pt_send(self, target, bitfieldPt):
                '''
                This message configures the Selective Passthrough mode. it allows to
                select which control surfaces the Pilot can control
                from his console. It is implemented as a bitfield as
                follows:              Position          Bit
                Code             =================================
                15-8             Reserved               7
                dt_pass    128             6                 dla_pass
                64             5                 dra_pass   32
                4                 dr_pass    16             3
                dle_pass   8             2                 dre_pass
                4             1                 dlf_pass   2
                0                 drf_pass   1             Where Bit
                15 is the MSb. 0 = AP has control of the surface; 1 =
                Pilot Console has control of the surface.

                target                    : The system setting the commands (uint8_t)
                bitfieldPt                : Bitfield containing the PT configuration (uint16_t)

                '''
                return self.send(self.ctrl_srfc_pt_encode(target, bitfieldPt))

        def slugs_action_encode(self, target, actionId, actionVal):
                '''
                Action messages focused on the SLUGS AP.

                target                    : The system reporting the action (uint8_t)
                actionId                  : Action ID. See apDefinitions.h in the SLUGS /clib directory for the ID names (uint8_t)
                actionVal                 : Value associated with the action (uint16_t)

                '''
                return MAVLink_slugs_action_message(target, actionId, actionVal)

        def slugs_action_send(self, target, actionId, actionVal):
                '''
                Action messages focused on the SLUGS AP.

                target                    : The system reporting the action (uint8_t)
                actionId                  : Action ID. See apDefinitions.h in the SLUGS /clib directory for the ID names (uint8_t)
                actionVal                 : Value associated with the action (uint16_t)

                '''
                return self.send(self.slugs_action_encode(target, actionId, actionVal))

        def heartbeat_encode(self, type, autopilot, mavlink_version=2):
                '''
                The heartbeat message shows that a system is present and responding.
                The type of the MAV and Autopilot hardware allow the
                receiving system to treat further messages from this
                system appropriate (e.g. by laying out the user
                interface based on the autopilot).

                type                      : Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM) (uint8_t)
                autopilot                 : Type of the Autopilot: 0: Generic, 1: PIXHAWK, 2: SLUGS, 3: Ardupilot (up to 15 types), defined in MAV_AUTOPILOT_TYPE ENUM (uint8_t)
                mavlink_version           : MAVLink version (uint8_t)

                '''
                return MAVLink_heartbeat_message(type, autopilot, mavlink_version)

        def heartbeat_send(self, type, autopilot, mavlink_version=2):
                '''
                The heartbeat message shows that a system is present and responding.
                The type of the MAV and Autopilot hardware allow the
                receiving system to treat further messages from this
                system appropriate (e.g. by laying out the user
                interface based on the autopilot).

                type                      : Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM) (uint8_t)
                autopilot                 : Type of the Autopilot: 0: Generic, 1: PIXHAWK, 2: SLUGS, 3: Ardupilot (up to 15 types), defined in MAV_AUTOPILOT_TYPE ENUM (uint8_t)
                mavlink_version           : MAVLink version (uint8_t)

                '''
                return self.send(self.heartbeat_encode(type, autopilot, mavlink_version))

        def boot_encode(self, version):
                '''
                The boot message indicates that a system is starting. The onboard
                software version allows to keep track of onboard
                soft/firmware revisions.

                version                   : The onboard software version (uint32_t)

                '''
                return MAVLink_boot_message(version)

        def boot_send(self, version):
                '''
                The boot message indicates that a system is starting. The onboard
                software version allows to keep track of onboard
                soft/firmware revisions.

                version                   : The onboard software version (uint32_t)

                '''
                return self.send(self.boot_encode(version))

        def system_time_encode(self, time_usec):
                '''
                The system time is the time of the master clock, typically the
                computer clock of the main onboard computer.

                time_usec                 : Timestamp of the master clock in microseconds since UNIX epoch. (uint64_t)

                '''
                return MAVLink_system_time_message(time_usec)

        def system_time_send(self, time_usec):
                '''
                The system time is the time of the master clock, typically the
                computer clock of the main onboard computer.

                time_usec                 : Timestamp of the master clock in microseconds since UNIX epoch. (uint64_t)

                '''
                return self.send(self.system_time_encode(time_usec))

        def ping_encode(self, seq, target_system, target_component, time):
                '''
                A ping message either requesting or responding to a ping. This allows
                to measure the system latencies, including serial
                port, radio modem and UDP connections.

                seq                       : PING sequence (uint32_t)
                target_system             : 0: request ping from all receiving systems, if greater than 0: message is a ping response and number is the system id of the requesting system (uint8_t)
                target_component          : 0: request ping from all receiving components, if greater than 0: message is a ping response and number is the system id of the requesting system (uint8_t)
                time                      : Unix timestamp in microseconds (uint64_t)

                '''
                return MAVLink_ping_message(seq, target_system, target_component, time)

        def ping_send(self, seq, target_system, target_component, time):
                '''
                A ping message either requesting or responding to a ping. This allows
                to measure the system latencies, including serial
                port, radio modem and UDP connections.

                seq                       : PING sequence (uint32_t)
                target_system             : 0: request ping from all receiving systems, if greater than 0: message is a ping response and number is the system id of the requesting system (uint8_t)
                target_component          : 0: request ping from all receiving components, if greater than 0: message is a ping response and number is the system id of the requesting system (uint8_t)
                time                      : Unix timestamp in microseconds (uint64_t)

                '''
                return self.send(self.ping_encode(seq, target_system, target_component, time))

        def system_time_utc_encode(self, utc_date, utc_time):
                '''
                UTC date and time from GPS module

                utc_date                  : GPS UTC date ddmmyy (uint32_t)
                utc_time                  : GPS UTC time hhmmss (uint32_t)

                '''
                return MAVLink_system_time_utc_message(utc_date, utc_time)

        def system_time_utc_send(self, utc_date, utc_time):
                '''
                UTC date and time from GPS module

                utc_date                  : GPS UTC date ddmmyy (uint32_t)
                utc_time                  : GPS UTC time hhmmss (uint32_t)

                '''
                return self.send(self.system_time_utc_encode(utc_date, utc_time))

        def change_operator_control_encode(self, target_system, control_request, version, passkey):
                '''
                Request to control this MAV

                target_system             : System the GCS requests control for (uint8_t)
                control_request           : 0: request control of this MAV, 1: Release control of this MAV (uint8_t)
                version                   : 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch. (uint8_t)
                passkey                   : Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-" (char)

                '''
                return MAVLink_change_operator_control_message(target_system, control_request, version, passkey)

        def change_operator_control_send(self, target_system, control_request, version, passkey):
                '''
                Request to control this MAV

                target_system             : System the GCS requests control for (uint8_t)
                control_request           : 0: request control of this MAV, 1: Release control of this MAV (uint8_t)
                version                   : 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch. (uint8_t)
                passkey                   : Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-" (char)

                '''
                return self.send(self.change_operator_control_encode(target_system, control_request, version, passkey))

        def change_operator_control_ack_encode(self, gcs_system_id, control_request, ack):
                '''
                Accept / deny control of this MAV

                gcs_system_id             : ID of the GCS this message (uint8_t)
                control_request           : 0: request control of this MAV, 1: Release control of this MAV (uint8_t)
                ack                       : 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control (uint8_t)

                '''
                return MAVLink_change_operator_control_ack_message(gcs_system_id, control_request, ack)

        def change_operator_control_ack_send(self, gcs_system_id, control_request, ack):
                '''
                Accept / deny control of this MAV

                gcs_system_id             : ID of the GCS this message (uint8_t)
                control_request           : 0: request control of this MAV, 1: Release control of this MAV (uint8_t)
                ack                       : 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control (uint8_t)

                '''
                return self.send(self.change_operator_control_ack_encode(gcs_system_id, control_request, ack))

        def auth_key_encode(self, key):
                '''
                Emit an encrypted signature / key identifying this system. PLEASE
                NOTE: This protocol has been kept simple, so
                transmitting the key requires an encrypted channel for
                true safety.

                key                       : key (char)

                '''
                return MAVLink_auth_key_message(key)

        def auth_key_send(self, key):
                '''
                Emit an encrypted signature / key identifying this system. PLEASE
                NOTE: This protocol has been kept simple, so
                transmitting the key requires an encrypted channel for
                true safety.

                key                       : key (char)

                '''
                return self.send(self.auth_key_encode(key))

        def action_ack_encode(self, action, result):
                '''
                This message acknowledges an action. IMPORTANT: The acknowledgement
                can be also negative, e.g. the MAV rejects a reset
                message because it is in-flight. The action ids are
                defined in ENUM MAV_ACTION in
                mavlink/include/mavlink_types.h

                action                    : The action id (uint8_t)
                result                    : 0: Action DENIED, 1: Action executed (uint8_t)

                '''
                return MAVLink_action_ack_message(action, result)

        def action_ack_send(self, action, result):
                '''
                This message acknowledges an action. IMPORTANT: The acknowledgement
                can be also negative, e.g. the MAV rejects a reset
                message because it is in-flight. The action ids are
                defined in ENUM MAV_ACTION in
                mavlink/include/mavlink_types.h

                action                    : The action id (uint8_t)
                result                    : 0: Action DENIED, 1: Action executed (uint8_t)

                '''
                return self.send(self.action_ack_encode(action, result))

        def action_encode(self, target, target_component, action):
                '''
                An action message allows to execute a certain onboard action. These
                include liftoff, land, storing parameters too EEPROM,
                shutddown, etc. The action ids are defined in ENUM
                MAV_ACTION in mavlink/include/mavlink_types.h

                target                    : The system executing the action (uint8_t)
                target_component          : The component executing the action (uint8_t)
                action                    : The action id (uint8_t)

                '''
                return MAVLink_action_message(target, target_component, action)

        def action_send(self, target, target_component, action):
                '''
                An action message allows to execute a certain onboard action. These
                include liftoff, land, storing parameters too EEPROM,
                shutddown, etc. The action ids are defined in ENUM
                MAV_ACTION in mavlink/include/mavlink_types.h

                target                    : The system executing the action (uint8_t)
                target_component          : The component executing the action (uint8_t)
                action                    : The action id (uint8_t)

                '''
                return self.send(self.action_encode(target, target_component, action))

        def set_mode_encode(self, target, mode):
                '''
                Set the system mode, as defined by enum MAV_MODE in
                mavlink/include/mavlink_types.h. There is no target
                component id as the mode is by definition for the
                overall aircraft, not only for one component.

                target                    : The system setting the mode (uint8_t)
                mode                      : The new mode (uint8_t)

                '''
                return MAVLink_set_mode_message(target, mode)

        def set_mode_send(self, target, mode):
                '''
                Set the system mode, as defined by enum MAV_MODE in
                mavlink/include/mavlink_types.h. There is no target
                component id as the mode is by definition for the
                overall aircraft, not only for one component.

                target                    : The system setting the mode (uint8_t)
                mode                      : The new mode (uint8_t)

                '''
                return self.send(self.set_mode_encode(target, mode))

        def set_nav_mode_encode(self, target, nav_mode):
                '''
                Set the system navigation mode, as defined by enum MAV_NAV_MODE in
                mavlink/include/mavlink_types.h. The navigation mode
                applies to the whole aircraft and thus all components.

                target                    : The system setting the mode (uint8_t)
                nav_mode                  : The new navigation mode (uint8_t)

                '''
                return MAVLink_set_nav_mode_message(target, nav_mode)

        def set_nav_mode_send(self, target, nav_mode):
                '''
                Set the system navigation mode, as defined by enum MAV_NAV_MODE in
                mavlink/include/mavlink_types.h. The navigation mode
                applies to the whole aircraft and thus all components.

                target                    : The system setting the mode (uint8_t)
                nav_mode                  : The new navigation mode (uint8_t)

                '''
                return self.send(self.set_nav_mode_encode(target, nav_mode))

        def param_request_read_encode(self, target_system, target_component, param_id, param_index):
                '''
                Request to read the onboard parameter with the param_id string id.
                Onboard parameters are stored as key[const char*] ->
                value[float]. This allows to send a parameter to any
                other component (such as the GCS) without the need of
                previous knowledge of possible parameter names. Thus
                the same GCS can store different parameters for
                different autopilots. See also
                http://qgroundcontrol.org/parameter_interface for a
                full documentation of QGroundControl and IMU code.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id (int8_t)
                param_index               : Parameter index. Send -1 to use the param ID field as identifier (int16_t)

                '''
                return MAVLink_param_request_read_message(target_system, target_component, param_id, param_index)

        def param_request_read_send(self, target_system, target_component, param_id, param_index):
                '''
                Request to read the onboard parameter with the param_id string id.
                Onboard parameters are stored as key[const char*] ->
                value[float]. This allows to send a parameter to any
                other component (such as the GCS) without the need of
                previous knowledge of possible parameter names. Thus
                the same GCS can store different parameters for
                different autopilots. See also
                http://qgroundcontrol.org/parameter_interface for a
                full documentation of QGroundControl and IMU code.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id (int8_t)
                param_index               : Parameter index. Send -1 to use the param ID field as identifier (int16_t)

                '''
                return self.send(self.param_request_read_encode(target_system, target_component, param_id, param_index))

        def param_request_list_encode(self, target_system, target_component):
                '''
                Request all parameters of this component. After his request, all
                parameters are emitted.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

                '''
                return MAVLink_param_request_list_message(target_system, target_component)

        def param_request_list_send(self, target_system, target_component):
                '''
                Request all parameters of this component. After his request, all
                parameters are emitted.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

                '''
                return self.send(self.param_request_list_encode(target_system, target_component))

        def param_value_encode(self, param_id, param_value, param_count, param_index):
                '''
                Emit the value of a onboard parameter. The inclusion of param_count
                and param_index in the message allows the recipient to
                keep track of received parameters and allows him to
                re-request missing parameters after a loss or timeout.

                param_id                  : Onboard parameter id (int8_t)
                param_value               : Onboard parameter value (float)
                param_count               : Total number of onboard parameters (uint16_t)
                param_index               : Index of this onboard parameter (uint16_t)

                '''
                return MAVLink_param_value_message(param_id, param_value, param_count, param_index)

        def param_value_send(self, param_id, param_value, param_count, param_index):
                '''
                Emit the value of a onboard parameter. The inclusion of param_count
                and param_index in the message allows the recipient to
                keep track of received parameters and allows him to
                re-request missing parameters after a loss or timeout.

                param_id                  : Onboard parameter id (int8_t)
                param_value               : Onboard parameter value (float)
                param_count               : Total number of onboard parameters (uint16_t)
                param_index               : Index of this onboard parameter (uint16_t)

                '''
                return self.send(self.param_value_encode(param_id, param_value, param_count, param_index))

        def param_set_encode(self, target_system, target_component, param_id, param_value):
                '''
                Set a parameter value TEMPORARILY to RAM. It will be reset to default
                on system reboot. Send the ACTION
                MAV_ACTION_STORAGE_WRITE to PERMANENTLY write the RAM
                contents to EEPROM. IMPORTANT: The receiving component
                should acknowledge the new parameter value by sending
                a param_value message to all communication partners.
                This will also ensure that multiple GCS all have an
                up-to-date list of all parameters. If the sending GCS
                did not receive a PARAM_VALUE message within its
                timeout time, it should re-send the PARAM_SET message.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id (int8_t)
                param_value               : Onboard parameter value (float)

                '''
                return MAVLink_param_set_message(target_system, target_component, param_id, param_value)

        def param_set_send(self, target_system, target_component, param_id, param_value):
                '''
                Set a parameter value TEMPORARILY to RAM. It will be reset to default
                on system reboot. Send the ACTION
                MAV_ACTION_STORAGE_WRITE to PERMANENTLY write the RAM
                contents to EEPROM. IMPORTANT: The receiving component
                should acknowledge the new parameter value by sending
                a param_value message to all communication partners.
                This will also ensure that multiple GCS all have an
                up-to-date list of all parameters. If the sending GCS
                did not receive a PARAM_VALUE message within its
                timeout time, it should re-send the PARAM_SET message.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id (int8_t)
                param_value               : Onboard parameter value (float)

                '''
                return self.send(self.param_set_encode(target_system, target_component, param_id, param_value))

        def gps_raw_int_encode(self, usec, fix_type, lat, lon, alt, eph, epv, v, hdg):
                '''
                The global position, as returned by the Global Positioning System
                (GPS). This is NOT the global position estimate of the
                sytem, but rather a RAW sensor value. See message
                GLOBAL_POSITION for the global position estimate.
                Coordinate frame is right-handed, Z-axis up (GPS
                frame)

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (uint8_t)
                lat                       : Latitude in 1E7 degrees (int32_t)
                lon                       : Longitude in 1E7 degrees (int32_t)
                alt                       : Altitude in 1E3 meters (millimeters) (int32_t)
                eph                       : GPS HDOP (float)
                epv                       : GPS VDOP (float)
                v                         : GPS ground speed (m/s) (float)
                hdg                       : Compass heading in degrees, 0..360 degrees (float)

                '''
                return MAVLink_gps_raw_int_message(usec, fix_type, lat, lon, alt, eph, epv, v, hdg)

        def gps_raw_int_send(self, usec, fix_type, lat, lon, alt, eph, epv, v, hdg):
                '''
                The global position, as returned by the Global Positioning System
                (GPS). This is NOT the global position estimate of the
                sytem, but rather a RAW sensor value. See message
                GLOBAL_POSITION for the global position estimate.
                Coordinate frame is right-handed, Z-axis up (GPS
                frame)

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (uint8_t)
                lat                       : Latitude in 1E7 degrees (int32_t)
                lon                       : Longitude in 1E7 degrees (int32_t)
                alt                       : Altitude in 1E3 meters (millimeters) (int32_t)
                eph                       : GPS HDOP (float)
                epv                       : GPS VDOP (float)
                v                         : GPS ground speed (m/s) (float)
                hdg                       : Compass heading in degrees, 0..360 degrees (float)

                '''
                return self.send(self.gps_raw_int_encode(usec, fix_type, lat, lon, alt, eph, epv, v, hdg))

        def scaled_imu_encode(self, usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag):
                '''
                The RAW IMU readings for the usual 9DOF sensor setup. This message
                should contain the scaled values to the described
                units

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                xacc                      : X acceleration (mg) (int16_t)
                yacc                      : Y acceleration (mg) (int16_t)
                zacc                      : Z acceleration (mg) (int16_t)
                xgyro                     : Angular speed around X axis (millirad /sec) (int16_t)
                ygyro                     : Angular speed around Y axis (millirad /sec) (int16_t)
                zgyro                     : Angular speed around Z axis (millirad /sec) (int16_t)
                xmag                      : X Magnetic field (milli tesla) (int16_t)
                ymag                      : Y Magnetic field (milli tesla) (int16_t)
                zmag                      : Z Magnetic field (milli tesla) (int16_t)

                '''
                return MAVLink_scaled_imu_message(usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag)

        def scaled_imu_send(self, usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag):
                '''
                The RAW IMU readings for the usual 9DOF sensor setup. This message
                should contain the scaled values to the described
                units

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                xacc                      : X acceleration (mg) (int16_t)
                yacc                      : Y acceleration (mg) (int16_t)
                zacc                      : Z acceleration (mg) (int16_t)
                xgyro                     : Angular speed around X axis (millirad /sec) (int16_t)
                ygyro                     : Angular speed around Y axis (millirad /sec) (int16_t)
                zgyro                     : Angular speed around Z axis (millirad /sec) (int16_t)
                xmag                      : X Magnetic field (milli tesla) (int16_t)
                ymag                      : Y Magnetic field (milli tesla) (int16_t)
                zmag                      : Z Magnetic field (milli tesla) (int16_t)

                '''
                return self.send(self.scaled_imu_encode(usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag))

        def gps_status_encode(self, satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr):
                '''
                The positioning status, as reported by GPS. This message is intended
                to display status information about each satellite
                visible to the receiver. See message GLOBAL_POSITION
                for the global position estimate. This message can
                contain information for up to 20 satellites.

                satellites_visible        : Number of satellites visible (uint8_t)
                satellite_prn             : Global satellite ID (int8_t)
                satellite_used            : 0: Satellite not used, 1: used for localization (int8_t)
                satellite_elevation        : Elevation (0: right on top of receiver, 90: on the horizon) of satellite (int8_t)
                satellite_azimuth         : Direction of satellite, 0: 0 deg, 255: 360 deg. (int8_t)
                satellite_snr             : Signal to noise ratio of satellite (int8_t)

                '''
                return MAVLink_gps_status_message(satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr)

        def gps_status_send(self, satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr):
                '''
                The positioning status, as reported by GPS. This message is intended
                to display status information about each satellite
                visible to the receiver. See message GLOBAL_POSITION
                for the global position estimate. This message can
                contain information for up to 20 satellites.

                satellites_visible        : Number of satellites visible (uint8_t)
                satellite_prn             : Global satellite ID (int8_t)
                satellite_used            : 0: Satellite not used, 1: used for localization (int8_t)
                satellite_elevation        : Elevation (0: right on top of receiver, 90: on the horizon) of satellite (int8_t)
                satellite_azimuth         : Direction of satellite, 0: 0 deg, 255: 360 deg. (int8_t)
                satellite_snr             : Signal to noise ratio of satellite (int8_t)

                '''
                return self.send(self.gps_status_encode(satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr))

        def raw_imu_encode(self, usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag):
                '''
                The RAW IMU readings for the usual 9DOF sensor setup. This message
                should always contain the true raw values without any
                scaling to allow data capture and system debugging.

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                xacc                      : X acceleration (raw) (int16_t)
                yacc                      : Y acceleration (raw) (int16_t)
                zacc                      : Z acceleration (raw) (int16_t)
                xgyro                     : Angular speed around X axis (raw) (int16_t)
                ygyro                     : Angular speed around Y axis (raw) (int16_t)
                zgyro                     : Angular speed around Z axis (raw) (int16_t)
                xmag                      : X Magnetic field (raw) (int16_t)
                ymag                      : Y Magnetic field (raw) (int16_t)
                zmag                      : Z Magnetic field (raw) (int16_t)

                '''
                return MAVLink_raw_imu_message(usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag)

        def raw_imu_send(self, usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag):
                '''
                The RAW IMU readings for the usual 9DOF sensor setup. This message
                should always contain the true raw values without any
                scaling to allow data capture and system debugging.

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                xacc                      : X acceleration (raw) (int16_t)
                yacc                      : Y acceleration (raw) (int16_t)
                zacc                      : Z acceleration (raw) (int16_t)
                xgyro                     : Angular speed around X axis (raw) (int16_t)
                ygyro                     : Angular speed around Y axis (raw) (int16_t)
                zgyro                     : Angular speed around Z axis (raw) (int16_t)
                xmag                      : X Magnetic field (raw) (int16_t)
                ymag                      : Y Magnetic field (raw) (int16_t)
                zmag                      : Z Magnetic field (raw) (int16_t)

                '''
                return self.send(self.raw_imu_encode(usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag))

        def raw_pressure_encode(self, usec, press_abs, press_diff1, press_diff2, temperature):
                '''
                The RAW pressure readings for the typical setup of one absolute
                pressure and one differential pressure sensor. The
                sensor values should be the raw, UNSCALED ADC values.

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                press_abs                 : Absolute pressure (raw) (int16_t)
                press_diff1               : Differential pressure 1 (raw) (int16_t)
                press_diff2               : Differential pressure 2 (raw) (int16_t)
                temperature               : Raw Temperature measurement (raw) (int16_t)

                '''
                return MAVLink_raw_pressure_message(usec, press_abs, press_diff1, press_diff2, temperature)

        def raw_pressure_send(self, usec, press_abs, press_diff1, press_diff2, temperature):
                '''
                The RAW pressure readings for the typical setup of one absolute
                pressure and one differential pressure sensor. The
                sensor values should be the raw, UNSCALED ADC values.

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                press_abs                 : Absolute pressure (raw) (int16_t)
                press_diff1               : Differential pressure 1 (raw) (int16_t)
                press_diff2               : Differential pressure 2 (raw) (int16_t)
                temperature               : Raw Temperature measurement (raw) (int16_t)

                '''
                return self.send(self.raw_pressure_encode(usec, press_abs, press_diff1, press_diff2, temperature))

        def scaled_pressure_encode(self, usec, press_abs, press_diff, temperature):
                '''
                The pressure readings for the typical setup of one absolute and
                differential pressure sensor. The units are as
                specified in each field.

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                press_abs                 : Absolute pressure (hectopascal) (float)
                press_diff                : Differential pressure 1 (hectopascal) (float)
                temperature               : Temperature measurement (0.01 degrees celsius) (int16_t)

                '''
                return MAVLink_scaled_pressure_message(usec, press_abs, press_diff, temperature)

        def scaled_pressure_send(self, usec, press_abs, press_diff, temperature):
                '''
                The pressure readings for the typical setup of one absolute and
                differential pressure sensor. The units are as
                specified in each field.

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                press_abs                 : Absolute pressure (hectopascal) (float)
                press_diff                : Differential pressure 1 (hectopascal) (float)
                temperature               : Temperature measurement (0.01 degrees celsius) (int16_t)

                '''
                return self.send(self.scaled_pressure_encode(usec, press_abs, press_diff, temperature))

        def attitude_encode(self, usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed):
                '''
                The attitude in the aeronautical frame (right-handed, Z-down, X-front,
                Y-right).

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                roll                      : Roll angle (rad) (float)
                pitch                     : Pitch angle (rad) (float)
                yaw                       : Yaw angle (rad) (float)
                rollspeed                 : Roll angular speed (rad/s) (float)
                pitchspeed                : Pitch angular speed (rad/s) (float)
                yawspeed                  : Yaw angular speed (rad/s) (float)

                '''
                return MAVLink_attitude_message(usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed)

        def attitude_send(self, usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed):
                '''
                The attitude in the aeronautical frame (right-handed, Z-down, X-front,
                Y-right).

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                roll                      : Roll angle (rad) (float)
                pitch                     : Pitch angle (rad) (float)
                yaw                       : Yaw angle (rad) (float)
                rollspeed                 : Roll angular speed (rad/s) (float)
                pitchspeed                : Pitch angular speed (rad/s) (float)
                yawspeed                  : Yaw angular speed (rad/s) (float)

                '''
                return self.send(self.attitude_encode(usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed))

        def local_position_encode(self, usec, x, y, z, vx, vy, vz):
                '''
                The filtered local position (e.g. fused computer vision and
                accelerometers). Coordinate frame is right-handed,
                Z-axis down (aeronautical frame)

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                vx                        : X Speed (float)
                vy                        : Y Speed (float)
                vz                        : Z Speed (float)

                '''
                return MAVLink_local_position_message(usec, x, y, z, vx, vy, vz)

        def local_position_send(self, usec, x, y, z, vx, vy, vz):
                '''
                The filtered local position (e.g. fused computer vision and
                accelerometers). Coordinate frame is right-handed,
                Z-axis down (aeronautical frame)

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                vx                        : X Speed (float)
                vy                        : Y Speed (float)
                vz                        : Z Speed (float)

                '''
                return self.send(self.local_position_encode(usec, x, y, z, vx, vy, vz))

        def global_position_encode(self, usec, lat, lon, alt, vx, vy, vz):
                '''
                The filtered global position (e.g. fused GPS and accelerometers).
                Coordinate frame is right-handed, Z-axis up (GPS
                frame)

                usec                      : Timestamp (microseconds since unix epoch) (uint64_t)
                lat                       : Latitude, in degrees (float)
                lon                       : Longitude, in degrees (float)
                alt                       : Absolute altitude, in meters (float)
                vx                        : X Speed (in Latitude direction, positive: going north) (float)
                vy                        : Y Speed (in Longitude direction, positive: going east) (float)
                vz                        : Z Speed (in Altitude direction, positive: going up) (float)

                '''
                return MAVLink_global_position_message(usec, lat, lon, alt, vx, vy, vz)

        def global_position_send(self, usec, lat, lon, alt, vx, vy, vz):
                '''
                The filtered global position (e.g. fused GPS and accelerometers).
                Coordinate frame is right-handed, Z-axis up (GPS
                frame)

                usec                      : Timestamp (microseconds since unix epoch) (uint64_t)
                lat                       : Latitude, in degrees (float)
                lon                       : Longitude, in degrees (float)
                alt                       : Absolute altitude, in meters (float)
                vx                        : X Speed (in Latitude direction, positive: going north) (float)
                vy                        : Y Speed (in Longitude direction, positive: going east) (float)
                vz                        : Z Speed (in Altitude direction, positive: going up) (float)

                '''
                return self.send(self.global_position_encode(usec, lat, lon, alt, vx, vy, vz))

        def gps_raw_encode(self, usec, fix_type, lat, lon, alt, eph, epv, v, hdg):
                '''
                The global position, as returned by the Global Positioning System
                (GPS). This is NOT the global position estimate of the
                sytem, but rather a RAW sensor value. See message
                GLOBAL_POSITION for the global position estimate.
                Coordinate frame is right-handed, Z-axis up (GPS
                frame)

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (uint8_t)
                lat                       : Latitude in degrees (float)
                lon                       : Longitude in degrees (float)
                alt                       : Altitude in meters (float)
                eph                       : GPS HDOP (float)
                epv                       : GPS VDOP (float)
                v                         : GPS ground speed (float)
                hdg                       : Compass heading in degrees, 0..360 degrees (float)

                '''
                return MAVLink_gps_raw_message(usec, fix_type, lat, lon, alt, eph, epv, v, hdg)

        def gps_raw_send(self, usec, fix_type, lat, lon, alt, eph, epv, v, hdg):
                '''
                The global position, as returned by the Global Positioning System
                (GPS). This is NOT the global position estimate of the
                sytem, but rather a RAW sensor value. See message
                GLOBAL_POSITION for the global position estimate.
                Coordinate frame is right-handed, Z-axis up (GPS
                frame)

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (uint8_t)
                lat                       : Latitude in degrees (float)
                lon                       : Longitude in degrees (float)
                alt                       : Altitude in meters (float)
                eph                       : GPS HDOP (float)
                epv                       : GPS VDOP (float)
                v                         : GPS ground speed (float)
                hdg                       : Compass heading in degrees, 0..360 degrees (float)

                '''
                return self.send(self.gps_raw_encode(usec, fix_type, lat, lon, alt, eph, epv, v, hdg))

        def sys_status_encode(self, mode, nav_mode, status, load, vbat, battery_remaining, packet_drop):
                '''
                The general system state. If the system is following the MAVLink
                standard, the system state is mainly defined by three
                orthogonal states/modes: The system mode, which is
                either LOCKED (motors shut down and locked), MANUAL
                (system under RC control), GUIDED (system with
                autonomous position control, position setpoint
                controlled manually) or AUTO (system guided by
                path/waypoint planner). The NAV_MODE defined the
                current flight state: LIFTOFF (often an open-loop
                maneuver), LANDING, WAYPOINTS or VECTOR. This
                represents the internal navigation state machine. The
                system status shows wether the system is currently
                active or not and if an emergency occured. During the
                CRITICAL and EMERGENCY states the MAV is still
                considered to be active, but should start emergency
                procedures autonomously. After a failure occured it
                should first move from active to critical to allow
                manual intervention and then move to emergency after a
                certain timeout.

                mode                      : System mode, see MAV_MODE ENUM in mavlink/include/mavlink_types.h (uint8_t)
                nav_mode                  : Navigation mode, see MAV_NAV_MODE ENUM (uint8_t)
                status                    : System status flag, see MAV_STATUS ENUM (uint8_t)
                load                      : Maximum usage in percent of the mainloop time, (0%: 0, 100%: 1000) should be always below 1000 (uint16_t)
                vbat                      : Battery voltage, in millivolts (1 = 1 millivolt) (uint16_t)
                battery_remaining         : Remaining battery energy: (0%: 0, 100%: 1000) (uint16_t)
                packet_drop               : Dropped packets (packets that were corrupted on reception on the MAV) (uint16_t)

                '''
                return MAVLink_sys_status_message(mode, nav_mode, status, load, vbat, battery_remaining, packet_drop)

        def sys_status_send(self, mode, nav_mode, status, load, vbat, battery_remaining, packet_drop):
                '''
                The general system state. If the system is following the MAVLink
                standard, the system state is mainly defined by three
                orthogonal states/modes: The system mode, which is
                either LOCKED (motors shut down and locked), MANUAL
                (system under RC control), GUIDED (system with
                autonomous position control, position setpoint
                controlled manually) or AUTO (system guided by
                path/waypoint planner). The NAV_MODE defined the
                current flight state: LIFTOFF (often an open-loop
                maneuver), LANDING, WAYPOINTS or VECTOR. This
                represents the internal navigation state machine. The
                system status shows wether the system is currently
                active or not and if an emergency occured. During the
                CRITICAL and EMERGENCY states the MAV is still
                considered to be active, but should start emergency
                procedures autonomously. After a failure occured it
                should first move from active to critical to allow
                manual intervention and then move to emergency after a
                certain timeout.

                mode                      : System mode, see MAV_MODE ENUM in mavlink/include/mavlink_types.h (uint8_t)
                nav_mode                  : Navigation mode, see MAV_NAV_MODE ENUM (uint8_t)
                status                    : System status flag, see MAV_STATUS ENUM (uint8_t)
                load                      : Maximum usage in percent of the mainloop time, (0%: 0, 100%: 1000) should be always below 1000 (uint16_t)
                vbat                      : Battery voltage, in millivolts (1 = 1 millivolt) (uint16_t)
                battery_remaining         : Remaining battery energy: (0%: 0, 100%: 1000) (uint16_t)
                packet_drop               : Dropped packets (packets that were corrupted on reception on the MAV) (uint16_t)

                '''
                return self.send(self.sys_status_encode(mode, nav_mode, status, load, vbat, battery_remaining, packet_drop))

        def rc_channels_raw_encode(self, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi):
                '''
                The RAW values of the RC channels received. The standard PPM
                modulation is as follows: 1000 microseconds: 0%, 2000
                microseconds: 100%. Individual receivers/transmitters
                might violate this specification.

                chan1_raw                 : RC channel 1 value, in microseconds (uint16_t)
                chan2_raw                 : RC channel 2 value, in microseconds (uint16_t)
                chan3_raw                 : RC channel 3 value, in microseconds (uint16_t)
                chan4_raw                 : RC channel 4 value, in microseconds (uint16_t)
                chan5_raw                 : RC channel 5 value, in microseconds (uint16_t)
                chan6_raw                 : RC channel 6 value, in microseconds (uint16_t)
                chan7_raw                 : RC channel 7 value, in microseconds (uint16_t)
                chan8_raw                 : RC channel 8 value, in microseconds (uint16_t)
                rssi                      : Receive signal strength indicator, 0: 0%, 255: 100% (uint8_t)

                '''
                return MAVLink_rc_channels_raw_message(chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi)

        def rc_channels_raw_send(self, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi):
                '''
                The RAW values of the RC channels received. The standard PPM
                modulation is as follows: 1000 microseconds: 0%, 2000
                microseconds: 100%. Individual receivers/transmitters
                might violate this specification.

                chan1_raw                 : RC channel 1 value, in microseconds (uint16_t)
                chan2_raw                 : RC channel 2 value, in microseconds (uint16_t)
                chan3_raw                 : RC channel 3 value, in microseconds (uint16_t)
                chan4_raw                 : RC channel 4 value, in microseconds (uint16_t)
                chan5_raw                 : RC channel 5 value, in microseconds (uint16_t)
                chan6_raw                 : RC channel 6 value, in microseconds (uint16_t)
                chan7_raw                 : RC channel 7 value, in microseconds (uint16_t)
                chan8_raw                 : RC channel 8 value, in microseconds (uint16_t)
                rssi                      : Receive signal strength indicator, 0: 0%, 255: 100% (uint8_t)

                '''
                return self.send(self.rc_channels_raw_encode(chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi))

        def rc_channels_scaled_encode(self, chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi):
                '''
                The scaled values of the RC channels received. (-100%) -10000, (0%) 0,
                (100%) 10000

                chan1_scaled              : RC channel 1 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan2_scaled              : RC channel 2 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan3_scaled              : RC channel 3 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan4_scaled              : RC channel 4 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan5_scaled              : RC channel 5 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan6_scaled              : RC channel 6 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan7_scaled              : RC channel 7 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan8_scaled              : RC channel 8 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                rssi                      : Receive signal strength indicator, 0: 0%, 255: 100% (uint8_t)

                '''
                return MAVLink_rc_channels_scaled_message(chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi)

        def rc_channels_scaled_send(self, chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi):
                '''
                The scaled values of the RC channels received. (-100%) -10000, (0%) 0,
                (100%) 10000

                chan1_scaled              : RC channel 1 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan2_scaled              : RC channel 2 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan3_scaled              : RC channel 3 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan4_scaled              : RC channel 4 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan5_scaled              : RC channel 5 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan6_scaled              : RC channel 6 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan7_scaled              : RC channel 7 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                chan8_scaled              : RC channel 8 value scaled, (-100%) -10000, (0%) 0, (100%) 10000 (int16_t)
                rssi                      : Receive signal strength indicator, 0: 0%, 255: 100% (uint8_t)

                '''
                return self.send(self.rc_channels_scaled_encode(chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi))

        def servo_output_raw_encode(self, servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw):
                '''
                The RAW values of the servo outputs (for RC input from the remote, use
                the RC_CHANNELS messages). The standard PPM modulation
                is as follows: 1000 microseconds: 0%, 2000
                microseconds: 100%.

                servo1_raw                : Servo output 1 value, in microseconds (uint16_t)
                servo2_raw                : Servo output 2 value, in microseconds (uint16_t)
                servo3_raw                : Servo output 3 value, in microseconds (uint16_t)
                servo4_raw                : Servo output 4 value, in microseconds (uint16_t)
                servo5_raw                : Servo output 5 value, in microseconds (uint16_t)
                servo6_raw                : Servo output 6 value, in microseconds (uint16_t)
                servo7_raw                : Servo output 7 value, in microseconds (uint16_t)
                servo8_raw                : Servo output 8 value, in microseconds (uint16_t)

                '''
                return MAVLink_servo_output_raw_message(servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw)

        def servo_output_raw_send(self, servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw):
                '''
                The RAW values of the servo outputs (for RC input from the remote, use
                the RC_CHANNELS messages). The standard PPM modulation
                is as follows: 1000 microseconds: 0%, 2000
                microseconds: 100%.

                servo1_raw                : Servo output 1 value, in microseconds (uint16_t)
                servo2_raw                : Servo output 2 value, in microseconds (uint16_t)
                servo3_raw                : Servo output 3 value, in microseconds (uint16_t)
                servo4_raw                : Servo output 4 value, in microseconds (uint16_t)
                servo5_raw                : Servo output 5 value, in microseconds (uint16_t)
                servo6_raw                : Servo output 6 value, in microseconds (uint16_t)
                servo7_raw                : Servo output 7 value, in microseconds (uint16_t)
                servo8_raw                : Servo output 8 value, in microseconds (uint16_t)

                '''
                return self.send(self.servo_output_raw_encode(servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw))

        def waypoint_encode(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z):
                '''
                Message encoding a waypoint. This message is emitted to announce
                the presence of a waypoint and to set a waypoint on
                the system. The waypoint can be either in x, y, z
                meters (type: LOCAL) or x:lat, y:lon, z:altitude.
                Local frame is Z-down, right handed, global frame is
                Z-up, right handed

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)
                frame                     : The coordinate system of the waypoint. see MAV_FRAME in mavlink_types.h (uint8_t)
                command                   : The scheduled action for the waypoint. see MAV_COMMAND in common.xml MAVLink specs (uint8_t)
                current                   : false:0, true:1 (uint8_t)
                autocontinue              : autocontinue to next wp (uint8_t)
                param1                    : PARAM1 / For NAV command waypoints: Radius in which the waypoint is accepted as reached, in meters (float)
                param2                    : PARAM2 / For NAV command waypoints: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds (float)
                param3                    : PARAM3 / For LOITER command waypoints: Orbit to circle around the waypoint, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise. (float)
                param4                    : PARAM4 / For NAV and LOITER command waypoints: Yaw orientation in degrees, [0..360] 0 = NORTH (float)
                x                         : PARAM5 / local: x position, global: latitude (float)
                y                         : PARAM6 / y position: global: longitude (float)
                z                         : PARAM7 / z position: global: altitude (float)

                '''
                return MAVLink_waypoint_message(target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z)

        def waypoint_send(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z):
                '''
                Message encoding a waypoint. This message is emitted to announce
                the presence of a waypoint and to set a waypoint on
                the system. The waypoint can be either in x, y, z
                meters (type: LOCAL) or x:lat, y:lon, z:altitude.
                Local frame is Z-down, right handed, global frame is
                Z-up, right handed

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)
                frame                     : The coordinate system of the waypoint. see MAV_FRAME in mavlink_types.h (uint8_t)
                command                   : The scheduled action for the waypoint. see MAV_COMMAND in common.xml MAVLink specs (uint8_t)
                current                   : false:0, true:1 (uint8_t)
                autocontinue              : autocontinue to next wp (uint8_t)
                param1                    : PARAM1 / For NAV command waypoints: Radius in which the waypoint is accepted as reached, in meters (float)
                param2                    : PARAM2 / For NAV command waypoints: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds (float)
                param3                    : PARAM3 / For LOITER command waypoints: Orbit to circle around the waypoint, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise. (float)
                param4                    : PARAM4 / For NAV and LOITER command waypoints: Yaw orientation in degrees, [0..360] 0 = NORTH (float)
                x                         : PARAM5 / local: x position, global: latitude (float)
                y                         : PARAM6 / y position: global: longitude (float)
                z                         : PARAM7 / z position: global: altitude (float)

                '''
                return self.send(self.waypoint_encode(target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z))

        def waypoint_request_encode(self, target_system, target_component, seq):
                '''
                Request the information of the waypoint with the sequence number seq.
                The response of the system to this message should be a
                WAYPOINT message.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)

                '''
                return MAVLink_waypoint_request_message(target_system, target_component, seq)

        def waypoint_request_send(self, target_system, target_component, seq):
                '''
                Request the information of the waypoint with the sequence number seq.
                The response of the system to this message should be a
                WAYPOINT message.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)

                '''
                return self.send(self.waypoint_request_encode(target_system, target_component, seq))

        def waypoint_set_current_encode(self, target_system, target_component, seq):
                '''
                Set the waypoint with sequence number seq as current waypoint. This
                means that the MAV will continue to this waypoint on
                the shortest path (not following the waypoints in-
                between).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)

                '''
                return MAVLink_waypoint_set_current_message(target_system, target_component, seq)

        def waypoint_set_current_send(self, target_system, target_component, seq):
                '''
                Set the waypoint with sequence number seq as current waypoint. This
                means that the MAV will continue to this waypoint on
                the shortest path (not following the waypoints in-
                between).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)

                '''
                return self.send(self.waypoint_set_current_encode(target_system, target_component, seq))

        def waypoint_current_encode(self, seq):
                '''
                Message that announces the sequence number of the current active
                waypoint. The MAV will fly towards this waypoint.

                seq                       : Sequence (uint16_t)

                '''
                return MAVLink_waypoint_current_message(seq)

        def waypoint_current_send(self, seq):
                '''
                Message that announces the sequence number of the current active
                waypoint. The MAV will fly towards this waypoint.

                seq                       : Sequence (uint16_t)

                '''
                return self.send(self.waypoint_current_encode(seq))

        def waypoint_request_list_encode(self, target_system, target_component):
                '''
                Request the overall list of waypoints from the system/component.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

                '''
                return MAVLink_waypoint_request_list_message(target_system, target_component)

        def waypoint_request_list_send(self, target_system, target_component):
                '''
                Request the overall list of waypoints from the system/component.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

                '''
                return self.send(self.waypoint_request_list_encode(target_system, target_component))

        def waypoint_count_encode(self, target_system, target_component, count):
                '''
                This message is emitted as response to WAYPOINT_REQUEST_LIST by the
                MAV. The GCS can then request the individual waypoints
                based on the knowledge of the total number of
                waypoints.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                count                     : Number of Waypoints in the Sequence (uint16_t)

                '''
                return MAVLink_waypoint_count_message(target_system, target_component, count)

        def waypoint_count_send(self, target_system, target_component, count):
                '''
                This message is emitted as response to WAYPOINT_REQUEST_LIST by the
                MAV. The GCS can then request the individual waypoints
                based on the knowledge of the total number of
                waypoints.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                count                     : Number of Waypoints in the Sequence (uint16_t)

                '''
                return self.send(self.waypoint_count_encode(target_system, target_component, count))

        def waypoint_clear_all_encode(self, target_system, target_component):
                '''
                Delete all waypoints at once.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

                '''
                return MAVLink_waypoint_clear_all_message(target_system, target_component)

        def waypoint_clear_all_send(self, target_system, target_component):
                '''
                Delete all waypoints at once.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

                '''
                return self.send(self.waypoint_clear_all_encode(target_system, target_component))

        def waypoint_reached_encode(self, seq):
                '''
                A certain waypoint has been reached. The system will either hold this
                position (or circle on the orbit) or (if the
                autocontinue on the WP was set) continue to the next
                waypoint.

                seq                       : Sequence (uint16_t)

                '''
                return MAVLink_waypoint_reached_message(seq)

        def waypoint_reached_send(self, seq):
                '''
                A certain waypoint has been reached. The system will either hold this
                position (or circle on the orbit) or (if the
                autocontinue on the WP was set) continue to the next
                waypoint.

                seq                       : Sequence (uint16_t)

                '''
                return self.send(self.waypoint_reached_encode(seq))

        def waypoint_ack_encode(self, target_system, target_component, type):
                '''
                Ack message during waypoint handling. The type field states if this
                message is a positive ack (type=0) or if an error
                happened (type=non-zero).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                type                      : 0: OK, 1: Error (uint8_t)

                '''
                return MAVLink_waypoint_ack_message(target_system, target_component, type)

        def waypoint_ack_send(self, target_system, target_component, type):
                '''
                Ack message during waypoint handling. The type field states if this
                message is a positive ack (type=0) or if an error
                happened (type=non-zero).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                type                      : 0: OK, 1: Error (uint8_t)

                '''
                return self.send(self.waypoint_ack_encode(target_system, target_component, type))

        def gps_set_global_origin_encode(self, target_system, target_component, latitude, longitude, altitude):
                '''
                As local waypoints exist, the global waypoint reference allows to
                transform between the local coordinate frame and the
                global (GPS) coordinate frame. This can be necessary
                when e.g. in- and outdoor settings are connected and
                the MAV should move from in- to outdoor.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                latitude                  : global position * 1E7 (int32_t)
                longitude                 : global position * 1E7 (int32_t)
                altitude                  : global position * 1000 (int32_t)

                '''
                return MAVLink_gps_set_global_origin_message(target_system, target_component, latitude, longitude, altitude)

        def gps_set_global_origin_send(self, target_system, target_component, latitude, longitude, altitude):
                '''
                As local waypoints exist, the global waypoint reference allows to
                transform between the local coordinate frame and the
                global (GPS) coordinate frame. This can be necessary
                when e.g. in- and outdoor settings are connected and
                the MAV should move from in- to outdoor.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                latitude                  : global position * 1E7 (int32_t)
                longitude                 : global position * 1E7 (int32_t)
                altitude                  : global position * 1000 (int32_t)

                '''
                return self.send(self.gps_set_global_origin_encode(target_system, target_component, latitude, longitude, altitude))

        def gps_local_origin_set_encode(self, latitude, longitude, altitude):
                '''
                Once the MAV sets a new GPS-Local correspondence, this message
                announces the origin (0,0,0) position

                latitude                  : Latitude (WGS84), expressed as * 1E7 (int32_t)
                longitude                 : Longitude (WGS84), expressed as * 1E7 (int32_t)
                altitude                  : Altitude(WGS84), expressed as * 1000 (int32_t)

                '''
                return MAVLink_gps_local_origin_set_message(latitude, longitude, altitude)

        def gps_local_origin_set_send(self, latitude, longitude, altitude):
                '''
                Once the MAV sets a new GPS-Local correspondence, this message
                announces the origin (0,0,0) position

                latitude                  : Latitude (WGS84), expressed as * 1E7 (int32_t)
                longitude                 : Longitude (WGS84), expressed as * 1E7 (int32_t)
                altitude                  : Altitude(WGS84), expressed as * 1000 (int32_t)

                '''
                return self.send(self.gps_local_origin_set_encode(latitude, longitude, altitude))

        def local_position_setpoint_set_encode(self, target_system, target_component, x, y, z, yaw):
                '''
                Set the setpoint for a local position controller. This is the position
                in local coordinates the MAV should fly to. This
                message is sent by the path/waypoint planner to the
                onboard position controller. As some MAVs have a
                degree of freedom in yaw (e.g. all
                helicopters/quadrotors), the desired yaw angle is part
                of the message.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                x                         : x position (float)
                y                         : y position (float)
                z                         : z position (float)
                yaw                       : Desired yaw angle (float)

                '''
                return MAVLink_local_position_setpoint_set_message(target_system, target_component, x, y, z, yaw)

        def local_position_setpoint_set_send(self, target_system, target_component, x, y, z, yaw):
                '''
                Set the setpoint for a local position controller. This is the position
                in local coordinates the MAV should fly to. This
                message is sent by the path/waypoint planner to the
                onboard position controller. As some MAVs have a
                degree of freedom in yaw (e.g. all
                helicopters/quadrotors), the desired yaw angle is part
                of the message.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                x                         : x position (float)
                y                         : y position (float)
                z                         : z position (float)
                yaw                       : Desired yaw angle (float)

                '''
                return self.send(self.local_position_setpoint_set_encode(target_system, target_component, x, y, z, yaw))

        def local_position_setpoint_encode(self, x, y, z, yaw):
                '''
                Transmit the current local setpoint of the controller to other MAVs
                (collision avoidance) and to the GCS.

                x                         : x position (float)
                y                         : y position (float)
                z                         : z position (float)
                yaw                       : Desired yaw angle (float)

                '''
                return MAVLink_local_position_setpoint_message(x, y, z, yaw)

        def local_position_setpoint_send(self, x, y, z, yaw):
                '''
                Transmit the current local setpoint of the controller to other MAVs
                (collision avoidance) and to the GCS.

                x                         : x position (float)
                y                         : y position (float)
                z                         : z position (float)
                yaw                       : Desired yaw angle (float)

                '''
                return self.send(self.local_position_setpoint_encode(x, y, z, yaw))

        def control_status_encode(self, position_fix, vision_fix, gps_fix, ahrs_health, control_att, control_pos_xy, control_pos_z, control_pos_yaw):
                '''
                

                position_fix              : Position fix: 0: lost, 2: 2D position fix, 3: 3D position fix (uint8_t)
                vision_fix                : Vision position fix: 0: lost, 1: 2D local position hold, 2: 2D global position fix, 3: 3D global position fix (uint8_t)
                gps_fix                   : GPS position fix: 0: no reception, 1: Minimum 1 satellite, but no position fix, 2: 2D position fix, 3: 3D position fix (uint8_t)
                ahrs_health               : Attitude estimation health: 0: poor, 255: excellent (uint8_t)
                control_att               : 0: Attitude control disabled, 1: enabled (uint8_t)
                control_pos_xy            : 0: X, Y position control disabled, 1: enabled (uint8_t)
                control_pos_z             : 0: Z position control disabled, 1: enabled (uint8_t)
                control_pos_yaw           : 0: Yaw angle control disabled, 1: enabled (uint8_t)

                '''
                return MAVLink_control_status_message(position_fix, vision_fix, gps_fix, ahrs_health, control_att, control_pos_xy, control_pos_z, control_pos_yaw)

        def control_status_send(self, position_fix, vision_fix, gps_fix, ahrs_health, control_att, control_pos_xy, control_pos_z, control_pos_yaw):
                '''
                

                position_fix              : Position fix: 0: lost, 2: 2D position fix, 3: 3D position fix (uint8_t)
                vision_fix                : Vision position fix: 0: lost, 1: 2D local position hold, 2: 2D global position fix, 3: 3D global position fix (uint8_t)
                gps_fix                   : GPS position fix: 0: no reception, 1: Minimum 1 satellite, but no position fix, 2: 2D position fix, 3: 3D position fix (uint8_t)
                ahrs_health               : Attitude estimation health: 0: poor, 255: excellent (uint8_t)
                control_att               : 0: Attitude control disabled, 1: enabled (uint8_t)
                control_pos_xy            : 0: X, Y position control disabled, 1: enabled (uint8_t)
                control_pos_z             : 0: Z position control disabled, 1: enabled (uint8_t)
                control_pos_yaw           : 0: Yaw angle control disabled, 1: enabled (uint8_t)

                '''
                return self.send(self.control_status_encode(position_fix, vision_fix, gps_fix, ahrs_health, control_att, control_pos_xy, control_pos_z, control_pos_yaw))

        def safety_set_allowed_area_encode(self, target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z):
                '''
                Set a safety zone (volume), which is defined by two corners of a cube.
                This message can be used to tell the MAV which
                setpoints/waypoints to accept and which to reject.
                Safety areas are often enforced by national or
                competition regulations.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                frame                     : Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (uint8_t)
                p1x                       : x position 1 / Latitude 1 (float)
                p1y                       : y position 1 / Longitude 1 (float)
                p1z                       : z position 1 / Altitude 1 (float)
                p2x                       : x position 2 / Latitude 2 (float)
                p2y                       : y position 2 / Longitude 2 (float)
                p2z                       : z position 2 / Altitude 2 (float)

                '''
                return MAVLink_safety_set_allowed_area_message(target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z)

        def safety_set_allowed_area_send(self, target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z):
                '''
                Set a safety zone (volume), which is defined by two corners of a cube.
                This message can be used to tell the MAV which
                setpoints/waypoints to accept and which to reject.
                Safety areas are often enforced by national or
                competition regulations.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                frame                     : Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (uint8_t)
                p1x                       : x position 1 / Latitude 1 (float)
                p1y                       : y position 1 / Longitude 1 (float)
                p1z                       : z position 1 / Altitude 1 (float)
                p2x                       : x position 2 / Latitude 2 (float)
                p2y                       : y position 2 / Longitude 2 (float)
                p2z                       : z position 2 / Altitude 2 (float)

                '''
                return self.send(self.safety_set_allowed_area_encode(target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z))

        def safety_allowed_area_encode(self, frame, p1x, p1y, p1z, p2x, p2y, p2z):
                '''
                Read out the safety zone the MAV currently assumes.

                frame                     : Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (uint8_t)
                p1x                       : x position 1 / Latitude 1 (float)
                p1y                       : y position 1 / Longitude 1 (float)
                p1z                       : z position 1 / Altitude 1 (float)
                p2x                       : x position 2 / Latitude 2 (float)
                p2y                       : y position 2 / Longitude 2 (float)
                p2z                       : z position 2 / Altitude 2 (float)

                '''
                return MAVLink_safety_allowed_area_message(frame, p1x, p1y, p1z, p2x, p2y, p2z)

        def safety_allowed_area_send(self, frame, p1x, p1y, p1z, p2x, p2y, p2z):
                '''
                Read out the safety zone the MAV currently assumes.

                frame                     : Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (uint8_t)
                p1x                       : x position 1 / Latitude 1 (float)
                p1y                       : y position 1 / Longitude 1 (float)
                p1z                       : z position 1 / Altitude 1 (float)
                p2x                       : x position 2 / Latitude 2 (float)
                p2y                       : y position 2 / Longitude 2 (float)
                p2z                       : z position 2 / Altitude 2 (float)

                '''
                return self.send(self.safety_allowed_area_encode(frame, p1x, p1y, p1z, p2x, p2y, p2z))

        def set_roll_pitch_yaw_thrust_encode(self, target_system, target_component, roll, pitch, yaw, thrust):
                '''
                Set roll, pitch and yaw.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                roll                      : Desired roll angle in radians (float)
                pitch                     : Desired pitch angle in radians (float)
                yaw                       : Desired yaw angle in radians (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

                '''
                return MAVLink_set_roll_pitch_yaw_thrust_message(target_system, target_component, roll, pitch, yaw, thrust)

        def set_roll_pitch_yaw_thrust_send(self, target_system, target_component, roll, pitch, yaw, thrust):
                '''
                Set roll, pitch and yaw.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                roll                      : Desired roll angle in radians (float)
                pitch                     : Desired pitch angle in radians (float)
                yaw                       : Desired yaw angle in radians (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

                '''
                return self.send(self.set_roll_pitch_yaw_thrust_encode(target_system, target_component, roll, pitch, yaw, thrust))

        def set_roll_pitch_yaw_speed_thrust_encode(self, target_system, target_component, roll_speed, pitch_speed, yaw_speed, thrust):
                '''
                Set roll, pitch and yaw.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                roll_speed                : Desired roll angular speed in rad/s (float)
                pitch_speed               : Desired pitch angular speed in rad/s (float)
                yaw_speed                 : Desired yaw angular speed in rad/s (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

                '''
                return MAVLink_set_roll_pitch_yaw_speed_thrust_message(target_system, target_component, roll_speed, pitch_speed, yaw_speed, thrust)

        def set_roll_pitch_yaw_speed_thrust_send(self, target_system, target_component, roll_speed, pitch_speed, yaw_speed, thrust):
                '''
                Set roll, pitch and yaw.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                roll_speed                : Desired roll angular speed in rad/s (float)
                pitch_speed               : Desired pitch angular speed in rad/s (float)
                yaw_speed                 : Desired yaw angular speed in rad/s (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

                '''
                return self.send(self.set_roll_pitch_yaw_speed_thrust_encode(target_system, target_component, roll_speed, pitch_speed, yaw_speed, thrust))

        def roll_pitch_yaw_thrust_setpoint_encode(self, time_us, roll, pitch, yaw, thrust):
                '''
                Setpoint in roll, pitch, yaw currently active on the system.

                time_us                   : Timestamp in micro seconds since unix epoch (uint64_t)
                roll                      : Desired roll angle in radians (float)
                pitch                     : Desired pitch angle in radians (float)
                yaw                       : Desired yaw angle in radians (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

                '''
                return MAVLink_roll_pitch_yaw_thrust_setpoint_message(time_us, roll, pitch, yaw, thrust)

        def roll_pitch_yaw_thrust_setpoint_send(self, time_us, roll, pitch, yaw, thrust):
                '''
                Setpoint in roll, pitch, yaw currently active on the system.

                time_us                   : Timestamp in micro seconds since unix epoch (uint64_t)
                roll                      : Desired roll angle in radians (float)
                pitch                     : Desired pitch angle in radians (float)
                yaw                       : Desired yaw angle in radians (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

                '''
                return self.send(self.roll_pitch_yaw_thrust_setpoint_encode(time_us, roll, pitch, yaw, thrust))

        def roll_pitch_yaw_speed_thrust_setpoint_encode(self, time_us, roll_speed, pitch_speed, yaw_speed, thrust):
                '''
                Setpoint in rollspeed, pitchspeed, yawspeed currently active on the
                system.

                time_us                   : Timestamp in micro seconds since unix epoch (uint64_t)
                roll_speed                : Desired roll angular speed in rad/s (float)
                pitch_speed               : Desired pitch angular speed in rad/s (float)
                yaw_speed                 : Desired yaw angular speed in rad/s (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

                '''
                return MAVLink_roll_pitch_yaw_speed_thrust_setpoint_message(time_us, roll_speed, pitch_speed, yaw_speed, thrust)

        def roll_pitch_yaw_speed_thrust_setpoint_send(self, time_us, roll_speed, pitch_speed, yaw_speed, thrust):
                '''
                Setpoint in rollspeed, pitchspeed, yawspeed currently active on the
                system.

                time_us                   : Timestamp in micro seconds since unix epoch (uint64_t)
                roll_speed                : Desired roll angular speed in rad/s (float)
                pitch_speed               : Desired pitch angular speed in rad/s (float)
                yaw_speed                 : Desired yaw angular speed in rad/s (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

                '''
                return self.send(self.roll_pitch_yaw_speed_thrust_setpoint_encode(time_us, roll_speed, pitch_speed, yaw_speed, thrust))

        def nav_controller_output_encode(self, nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error):
                '''
                Outputs of the APM navigation controller. The primary use of this
                message is to check the response and signs of the
                controller before actual flight and to assist with
                tuning controller parameters

                nav_roll                  : Current desired roll in degrees (float)
                nav_pitch                 : Current desired pitch in degrees (float)
                nav_bearing               : Current desired heading in degrees (int16_t)
                target_bearing            : Bearing to current waypoint/target in degrees (int16_t)
                wp_dist                   : Distance to active waypoint in meters (uint16_t)
                alt_error                 : Current altitude error in meters (float)
                aspd_error                : Current airspeed error in meters/second (float)
                xtrack_error              : Current crosstrack error on x-y plane in meters (float)

                '''
                return MAVLink_nav_controller_output_message(nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error)

        def nav_controller_output_send(self, nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error):
                '''
                Outputs of the APM navigation controller. The primary use of this
                message is to check the response and signs of the
                controller before actual flight and to assist with
                tuning controller parameters

                nav_roll                  : Current desired roll in degrees (float)
                nav_pitch                 : Current desired pitch in degrees (float)
                nav_bearing               : Current desired heading in degrees (int16_t)
                target_bearing            : Bearing to current waypoint/target in degrees (int16_t)
                wp_dist                   : Distance to active waypoint in meters (uint16_t)
                alt_error                 : Current altitude error in meters (float)
                aspd_error                : Current airspeed error in meters/second (float)
                xtrack_error              : Current crosstrack error on x-y plane in meters (float)

                '''
                return self.send(self.nav_controller_output_encode(nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error))

        def position_target_encode(self, x, y, z, yaw):
                '''
                The goal position of the system. This position is the input to any
                navigation or path planning algorithm and does NOT
                represent the current controller setpoint.

                x                         : x position (float)
                y                         : y position (float)
                z                         : z position (float)
                yaw                       : yaw orientation in radians, 0 = NORTH (float)

                '''
                return MAVLink_position_target_message(x, y, z, yaw)

        def position_target_send(self, x, y, z, yaw):
                '''
                The goal position of the system. This position is the input to any
                navigation or path planning algorithm and does NOT
                represent the current controller setpoint.

                x                         : x position (float)
                y                         : y position (float)
                z                         : z position (float)
                yaw                       : yaw orientation in radians, 0 = NORTH (float)

                '''
                return self.send(self.position_target_encode(x, y, z, yaw))

        def state_correction_encode(self, xErr, yErr, zErr, rollErr, pitchErr, yawErr, vxErr, vyErr, vzErr):
                '''
                Corrects the systems state by adding an error correction term to the
                position and velocity, and by rotating the attitude by
                a correction angle.

                xErr                      : x position error (float)
                yErr                      : y position error (float)
                zErr                      : z position error (float)
                rollErr                   : roll error (radians) (float)
                pitchErr                  : pitch error (radians) (float)
                yawErr                    : yaw error (radians) (float)
                vxErr                     : x velocity (float)
                vyErr                     : y velocity (float)
                vzErr                     : z velocity (float)

                '''
                return MAVLink_state_correction_message(xErr, yErr, zErr, rollErr, pitchErr, yawErr, vxErr, vyErr, vzErr)

        def state_correction_send(self, xErr, yErr, zErr, rollErr, pitchErr, yawErr, vxErr, vyErr, vzErr):
                '''
                Corrects the systems state by adding an error correction term to the
                position and velocity, and by rotating the attitude by
                a correction angle.

                xErr                      : x position error (float)
                yErr                      : y position error (float)
                zErr                      : z position error (float)
                rollErr                   : roll error (radians) (float)
                pitchErr                  : pitch error (radians) (float)
                yawErr                    : yaw error (radians) (float)
                vxErr                     : x velocity (float)
                vyErr                     : y velocity (float)
                vzErr                     : z velocity (float)

                '''
                return self.send(self.state_correction_encode(xErr, yErr, zErr, rollErr, pitchErr, yawErr, vxErr, vyErr, vzErr))

        def set_altitude_encode(self, target, mode):
                '''
                

                target                    : The system setting the altitude (uint8_t)
                mode                      : The new altitude in meters (uint32_t)

                '''
                return MAVLink_set_altitude_message(target, mode)

        def set_altitude_send(self, target, mode):
                '''
                

                target                    : The system setting the altitude (uint8_t)
                mode                      : The new altitude in meters (uint32_t)

                '''
                return self.send(self.set_altitude_encode(target, mode))

        def request_data_stream_encode(self, target_system, target_component, req_stream_id, req_message_rate, start_stop):
                '''
                

                target_system             : The target requested to send the message stream. (uint8_t)
                target_component          : The target requested to send the message stream. (uint8_t)
                req_stream_id             : The ID of the requested message type (uint8_t)
                req_message_rate          : Update rate in Hertz (uint16_t)
                start_stop                : 1 to start sending, 0 to stop sending. (uint8_t)

                '''
                return MAVLink_request_data_stream_message(target_system, target_component, req_stream_id, req_message_rate, start_stop)

        def request_data_stream_send(self, target_system, target_component, req_stream_id, req_message_rate, start_stop):
                '''
                

                target_system             : The target requested to send the message stream. (uint8_t)
                target_component          : The target requested to send the message stream. (uint8_t)
                req_stream_id             : The ID of the requested message type (uint8_t)
                req_message_rate          : Update rate in Hertz (uint16_t)
                start_stop                : 1 to start sending, 0 to stop sending. (uint8_t)

                '''
                return self.send(self.request_data_stream_encode(target_system, target_component, req_stream_id, req_message_rate, start_stop))

        def hil_state_encode(self, usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc):
                '''
                This packet is useful for high throughput                 applications
                such as hardware in the loop simulations.

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                roll                      : Roll angle (rad) (float)
                pitch                     : Pitch angle (rad) (float)
                yaw                       : Yaw angle (rad) (float)
                rollspeed                 : Roll angular speed (rad/s) (float)
                pitchspeed                : Pitch angular speed (rad/s) (float)
                yawspeed                  : Yaw angular speed (rad/s) (float)
                lat                       : Latitude, expressed as * 1E7 (int32_t)
                lon                       : Longitude, expressed as * 1E7 (int32_t)
                alt                       : Altitude in meters, expressed as * 1000 (millimeters) (int32_t)
                vx                        : Ground X Speed (Latitude), expressed as m/s * 100 (int16_t)
                vy                        : Ground Y Speed (Longitude), expressed as m/s * 100 (int16_t)
                vz                        : Ground Z Speed (Altitude), expressed as m/s * 100 (int16_t)
                xacc                      : X acceleration (mg) (int16_t)
                yacc                      : Y acceleration (mg) (int16_t)
                zacc                      : Z acceleration (mg) (int16_t)

                '''
                return MAVLink_hil_state_message(usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc)

        def hil_state_send(self, usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc):
                '''
                This packet is useful for high throughput                 applications
                such as hardware in the loop simulations.

                usec                      : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                roll                      : Roll angle (rad) (float)
                pitch                     : Pitch angle (rad) (float)
                yaw                       : Yaw angle (rad) (float)
                rollspeed                 : Roll angular speed (rad/s) (float)
                pitchspeed                : Pitch angular speed (rad/s) (float)
                yawspeed                  : Yaw angular speed (rad/s) (float)
                lat                       : Latitude, expressed as * 1E7 (int32_t)
                lon                       : Longitude, expressed as * 1E7 (int32_t)
                alt                       : Altitude in meters, expressed as * 1000 (millimeters) (int32_t)
                vx                        : Ground X Speed (Latitude), expressed as m/s * 100 (int16_t)
                vy                        : Ground Y Speed (Longitude), expressed as m/s * 100 (int16_t)
                vz                        : Ground Z Speed (Altitude), expressed as m/s * 100 (int16_t)
                xacc                      : X acceleration (mg) (int16_t)
                yacc                      : Y acceleration (mg) (int16_t)
                zacc                      : Z acceleration (mg) (int16_t)

                '''
                return self.send(self.hil_state_encode(usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc))

        def hil_controls_encode(self, time_us, roll_ailerons, pitch_elevator, yaw_rudder, throttle, mode, nav_mode):
                '''
                Hardware in the loop control outputs

                time_us                   : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                roll_ailerons             : Control output -3 .. 1 (float)
                pitch_elevator            : Control output -1 .. 1 (float)
                yaw_rudder                : Control output -1 .. 1 (float)
                throttle                  : Throttle 0 .. 1 (float)
                mode                      : System mode (MAV_MODE) (uint8_t)
                nav_mode                  : Navigation mode (MAV_NAV_MODE) (uint8_t)

                '''
                return MAVLink_hil_controls_message(time_us, roll_ailerons, pitch_elevator, yaw_rudder, throttle, mode, nav_mode)

        def hil_controls_send(self, time_us, roll_ailerons, pitch_elevator, yaw_rudder, throttle, mode, nav_mode):
                '''
                Hardware in the loop control outputs

                time_us                   : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                roll_ailerons             : Control output -3 .. 1 (float)
                pitch_elevator            : Control output -1 .. 1 (float)
                yaw_rudder                : Control output -1 .. 1 (float)
                throttle                  : Throttle 0 .. 1 (float)
                mode                      : System mode (MAV_MODE) (uint8_t)
                nav_mode                  : Navigation mode (MAV_NAV_MODE) (uint8_t)

                '''
                return self.send(self.hil_controls_encode(time_us, roll_ailerons, pitch_elevator, yaw_rudder, throttle, mode, nav_mode))

        def manual_control_encode(self, target, roll, pitch, yaw, thrust, roll_manual, pitch_manual, yaw_manual, thrust_manual):
                '''
                

                target                    : The system to be controlled (uint8_t)
                roll                      : roll (float)
                pitch                     : pitch (float)
                yaw                       : yaw (float)
                thrust                    : thrust (float)
                roll_manual               : roll control enabled auto:0, manual:1 (uint8_t)
                pitch_manual              : pitch auto:0, manual:1 (uint8_t)
                yaw_manual                : yaw auto:0, manual:1 (uint8_t)
                thrust_manual             : thrust auto:0, manual:1 (uint8_t)

                '''
                return MAVLink_manual_control_message(target, roll, pitch, yaw, thrust, roll_manual, pitch_manual, yaw_manual, thrust_manual)

        def manual_control_send(self, target, roll, pitch, yaw, thrust, roll_manual, pitch_manual, yaw_manual, thrust_manual):
                '''
                

                target                    : The system to be controlled (uint8_t)
                roll                      : roll (float)
                pitch                     : pitch (float)
                yaw                       : yaw (float)
                thrust                    : thrust (float)
                roll_manual               : roll control enabled auto:0, manual:1 (uint8_t)
                pitch_manual              : pitch auto:0, manual:1 (uint8_t)
                yaw_manual                : yaw auto:0, manual:1 (uint8_t)
                thrust_manual             : thrust auto:0, manual:1 (uint8_t)

                '''
                return self.send(self.manual_control_encode(target, roll, pitch, yaw, thrust, roll_manual, pitch_manual, yaw_manual, thrust_manual))

        def rc_channels_override_encode(self, target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw):
                '''
                The RAW values of the RC channels sent to the MAV to override info
                received from the RC radio. A value of -1 means no
                change to that channel. A value of 0 means control of
                that channel should be released back to the RC radio.
                The standard PPM modulation is as follows: 1000
                microseconds: 0%, 2000 microseconds: 100%. Individual
                receivers/transmitters might violate this
                specification.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                chan1_raw                 : RC channel 1 value, in microseconds (uint16_t)
                chan2_raw                 : RC channel 2 value, in microseconds (uint16_t)
                chan3_raw                 : RC channel 3 value, in microseconds (uint16_t)
                chan4_raw                 : RC channel 4 value, in microseconds (uint16_t)
                chan5_raw                 : RC channel 5 value, in microseconds (uint16_t)
                chan6_raw                 : RC channel 6 value, in microseconds (uint16_t)
                chan7_raw                 : RC channel 7 value, in microseconds (uint16_t)
                chan8_raw                 : RC channel 8 value, in microseconds (uint16_t)

                '''
                return MAVLink_rc_channels_override_message(target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw)

        def rc_channels_override_send(self, target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw):
                '''
                The RAW values of the RC channels sent to the MAV to override info
                received from the RC radio. A value of -1 means no
                change to that channel. A value of 0 means control of
                that channel should be released back to the RC radio.
                The standard PPM modulation is as follows: 1000
                microseconds: 0%, 2000 microseconds: 100%. Individual
                receivers/transmitters might violate this
                specification.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                chan1_raw                 : RC channel 1 value, in microseconds (uint16_t)
                chan2_raw                 : RC channel 2 value, in microseconds (uint16_t)
                chan3_raw                 : RC channel 3 value, in microseconds (uint16_t)
                chan4_raw                 : RC channel 4 value, in microseconds (uint16_t)
                chan5_raw                 : RC channel 5 value, in microseconds (uint16_t)
                chan6_raw                 : RC channel 6 value, in microseconds (uint16_t)
                chan7_raw                 : RC channel 7 value, in microseconds (uint16_t)
                chan8_raw                 : RC channel 8 value, in microseconds (uint16_t)

                '''
                return self.send(self.rc_channels_override_encode(target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw))

        def global_position_int_encode(self, lat, lon, alt, vx, vy, vz):
                '''
                The filtered global position (e.g. fused GPS and accelerometers). The
                position is in GPS-frame (right-handed, Z-up)

                lat                       : Latitude, expressed as * 1E7 (int32_t)
                lon                       : Longitude, expressed as * 1E7 (int32_t)
                alt                       : Altitude in meters, expressed as * 1000 (millimeters) (int32_t)
                vx                        : Ground X Speed (Latitude), expressed as m/s * 100 (int16_t)
                vy                        : Ground Y Speed (Longitude), expressed as m/s * 100 (int16_t)
                vz                        : Ground Z Speed (Altitude), expressed as m/s * 100 (int16_t)

                '''
                return MAVLink_global_position_int_message(lat, lon, alt, vx, vy, vz)

        def global_position_int_send(self, lat, lon, alt, vx, vy, vz):
                '''
                The filtered global position (e.g. fused GPS and accelerometers). The
                position is in GPS-frame (right-handed, Z-up)

                lat                       : Latitude, expressed as * 1E7 (int32_t)
                lon                       : Longitude, expressed as * 1E7 (int32_t)
                alt                       : Altitude in meters, expressed as * 1000 (millimeters) (int32_t)
                vx                        : Ground X Speed (Latitude), expressed as m/s * 100 (int16_t)
                vy                        : Ground Y Speed (Longitude), expressed as m/s * 100 (int16_t)
                vz                        : Ground Z Speed (Altitude), expressed as m/s * 100 (int16_t)

                '''
                return self.send(self.global_position_int_encode(lat, lon, alt, vx, vy, vz))

        def vfr_hud_encode(self, airspeed, groundspeed, heading, throttle, alt, climb):
                '''
                Metrics typically displayed on a HUD for fixed wing aircraft

                airspeed                  : Current airspeed in m/s (float)
                groundspeed               : Current ground speed in m/s (float)
                heading                   : Current heading in degrees, in compass units (0..360, 0=north) (int16_t)
                throttle                  : Current throttle setting in integer percent, 0 to 100 (uint16_t)
                alt                       : Current altitude (MSL), in meters (float)
                climb                     : Current climb rate in meters/second (float)

                '''
                return MAVLink_vfr_hud_message(airspeed, groundspeed, heading, throttle, alt, climb)

        def vfr_hud_send(self, airspeed, groundspeed, heading, throttle, alt, climb):
                '''
                Metrics typically displayed on a HUD for fixed wing aircraft

                airspeed                  : Current airspeed in m/s (float)
                groundspeed               : Current ground speed in m/s (float)
                heading                   : Current heading in degrees, in compass units (0..360, 0=north) (int16_t)
                throttle                  : Current throttle setting in integer percent, 0 to 100 (uint16_t)
                alt                       : Current altitude (MSL), in meters (float)
                climb                     : Current climb rate in meters/second (float)

                '''
                return self.send(self.vfr_hud_encode(airspeed, groundspeed, heading, throttle, alt, climb))

        def command_encode(self, target_system, target_component, command, confirmation, param1, param2, param3, param4):
                '''
                Send a command with up to four parameters to the MAV

                target_system             : System which should execute the command (uint8_t)
                target_component          : Component which should execute the command, 0 for all components (uint8_t)
                command                   : Command ID, as defined by MAV_CMD enum. (uint8_t)
                confirmation              : 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command) (uint8_t)
                param1                    : Parameter 1, as defined by MAV_CMD enum. (float)
                param2                    : Parameter 2, as defined by MAV_CMD enum. (float)
                param3                    : Parameter 3, as defined by MAV_CMD enum. (float)
                param4                    : Parameter 4, as defined by MAV_CMD enum. (float)

                '''
                return MAVLink_command_message(target_system, target_component, command, confirmation, param1, param2, param3, param4)

        def command_send(self, target_system, target_component, command, confirmation, param1, param2, param3, param4):
                '''
                Send a command with up to four parameters to the MAV

                target_system             : System which should execute the command (uint8_t)
                target_component          : Component which should execute the command, 0 for all components (uint8_t)
                command                   : Command ID, as defined by MAV_CMD enum. (uint8_t)
                confirmation              : 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command) (uint8_t)
                param1                    : Parameter 1, as defined by MAV_CMD enum. (float)
                param2                    : Parameter 2, as defined by MAV_CMD enum. (float)
                param3                    : Parameter 3, as defined by MAV_CMD enum. (float)
                param4                    : Parameter 4, as defined by MAV_CMD enum. (float)

                '''
                return self.send(self.command_encode(target_system, target_component, command, confirmation, param1, param2, param3, param4))

        def command_ack_encode(self, command, result):
                '''
                Report status of a command. Includes feedback wether the command was
                executed

                command                   : Current airspeed in m/s (float)
                result                    : 1: Action ACCEPTED and EXECUTED, 1: Action TEMPORARY REJECTED/DENIED, 2: Action PERMANENTLY DENIED, 3: Action UNKNOWN/UNSUPPORTED, 4: Requesting CONFIRMATION (float)

                '''
                return MAVLink_command_ack_message(command, result)

        def command_ack_send(self, command, result):
                '''
                Report status of a command. Includes feedback wether the command was
                executed

                command                   : Current airspeed in m/s (float)
                result                    : 1: Action ACCEPTED and EXECUTED, 1: Action TEMPORARY REJECTED/DENIED, 2: Action PERMANENTLY DENIED, 3: Action UNKNOWN/UNSUPPORTED, 4: Requesting CONFIRMATION (float)

                '''
                return self.send(self.command_ack_encode(command, result))

        def optical_flow_encode(self, time, sensor_id, flow_x, flow_y, quality, ground_distance):
                '''
                Optical flow from a flow sensor (e.g. optical mouse sensor)

                time                      : Timestamp (UNIX) (uint64_t)
                sensor_id                 : Sensor ID (uint8_t)
                flow_x                    : Flow in pixels in x-sensor direction (int16_t)
                flow_y                    : Flow in pixels in y-sensor direction (int16_t)
                quality                   : Optical flow quality / confidence. 0: bad, 255: maximum quality (uint8_t)
                ground_distance           : Ground distance in meters (float)

                '''
                return MAVLink_optical_flow_message(time, sensor_id, flow_x, flow_y, quality, ground_distance)

        def optical_flow_send(self, time, sensor_id, flow_x, flow_y, quality, ground_distance):
                '''
                Optical flow from a flow sensor (e.g. optical mouse sensor)

                time                      : Timestamp (UNIX) (uint64_t)
                sensor_id                 : Sensor ID (uint8_t)
                flow_x                    : Flow in pixels in x-sensor direction (int16_t)
                flow_y                    : Flow in pixels in y-sensor direction (int16_t)
                quality                   : Optical flow quality / confidence. 0: bad, 255: maximum quality (uint8_t)
                ground_distance           : Ground distance in meters (float)

                '''
                return self.send(self.optical_flow_encode(time, sensor_id, flow_x, flow_y, quality, ground_distance))

        def object_detection_event_encode(self, time, object_id, type, name, quality, bearing, distance):
                '''
                Object has been detected

                time                      : Timestamp in milliseconds since system boot (uint32_t)
                object_id                 : Object ID (uint16_t)
                type                      : Object type: 0: image, 1: letter, 2: ground vehicle, 3: air vehicle, 4: surface vehicle, 5: sub-surface vehicle, 6: human, 7: animal (uint8_t)
                name                      : Name of the object as defined by the detector (char)
                quality                   : Detection quality / confidence. 0: bad, 255: maximum confidence (uint8_t)
                bearing                   : Angle of the object with respect to the body frame in NED coordinates in radians. 0: front (float)
                distance                  : Ground distance in meters (float)

                '''
                return MAVLink_object_detection_event_message(time, object_id, type, name, quality, bearing, distance)

        def object_detection_event_send(self, time, object_id, type, name, quality, bearing, distance):
                '''
                Object has been detected

                time                      : Timestamp in milliseconds since system boot (uint32_t)
                object_id                 : Object ID (uint16_t)
                type                      : Object type: 0: image, 1: letter, 2: ground vehicle, 3: air vehicle, 4: surface vehicle, 5: sub-surface vehicle, 6: human, 7: animal (uint8_t)
                name                      : Name of the object as defined by the detector (char)
                quality                   : Detection quality / confidence. 0: bad, 255: maximum confidence (uint8_t)
                bearing                   : Angle of the object with respect to the body frame in NED coordinates in radians. 0: front (float)
                distance                  : Ground distance in meters (float)

                '''
                return self.send(self.object_detection_event_encode(time, object_id, type, name, quality, bearing, distance))

        def debug_vect_encode(self, name, usec, x, y, z):
                '''
                

                name                      : Name (char)
                usec                      : Timestamp (uint64_t)
                x                         : x (float)
                y                         : y (float)
                z                         : z (float)

                '''
                return MAVLink_debug_vect_message(name, usec, x, y, z)

        def debug_vect_send(self, name, usec, x, y, z):
                '''
                

                name                      : Name (char)
                usec                      : Timestamp (uint64_t)
                x                         : x (float)
                y                         : y (float)
                z                         : z (float)

                '''
                return self.send(self.debug_vect_encode(name, usec, x, y, z))

        def named_value_float_encode(self, name, value):
                '''
                Send a key-value pair as float. The use of this message is discouraged
                for normal packets, but a quite efficient way for
                testing new messages and getting experimental debug
                output.

                name                      : Name of the debug variable (char)
                value                     : Floating point value (float)

                '''
                return MAVLink_named_value_float_message(name, value)

        def named_value_float_send(self, name, value):
                '''
                Send a key-value pair as float. The use of this message is discouraged
                for normal packets, but a quite efficient way for
                testing new messages and getting experimental debug
                output.

                name                      : Name of the debug variable (char)
                value                     : Floating point value (float)

                '''
                return self.send(self.named_value_float_encode(name, value))

        def named_value_int_encode(self, name, value):
                '''
                Send a key-value pair as integer. The use of this message is
                discouraged for normal packets, but a quite efficient
                way for testing new messages and getting experimental
                debug output.

                name                      : Name of the debug variable (char)
                value                     : Signed integer value (int32_t)

                '''
                return MAVLink_named_value_int_message(name, value)

        def named_value_int_send(self, name, value):
                '''
                Send a key-value pair as integer. The use of this message is
                discouraged for normal packets, but a quite efficient
                way for testing new messages and getting experimental
                debug output.

                name                      : Name of the debug variable (char)
                value                     : Signed integer value (int32_t)

                '''
                return self.send(self.named_value_int_encode(name, value))

        def statustext_encode(self, severity, text):
                '''
                Status text message. These messages are printed in yellow in the COMM
                console of QGroundControl. WARNING: They consume quite
                some bandwidth, so use only for important status and
                error messages. If implemented wisely, these messages
                are buffered on the MCU and sent only at a limited
                rate (e.g. 10 Hz).

                severity                  : Severity of status, 0 = info message, 255 = critical fault (uint8_t)
                text                      : Status text message, without null termination character (int8_t)

                '''
                return MAVLink_statustext_message(severity, text)

        def statustext_send(self, severity, text):
                '''
                Status text message. These messages are printed in yellow in the COMM
                console of QGroundControl. WARNING: They consume quite
                some bandwidth, so use only for important status and
                error messages. If implemented wisely, these messages
                are buffered on the MCU and sent only at a limited
                rate (e.g. 10 Hz).

                severity                  : Severity of status, 0 = info message, 255 = critical fault (uint8_t)
                text                      : Status text message, without null termination character (int8_t)

                '''
                return self.send(self.statustext_encode(severity, text))

        def debug_encode(self, ind, value):
                '''
                Send a debug value. The index is used to discriminate between values.
                These values show up in the plot of QGroundControl as
                DEBUG N.

                ind                       : index of debug variable (uint8_t)
                value                     : DEBUG value (float)

                '''
                return MAVLink_debug_message(ind, value)

        def debug_send(self, ind, value):
                '''
                Send a debug value. The index is used to discriminate between values.
                These values show up in the plot of QGroundControl as
                DEBUG N.

                ind                       : index of debug variable (uint8_t)
                value                     : DEBUG value (float)

                '''
                return self.send(self.debug_encode(ind, value))

